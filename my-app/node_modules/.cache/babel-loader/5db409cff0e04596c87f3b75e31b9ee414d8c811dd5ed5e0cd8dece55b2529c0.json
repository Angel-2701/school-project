{"ast":null,"code":"import { createRouter, createWebHistory } from \"vue-router\";\nimport HomeView from \"../views/HomeView.vue\";\nimport LoginPage from \"../components/LoginPage.vue\";\nimport AdminPage from \"../components/AdminPage.vue\";\nimport StudentPage from \"../components/StudentPage.vue\";\nimport TeacherPage from \"../components/TeacherPage.vue\";\nconst routes = [{\n  path: \"/\",\n  name: \"home\",\n  component: HomeView\n}, {\n  path: \"/about\",\n  name: \"about\",\n  // route level code-splitting\n  // this generates a separate chunk (about.[hash].js) for this route\n  // which is lazy-loaded when the route is visited.\n  component: () => import( /* webpackChunkName: \"about\" */\"../views/AboutView.vue\")\n}, {\n  path: \"/login\",\n  name: \"Login\",\n  component: LoginPage\n}, {\n  path: \"/Admin\",\n  name: \"Admin\",\n  component: AdminPage,\n  meta: {\n    requiresAuth: true\n  } // Add meta field to specify authentication requirement\n}, {\n  path: \"/Student\",\n  name: \"Student\",\n  component: StudentPage,\n  meta: {\n    requiresAuth: true\n  } // Add meta field to specify authentication requirement\n}, {\n  path: \"/Teacher\",\n  name: \"Teacher\",\n  component: TeacherPage,\n  meta: {\n    requiresAuth: true\n  } // Add meta field to specify authentication requirement\n}];\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n});\n\n// Add navigation guard to check authentication status before navigating to protected routes\nrouter.beforeEach((to, from, next) => {\n  const token = localStorage.getItem(\"token\");\n  const requiresAuth = to.matched.some(record => record.meta.requiresAuth);\n  const userRole = token ? parseToken(token).rol : null; // Assuming parseToken is a function to extract role from the JWT token\n\n  if (requiresAuth && !token) {\n    // Redirect to login page if authentication is required but token is not present\n    next(\"/login\");\n  } else if (requiresAuth && userRole === \"admin\" && to.name !== \"Admin\") {\n    // Allow only admin to access admin route\n    next(\"/Admin\");\n  } else if (requiresAuth && userRole === \"student\" && to.name !== \"Student\") {\n    // Allow only student to access student route\n    next(\"/Student\");\n  } else if (requiresAuth && userRole === \"teacher\" && to.name !== \"Teacher\") {\n    // Allow only teacher to access teacher route\n    next(\"/Teacher\");\n  } else {\n    // Allow access to the route\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","HomeView","LoginPage","AdminPage","StudentPage","TeacherPage","routes","path","name","component","meta","requiresAuth","router","history","process","env","BASE_URL","beforeEach","to","from","next","token","localStorage","getItem","matched","some","record","userRole","parseToken","rol"],"sources":["/Users/angel/project-system/my-app/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from \"vue-router\";\nimport HomeView from \"../views/HomeView.vue\";\nimport LoginPage from \"../components/LoginPage.vue\";\nimport AdminPage from \"../components/AdminPage.vue\";\nimport StudentPage from \"../components/StudentPage.vue\";\nimport TeacherPage from \"../components/TeacherPage.vue\";\n\nconst routes = [\n  {\n    path: \"/\",\n    name: \"home\",\n    component: HomeView,\n  },\n  {\n    path: \"/about\",\n    name: \"about\",\n    // route level code-splitting\n    // this generates a separate chunk (about.[hash].js) for this route\n    // which is lazy-loaded when the route is visited.\n    component: () =>\n      import(/* webpackChunkName: \"about\" */ \"../views/AboutView.vue\"),\n  },\n  {\n    path: \"/login\",\n    name: \"Login\",\n    component: LoginPage,\n  },\n  {\n    path: \"/Admin\",\n    name: \"Admin\",\n    component: AdminPage,\n    meta: { requiresAuth: true }, // Add meta field to specify authentication requirement\n  },\n  {\n    path: \"/Student\",\n    name: \"Student\",\n    component: StudentPage,\n    meta: { requiresAuth: true }, // Add meta field to specify authentication requirement\n  },\n  {\n    path: \"/Teacher\",\n    name: \"Teacher\",\n    component: TeacherPage,\n    meta: { requiresAuth: true }, // Add meta field to specify authentication requirement\n  },\n];\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes,\n});\n\n// Add navigation guard to check authentication status before navigating to protected routes\nrouter.beforeEach((to, from, next) => {\n  const token = localStorage.getItem(\"token\");\n  const requiresAuth = to.matched.some((record) => record.meta.requiresAuth);\n  const userRole = token ? parseToken(token).rol : null; // Assuming parseToken is a function to extract role from the JWT token\n\n  if (requiresAuth && !token) {\n    // Redirect to login page if authentication is required but token is not present\n    next(\"/login\");\n  } else if (requiresAuth && userRole === \"admin\" && to.name !== \"Admin\") {\n    // Allow only admin to access admin route\n    next(\"/Admin\");\n  } else if (requiresAuth && userRole === \"student\" && to.name !== \"Student\") {\n    // Allow only student to access student route\n    next(\"/Student\");\n  } else if (requiresAuth && userRole === \"teacher\" && to.name !== \"Teacher\") {\n    // Allow only teacher to access teacher route\n    next(\"/Teacher\");\n  } else {\n    // Allow access to the route\n    next();\n  }\n});\n\nexport default router;\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,SAAS,MAAM,6BAA6B;AACnD,OAAOC,SAAS,MAAM,6BAA6B;AACnD,OAAOC,WAAW,MAAM,+BAA+B;AACvD,OAAOC,WAAW,MAAM,+BAA+B;AAEvD,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAER;AACb,CAAC,EACD;EACEM,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACb;EACA;EACA;EACAC,SAAS,EAAEA,CAAA,KACT,MAAM,EAAC,+BAAgC,wBAAwB;AACnE,CAAC,EACD;EACEF,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEP;AACb,CAAC,EACD;EACEK,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEN,SAAS;EACpBO,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAE;AAChC,CAAC,EACD;EACEJ,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,SAAS;EACfC,SAAS,EAAEL,WAAW;EACtBM,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAE;AAChC,CAAC,EACD;EACEJ,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,SAAS;EACfC,SAAS,EAAEJ,WAAW;EACtBK,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAE;AAChC,CAAC,CACF;AAED,MAAMC,MAAM,GAAGb,YAAY,CAAC;EAC1Bc,OAAO,EAAEb,gBAAgB,CAACc,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;EAC/CV;AACF,CAAC,CAAC;;AAEF;AACAM,MAAM,CAACK,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMZ,YAAY,GAAGO,EAAE,CAACM,OAAO,CAACC,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAAChB,IAAI,CAACC,YAAY,CAAC;EAC1E,MAAMgB,QAAQ,GAAGN,KAAK,GAAGO,UAAU,CAACP,KAAK,CAAC,CAACQ,GAAG,GAAG,IAAI,CAAC,CAAC;;EAEvD,IAAIlB,YAAY,IAAI,CAACU,KAAK,EAAE;IAC1B;IACAD,IAAI,CAAC,QAAQ,CAAC;EAChB,CAAC,MAAM,IAAIT,YAAY,IAAIgB,QAAQ,KAAK,OAAO,IAAIT,EAAE,CAACV,IAAI,KAAK,OAAO,EAAE;IACtE;IACAY,IAAI,CAAC,QAAQ,CAAC;EAChB,CAAC,MAAM,IAAIT,YAAY,IAAIgB,QAAQ,KAAK,SAAS,IAAIT,EAAE,CAACV,IAAI,KAAK,SAAS,EAAE;IAC1E;IACAY,IAAI,CAAC,UAAU,CAAC;EAClB,CAAC,MAAM,IAAIT,YAAY,IAAIgB,QAAQ,KAAK,SAAS,IAAIT,EAAE,CAACV,IAAI,KAAK,SAAS,EAAE;IAC1E;IACAY,IAAI,CAAC,UAAU,CAAC;EAClB,CAAC,MAAM;IACL;IACAA,IAAI,CAAC,CAAC;EACR;AACF,CAAC,CAAC;AAEF,eAAeR,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}