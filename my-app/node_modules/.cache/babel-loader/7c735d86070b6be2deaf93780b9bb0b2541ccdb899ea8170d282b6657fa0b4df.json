{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      projects: [],\n      tableHeaders: [],\n      sidebarItems: [{\n        title: 'Projects',\n        icon: 'mdi-folder-outline'\n      }, {\n        title: 'Students',\n        icon: 'mdi-account-plus-outline'\n      }, {\n        title: 'Teachers',\n        icon: 'mdi-account-tie'\n      }],\n      userName: localStorage.getItem('userName'),\n      // Retrieve the user's name from localStorage\n      drawer: false,\n      editDialog: false,\n      editedProjectName: '',\n      editedProjectId: '',\n      createDialog: false,\n      newProject: {\n        name: '',\n        company: '',\n        _id: ''\n      }\n    };\n  },\n  methods: {\n    async fetchData() {\n      try {\n        const response = await axios.get('http://localhost:3000/projects');\n        this.projects = response.data;\n        // Additional logic to generate tableHeaders based on the first project\n      } catch (error) {\n        console.error('Error fetching projects:', error);\n      }\n    },\n    navigate(index) {\n      // Navigation logic based on the index\n    },\n    logout() {\n      // Logout logic\n    },\n    editProject(project, event) {\n      // Stop the propagation of the click event\n      event.stopPropagation();\n      this.editedProjectName = project.name;\n      this.editedProjectId = project._id;\n      this.editDialog = true;\n    },\n    saveEditedProject() {\n      // Logic to save the edited project\n    },\n    deleteProject(project) {\n      // Logic to delete a project\n    },\n    openCreateDialog() {\n      this.createDialog = true;\n    },\n    saveNewProject() {\n      // Logic to save a new project\n    },\n    cancelCreate() {\n      this.createDialog = false;\n    },\n    cancelEdit() {\n      this.editDialog = false;\n    },\n    handleRowClick(item) {\n      // Logic to handle row click\n    }\n  },\n  mounted() {\n    this.fetchData();\n  }\n};","map":{"version":3,"names":["axios","data","projects","tableHeaders","sidebarItems","title","icon","userName","localStorage","getItem","drawer","editDialog","editedProjectName","editedProjectId","createDialog","newProject","name","company","_id","methods","fetchData","response","get","error","console","navigate","index","logout","editProject","project","event","stopPropagation","saveEditedProject","deleteProject","openCreateDialog","saveNewProject","cancelCreate","cancelEdit","handleRowClick","item","mounted"],"sources":["/Users/angel/school-project/my-app/src/components/AdminPage.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-container>\n      <!-- Top Bar -->\n      <v-app-bar app color=\"blue darken-2\" dark>\n        <!-- Burger menu icon -->\n        <v-btn icon @click=\"drawer =!drawer\">\n          <v-icon>mdi-menu</v-icon>\n        </v-btn>\n        <!-- Title -->\n        <v-toolbar-title>{{ userName }}</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <!-- Logout button -->\n        <v-btn icon @click=\"logout\">\n          <v-icon>mdi-logout</v-icon>\n        </v-btn>\n      </v-app-bar>\n\n      <!-- Sidebar -->\n      <v-navigation-drawer app v-model=\"drawer\" color=\"blue darken-2\" dark>\n        <v-list dense>\n          <v-list-item\n            v-for=\"(item, index) in sidebarItems\"\n            :key=\"index\"\n            @click=\"navigate(index)\"\n          >\n            <v-list-item-action>\n              <v-icon>{{ item.icon }}</v-icon>\n            </v-list-item-action>\n            <v-list-item-content>\n              <v-list-item-title>{{ item.title }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n        </v-list>\n      </v-navigation-drawer>\n\n      <v-main>\n        <!-- Main content -->\n        <v-col cols=\"12\" style=\"max-width: 1500px; margin: 0px auto\">\n          <v-card class=\"text-center\" style=\"width: 100%; margin: 0px auto\">\n            <!-- Projects Data -->\n            <v-data-table\n              v-if=\"projects.length > 0\"\n              :items=\"projects\"\n              align=\"center\"\n            >\n              <template v-slot:top>\n                <v-toolbar flat color=\"blue darken-2\">\n                  <v-toolbar-title>Projects</v-toolbar-title>\n                  <v-divider class=\"mx-4\" inset vertical></v-divider>\n                  <v-spacer></v-spacer>\n                  <v-btn icon color=\"blue darken-2\" @click=\"openCreateDialog\">\n                    <v-icon>mdi-plus</v-icon>\n                  </v-btn>\n                </v-toolbar>\n              </template>\n              <template v-slot:item=\"{ item }\">\n                <tr @click=\"handleRowClick(item)\" class=\"clickable-row\">\n                  <td v-for=\"(value, key) in item\" :key=\"key\">\n                    {{ value }}\n                  </td>\n                  <td>\n                    <!-- Use small prop to make the buttons smaller -->\n                    <v-btn\n                      icon\n                      small\n                      color=\"blue darken-2\"\n                      @click=\"editProject(item, $event)\"\n                      style=\"width: 30px; height: 30px; margin-right: 5px\"\n                    >\n                      <v-icon style=\"font-size: 18px\">mdi-pencil</v-icon>\n                    </v-btn>\n\n                    <v-btn\n                      icon\n                      small\n                      color=\"red darken-2\"\n                      @click=\"deleteProject(item)\"\n                      style=\"width: 30px; height: 30px; margin-right: 5px\"\n                    >\n                      <v-icon style=\"font-size: 18px\">mdi-delete</v-icon>\n                    </v-btn>\n                  </td>\n                </tr>\n              </template>\n            </v-data-table>\n          </v-card>\n        </v-col>\n      </v-main>\n\n      <!-- Edit Dialog -->\n      <v-dialog v-model=\"editDialog\" max-width=\"500\">\n        <v-card>\n          <v-card-title>Edit Project Name</v-card-title>\n          <v-card-text>\n            <v-text-field\n              v-model=\"editedProjectName\"\n              label=\"Project Name\"\n            ></v-text-field>\n          </v-card-text>\n          <v-card-actions>\n            <v-btn color=\"blue darken-2\" @click=\"saveEditedProject\">Save</v-btn>\n            <v-btn @click=\"cancelEdit\">Cancel</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n\n      <!-- Create Dialog -->\n      <v-dialog v-model=\"createDialog\" max-width=\"500\">\n        <v-card>\n          <v-card-title>Create New Project</v-card-title>\n          <v-card-text>\n            <v-text-field v-model=\"newProject._id\" label=\"ID\"></v-text-field>\n            <v-text-field\n              v-model=\"newProject.name\"\n              label=\"Project Name\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"newProject.company\"\n              label=\"Company\"\n            ></v-text-field>\n          </v-card-text>\n          <v-card-actions>\n            <v-btn color=\"blue darken-2\" @click=\"saveNewProject\">Save</v-btn>\n            <v-btn @click=\"cancelCreate\">Cancel</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n    </v-container>\n  </v-app>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  data () {\n    return {\n      projects: [],\n      tableHeaders: [],\n      sidebarItems: [\n        { title: 'Projects', icon: 'mdi-folder-outline' },\n        { title: 'Students', icon: 'mdi-account-plus-outline' },\n        { title: 'Teachers', icon: 'mdi-account-tie' }\n      ],\n      userName: localStorage.getItem('userName'), // Retrieve the user's name from localStorage\n      drawer: false,\n      editDialog: false,\n      editedProjectName: '',\n      editedProjectId: '',\n      createDialog: false,\n      newProject: {\n        name: '',\n        company: '',\n        _id: ''\n      }\n    }\n  },\n  methods: {\n    async fetchData () {\n      try {\n        const response = await axios.get('http://localhost:3000/projects')\n        this.projects = response.data\n        // Additional logic to generate tableHeaders based on the first project\n      } catch (error) {\n        console.error('Error fetching projects:', error)\n      }\n    },\n    navigate (index) {\n      // Navigation logic based on the index\n    },\n    logout () {\n      // Logout logic\n    },\n    editProject (project, event) {\n      // Stop the propagation of the click event\n      event.stopPropagation()\n\n      this.editedProjectName = project.name\n      this.editedProjectId = project._id\n      this.editDialog = true\n    },\n    saveEditedProject () {\n      // Logic to save the edited project\n    },\n    deleteProject (project) {\n      // Logic to delete a project\n    },\n    openCreateDialog () {\n      this.createDialog = true\n    },\n    saveNewProject () {\n      // Logic to save a new project\n    },\n    cancelCreate () {\n      this.createDialog = false\n    },\n    cancelEdit () {\n      this.editDialog = false\n    },\n    handleRowClick (item) {\n      // Logic to handle row click\n    }\n  },\n  mounted () {\n    this.fetchData()\n  }\n}\n</script>\n\n<style scoped>\n/* Adjustments for burger menu icon color */\n.v-btn i {\n  color: white;\n}\n\n/* Add shadow to indicate clickable rows */\n.clickable-row:hover {\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n</style>\n"],"mappings":"AAqIA,OAAOA,KAAI,MAAO,OAAM;AAExB,eAAe;EACbC,IAAGA,CAAA,EAAK;IACN,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,YAAY,EAAE,EAAE;MAChBC,YAAY,EAAE,CACZ;QAAEC,KAAK,EAAE,UAAU;QAAEC,IAAI,EAAE;MAAqB,CAAC,EACjD;QAAED,KAAK,EAAE,UAAU;QAAEC,IAAI,EAAE;MAA2B,CAAC,EACvD;QAAED,KAAK,EAAE,UAAU;QAAEC,IAAI,EAAE;MAAkB,EAC9C;MACDC,QAAQ,EAAEC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MAAE;MAC5CC,MAAM,EAAE,KAAK;MACbC,UAAU,EAAE,KAAK;MACjBC,iBAAiB,EAAE,EAAE;MACrBC,eAAe,EAAE,EAAE;MACnBC,YAAY,EAAE,KAAK;MACnBC,UAAU,EAAE;QACVC,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE,EAAE;QACXC,GAAG,EAAE;MACP;IACF;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,SAAQA,CAAA,EAAK;MACjB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMrB,KAAK,CAACsB,GAAG,CAAC,gCAAgC;QACjE,IAAI,CAACpB,QAAO,GAAImB,QAAQ,CAACpB,IAAG;QAC5B;MACF,EAAE,OAAOsB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK;MACjD;IACF,CAAC;IACDE,QAAOA,CAAGC,KAAK,EAAE;MACf;IAAA,CACD;IACDC,MAAKA,CAAA,EAAK;MACR;IAAA,CACD;IACDC,WAAUA,CAAGC,OAAO,EAAEC,KAAK,EAAE;MAC3B;MACAA,KAAK,CAACC,eAAe,CAAC;MAEtB,IAAI,CAACnB,iBAAgB,GAAIiB,OAAO,CAACb,IAAG;MACpC,IAAI,CAACH,eAAc,GAAIgB,OAAO,CAACX,GAAE;MACjC,IAAI,CAACP,UAAS,GAAI,IAAG;IACvB,CAAC;IACDqB,iBAAgBA,CAAA,EAAK;MACnB;IAAA,CACD;IACDC,aAAYA,CAAGJ,OAAO,EAAE;MACtB;IAAA,CACD;IACDK,gBAAeA,CAAA,EAAK;MAClB,IAAI,CAACpB,YAAW,GAAI,IAAG;IACzB,CAAC;IACDqB,cAAaA,CAAA,EAAK;MAChB;IAAA,CACD;IACDC,YAAWA,CAAA,EAAK;MACd,IAAI,CAACtB,YAAW,GAAI,KAAI;IAC1B,CAAC;IACDuB,UAASA,CAAA,EAAK;MACZ,IAAI,CAAC1B,UAAS,GAAI,KAAI;IACxB,CAAC;IACD2B,cAAaA,CAAGC,IAAI,EAAE;MACpB;IAAA;EAEJ,CAAC;EACDC,OAAMA,CAAA,EAAK;IACT,IAAI,CAACpB,SAAS,CAAC;EACjB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}