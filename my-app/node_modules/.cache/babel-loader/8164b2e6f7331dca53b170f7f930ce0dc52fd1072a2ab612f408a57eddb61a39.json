{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      selectedFile: null,\n      pdfFiles: []\n    };\n  },\n  methods: {\n    onFileChange(event) {\n      this.selectedFile = event.target.files[0];\n    },\n    async uploadFile() {\n      if (!this.selectedFile) {\n        alert(\"Please select a PDF file first!\");\n        return;\n      }\n      const formData = new FormData();\n      formData.append(\"file\", this.selectedFile);\n      try {\n        const response = await axios.post(\"http://localhost:3000/upload\", formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n        if (response.status === 201) {\n          alert(\"File uploaded successfully!\");\n          this.fetchPDFFiles(); // After successful upload, fetch PDF files again\n        } else {\n          alert(\"Failed to upload file.\");\n        }\n      } catch (error) {\n        console.error(\"Error uploading file:\", error);\n        alert(\"Error uploading file.\");\n      }\n    },\n    async fetchPDFFiles() {\n      try {\n        const response = await axios.get(\"http://localhost:3000/files\");\n        this.pdfFiles = response.data.files;\n      } catch (error) {\n        console.error(\"Error fetching PDF files:\", error);\n        alert(\"Error fetching PDF files.\");\n      }\n    }\n  },\n  mounted() {\n    this.fetchPDFFiles(); // Fetch PDF files when the component is mounted\n  }\n};","map":{"version":3,"names":["axios","data","selectedFile","pdfFiles","methods","onFileChange","event","target","files","uploadFile","alert","formData","FormData","append","response","post","headers","status","fetchPDFFiles","error","console","get","mounted"],"sources":["/Users/angel/school-project/my-app/src/components/StudentPage.vue"],"sourcesContent":["<template>\n  <div>\n    <input type=\"file\" @change=\"onFileChange\" accept=\"application/pdf\" />\n    <button @click=\"uploadFile\">Upload PDF</button>\n\n    <div v-if=\"pdfFiles.length > 0\">\n      <h2>Uploaded PDF Files</h2>\n      <ul>\n        <li v-for=\"(file, index) in pdfFiles\" :key=\"index\">\n          <a :href=\"file.url\" target=\"_blank\">{{ file.filename }}</a>\n        </li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      selectedFile: null,\n      pdfFiles: [],\n    };\n  },\n  methods: {\n    onFileChange(event) {\n      this.selectedFile = event.target.files[0];\n    },\n    async uploadFile() {\n      if (!this.selectedFile) {\n        alert(\"Please select a PDF file first!\");\n        return;\n      }\n\n      const formData = new FormData();\n      formData.append(\"file\", this.selectedFile);\n\n      try {\n        const response = await axios.post(\n          \"http://localhost:3000/upload\",\n          formData,\n          {\n            headers: {\n              \"Content-Type\": \"multipart/form-data\",\n            },\n          }\n        );\n\n        if (response.status === 201) {\n          alert(\"File uploaded successfully!\");\n          this.fetchPDFFiles(); // After successful upload, fetch PDF files again\n        } else {\n          alert(\"Failed to upload file.\");\n        }\n      } catch (error) {\n        console.error(\"Error uploading file:\", error);\n        alert(\"Error uploading file.\");\n      }\n    },\n    async fetchPDFFiles() {\n      try {\n        const response = await axios.get(\"http://localhost:3000/files\");\n        this.pdfFiles = response.data.files;\n      } catch (error) {\n        console.error(\"Error fetching PDF files:\", error);\n        alert(\"Error fetching PDF files.\");\n      }\n    },\n  },\n  mounted() {\n    this.fetchPDFFiles(); // Fetch PDF files when the component is mounted\n  },\n};\n</script>\n\n<style scoped>\n/* Add your styles here */\n</style>\n"],"mappings":"AAiBA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,YAAYA,CAACC,KAAK,EAAE;MAClB,IAAI,CAACJ,YAAW,GAAII,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC3C,CAAC;IACD,MAAMC,UAAUA,CAAA,EAAG;MACjB,IAAI,CAAC,IAAI,CAACP,YAAY,EAAE;QACtBQ,KAAK,CAAC,iCAAiC,CAAC;QACxC;MACF;MAEA,MAAMC,QAAO,GAAI,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,IAAI,CAACX,YAAY,CAAC;MAE1C,IAAI;QACF,MAAMY,QAAO,GAAI,MAAMd,KAAK,CAACe,IAAI,CAC/B,8BAA8B,EAC9BJ,QAAQ,EACR;UACEK,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CACF,CAAC;QAED,IAAIF,QAAQ,CAACG,MAAK,KAAM,GAAG,EAAE;UAC3BP,KAAK,CAAC,6BAA6B,CAAC;UACpC,IAAI,CAACQ,aAAa,CAAC,CAAC,EAAE;QACxB,OAAO;UACLR,KAAK,CAAC,wBAAwB,CAAC;QACjC;MACF,EAAE,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7CT,KAAK,CAAC,uBAAuB,CAAC;MAChC;IACF,CAAC;IACD,MAAMQ,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF,MAAMJ,QAAO,GAAI,MAAMd,KAAK,CAACqB,GAAG,CAAC,6BAA6B,CAAC;QAC/D,IAAI,CAAClB,QAAO,GAAIW,QAAQ,CAACb,IAAI,CAACO,KAAK;MACrC,EAAE,OAAOW,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjDT,KAAK,CAAC,2BAA2B,CAAC;MACpC;IACF;EACF,CAAC;EACDY,OAAOA,CAAA,EAAG;IACR,IAAI,CAACJ,aAAa,CAAC,CAAC,EAAE;EACxB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}