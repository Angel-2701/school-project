{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      userName: localStorage.getItem('userName'),\n      pdfFiles: {\n        'Solicitud de residencias profesionales': {\n          _id: '',\n          file: null,\n          submitted: false\n        },\n        'Carta de presentación': {\n          _id: '',\n          file: null,\n          submitted: false\n        }\n      },\n      submittedFiles: {},\n      drawer: false,\n      sidebarItems: [{\n        title: 'Proyecto',\n        icon: 'mdi-folder-outline'\n      }, {\n        title: 'Asesorias',\n        icon: 'mdi-account-plus-outline'\n      }, {\n        title: 'Archivos',\n        icon: 'mdi-file-document-outline'\n      }],\n      userId: localStorage.getItem('id')\n    };\n  },\n  mounted() {\n    this.fetchFileData();\n  },\n  methods: {\n    async fetchFileData() {\n      try {\n        const response = await axios.get('http://localhost:3000/archivos');\n        const files = response.data.map(item => ({\n          filename: item.filename,\n          _id: item._id,\n          submitted: true\n        }));\n\n        // Iterate over each file in the response\n        files.forEach(file => {\n          // Check if any key in pdfFiles object contains the _id\n          for (const key in this.pdfFiles) {\n            if (this.pdfFiles[key] && this.pdfFiles[key]._id === file._id) {\n              // Update the submitted property of the pdfFiles object\n              this.pdfFiles[key].submitted = true;\n              break; // Exit loop after finding the matching key\n            }\n          }\n        });\n      } catch (error) {\n        console.error('Error fetching files:', error);\n      }\n    },\n    navigate(index) {\n      switch (index) {\n        case 0:\n          this.$router.push('/student');\n          break;\n        case 1:\n          this.$router.push('/student/asesorias');\n          break;\n        case 2:\n          this.$router.push('/student/archivos');\n          break;\n        default:\n          break;\n      }\n    },\n    logout() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      this.$router.push('/login');\n    },\n    async submitForm() {\n      try {\n        const formData = new FormData();\n\n        // Iterate over each file in pdfFiles\n        for (const key in this.pdfFiles) {\n          const fileInfo = this.pdfFiles[key];\n\n          // Check if file exists and has not been submitted\n          if (fileInfo.file && !fileInfo.submitted) {\n            // Generate a unique ID for the file\n            const fileId = this.generateUniqueId();\n\n            // Add the generated ID to the fileInfo\n            fileInfo.file._id = fileId;\n\n            // Append the file to formData with the field name \"files\"\n            formData.append('files', fileInfo.file);\n          }\n        }\n\n        // Send the formData to the server\n        const response = await axios.post('http://localhost:3000/upload-archivo', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n\n        // Check if the response is successful\n        if (response.status === 201) {\n          // Display a success alert message\n          window.alert('Data saved successfully!');\n          this.fetchFileData();\n          // Handle any additional logic here\n        } else {\n          console.error('Failed to save data.');\n        }\n      } catch (error) {\n        console.error('Error uploading files:', error);\n      }\n    },\n    generateUniqueId() {\n      // Generate a unique ID using a combination of timestamp and random number\n      return Date.now().toString(36) + Math.random().toString(36).substr(2, 5);\n    },\n    downloadAllFiles() {\n      // Download all files logic\n    },\n    async downloadFile(fileId) {\n      try {\n        const response = await axios.get(`http://localhost:3000/archivos/${fileId}`, {\n          responseType: 'blob'\n        });\n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', 'file.pdf'); // Change the file name as needed\n        document.body.appendChild(link);\n        link.click();\n      } catch (error) {\n        console.error('Error downloading file:', error);\n      }\n    },\n    async deleteFile(fileId, fieldName) {\n      try {\n        await axios.delete(`http://localhost:3000/archivos/${fileId}`);\n        this.pdfFiles[fieldName]._id = '';\n        this.pdfFiles[fieldName].file = null;\n        this.pdfFiles[fieldName].submitted = false;\n      } catch (error) {\n        console.error('Error deleting file:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","userName","localStorage","getItem","pdfFiles","_id","file","submitted","submittedFiles","drawer","sidebarItems","title","icon","userId","mounted","fetchFileData","methods","response","get","files","map","item","filename","forEach","key","error","console","navigate","index","$router","push","logout","removeItem","submitForm","formData","FormData","fileInfo","fileId","generateUniqueId","append","post","headers","status","window","alert","Date","now","toString","Math","random","substr","downloadAllFiles","downloadFile","responseType","url","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","deleteFile","fieldName","delete"],"sources":["/Users/angel/school-project/my-app/src/components/ArchivosAlumno.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-container>\n      <!-- Top Bar -->\n      <v-app-bar app color=\"blue darken-2\" dark>\n        <!-- Burger menu icon -->\n        <v-btn icon @click=\"drawer = !drawer\">\n          <v-icon>mdi-menu</v-icon>\n        </v-btn>\n        <!-- Title -->\n        <v-toolbar-title>{{ userName }}</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <!-- Logout button -->\n        <v-btn icon @click=\"logout\">\n          <v-icon>mdi-logout</v-icon>\n        </v-btn>\n      </v-app-bar>\n\n      <!-- Sidebar -->\n      <v-navigation-drawer app v-model=\"drawer\" color=\"blue darken-2\" dark>\n        <v-list dense>\n          <v-list-item\n            v-for=\"(item, index) in sidebarItems\"\n            :key=\"index\"\n            @click=\"navigate(index)\"\n          >\n            <v-list-item-action>\n              <v-icon>{{ item.icon }}</v-icon>\n            </v-list-item-action>\n            <v-list-item-content>\n              <v-list-item-title>{{ item.title }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n        </v-list>\n      </v-navigation-drawer>\n\n      <!-- Main Content -->\n      <v-main>\n        <v-col cols=\"12\" style=\"max-width: 1000px; margin: 0 auto\">\n          <v-card class=\"mx-auto\" max-width=\"800\">\n            <v-card-title class=\"blue darken-2 white--text\">\n              Upload PDF Files\n            </v-card-title>\n            <v-card-text>\n              <v-row>\n                <v-col\n                  v-for=\"(fileInfo, fieldName) in pdfFiles\"\n                  :key=\"fieldName\"\n                  cols=\"12\"\n                  md=\"6\"\n                >\n                  <v-card class=\"mb-3\">\n                    <v-card-title>{{ fieldName }}</v-card-title>\n                    <v-file-input\n                      v-model=\"pdfFiles[fieldName].file\"\n                      accept=\".pdf\"\n                      :label=\"'Select ' + fieldName\"\n                    ></v-file-input>\n                    <v-card-actions>\n                      <v-btn\n                        v-if=\"fileInfo.submitted\"\n                        color=\"green\"\n                        @click=\"downloadFile(fileInfo._id)\"\n                      >\n                        Download\n                      </v-btn>\n                      <v-btn\n                        v-if=\"fileInfo.submitted\"\n                        color=\"red\"\n                        @click=\"deleteFile(fileInfo._id, fieldName)\"\n                      >\n                        Delete\n                      </v-btn>\n                    </v-card-actions>\n                  </v-card>\n                </v-col>\n              </v-row>\n            </v-card-text>\n            <v-divider class=\"my-4\"></v-divider>\n            <v-card-actions>\n              <v-btn color=\"blue darken-2\" @click=\"submitForm\">Submit</v-btn>\n              <v-btn color=\"primary\" @click=\"downloadAllFiles\"\n                >Download All Files</v-btn\n              >\n            </v-card-actions>\n          </v-card>\n        </v-col>\n      </v-main>\n    </v-container>\n  </v-app>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  data () {\n    return {\n      userName: localStorage.getItem('userName'),\n      pdfFiles: {\n        'Solicitud de residencias profesionales': {\n          _id: '',\n          file: null,\n          submitted: false\n        },\n        'Carta de presentación': {\n          _id: '',\n          file: null,\n          submitted: false\n        }\n      },\n      submittedFiles: {},\n      drawer: false,\n      sidebarItems: [\n        { title: 'Proyecto', icon: 'mdi-folder-outline' },\n        { title: 'Asesorias', icon: 'mdi-account-plus-outline' },\n        { title: 'Archivos', icon: 'mdi-file-document-outline' }\n      ],\n      userId: localStorage.getItem('id')\n    }\n  },\n  mounted () {\n    this.fetchFileData()\n  },\n  methods: {\n    async fetchFileData () {\n      try {\n        const response = await axios.get('http://localhost:3000/archivos')\n        const files = response.data.map((item) => ({\n          filename: item.filename,\n          _id: item._id,\n          submitted: true\n        }))\n\n        // Iterate over each file in the response\n        files.forEach((file) => {\n          // Check if any key in pdfFiles object contains the _id\n          for (const key in this.pdfFiles) {\n            if (this.pdfFiles[key] && this.pdfFiles[key]._id === file._id) {\n              // Update the submitted property of the pdfFiles object\n              this.pdfFiles[key].submitted = true\n              break // Exit loop after finding the matching key\n            }\n          }\n        })\n      } catch (error) {\n        console.error('Error fetching files:', error)\n      }\n    },\n\n    navigate (index) {\n      switch (index) {\n        case 0:\n          this.$router.push('/student')\n          break\n        case 1:\n          this.$router.push('/student/asesorias')\n          break\n        case 2:\n          this.$router.push('/student/archivos')\n          break\n        default:\n          break\n      }\n    },\n    logout () {\n      localStorage.removeItem('token')\n      localStorage.removeItem('user')\n      this.$router.push('/login')\n    },\n    async submitForm () {\n  try {\n    const formData = new FormData()\n\n    // Iterate over each file in pdfFiles\n    for (const key in this.pdfFiles) {\n      const fileInfo = this.pdfFiles[key]\n\n      // Check if file exists and has not been submitted\n      if (fileInfo.file && !fileInfo.submitted) {\n        // Generate a unique ID for the file\n        const fileId = this.generateUniqueId()\n\n        // Add the generated ID to the fileInfo\n        fileInfo.file._id = fileId\n\n        // Append the file to formData with the field name \"files\"\n        formData.append('files', fileInfo.file)\n      }\n    }\n\n    // Send the formData to the server\n    const response = await axios.post(\n      'http://localhost:3000/upload-archivo',\n      formData,\n      {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }\n    )\n\n    // Check if the response is successful\n    if (response.status === 201) {\n      // Display a success alert message\n      window.alert('Data saved successfully!')\n      this.fetchFileData()\n      // Handle any additional logic here\n    } else {\n      console.error('Failed to save data.')\n    }\n  } catch (error) {\n    console.error('Error uploading files:', error)\n  }\n},\n\n\n    generateUniqueId () {\n      // Generate a unique ID using a combination of timestamp and random number\n      return Date.now().toString(36) + Math.random().toString(36).substr(2, 5)\n    },\n\n    downloadAllFiles () {\n      // Download all files logic\n    },\n    async downloadFile (fileId) {\n      try {\n        const response = await axios.get(\n          `http://localhost:3000/archivos/${fileId}`,\n          {\n            responseType: 'blob'\n          }\n        )\n        const url = window.URL.createObjectURL(new Blob([response.data]))\n        const link = document.createElement('a')\n        link.href = url\n        link.setAttribute('download', 'file.pdf') // Change the file name as needed\n        document.body.appendChild(link)\n        link.click()\n      } catch (error) {\n        console.error('Error downloading file:', error)\n      }\n    },\n    async deleteFile (fileId, fieldName) {\n      try {\n        await axios.delete(`http://localhost:3000/archivos/${fileId}`)\n        this.pdfFiles[fieldName]._id = ''\n        this.pdfFiles[fieldName].file = null\n        this.pdfFiles[fieldName].submitted = false\n      } catch (error) {\n        console.error('Error deleting file:', error)\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.v-btn i {\n  color: white;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}