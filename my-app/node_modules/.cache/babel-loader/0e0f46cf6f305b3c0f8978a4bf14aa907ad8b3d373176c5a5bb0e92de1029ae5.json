{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      studentProjectNames: {},\n      students: [],\n      selectedOptions: [],\n      teachers: [],\n      sidebarItems: [{\n        title: \"Proyectos\",\n        icon: \"mdi-folder-outline\"\n      }, {\n        title: \"Alumnos\",\n        icon: \"mdi-account-plus-outline\"\n      }, {\n        title: \"Maestros\",\n        icon: \"mdi-account-tie\"\n      }],\n      userName: localStorage.getItem(\"userName\"),\n      drawer: false,\n      editDialog: false,\n      teacher: {\n        _id: \"\",\n        nombre: \"\",\n        apellido: \"\",\n        correo: \"\",\n        contrase単a: \"\",\n        alumnos: [],\n        apellidoM: \"\",\n        numeroTelefonico: \"\"\n        // Add more fields as needed\n      },\n      createDialog: false,\n      showAssignedStudentsDialog: false,\n      assignedStudents: [],\n      search: \"\"\n    };\n  },\n  computed: {\n    isCreateFormValid() {\n      // Check if the form reference exists\n      if (!this.$refs.editDialogForm) {\n        return false;\n      }\n\n      // Manually validate each field\n      return this.teacher._id && this.teacher.contrase単a && this.teacher.nombre && this.teacher.apellido && this.teacher.apellidoM && this.teacher.numeroTelefonico && this.teacher.correo && this.teacher.alumnos;\n    },\n    isEditFormValid() {\n      // Check if the form reference exists\n      if (!this.$refs.editDialogForm) {\n        return false;\n      }\n\n      // Manually validate each field\n      return this.teacher.nombre && this.teacher.apellido && this.teacher.apellidoM && this.teacher.numeroTelefonico && this.teacher.alumnos;\n    }\n  },\n  methods: {\n    limitSelection(isNewUser) {\n      if (isNewUser && this.teacher.alumnos.length > 5) {\n        alert(\"You can only select a maximum of 5 options.\");\n        this.teacher.alumnos = this.teacher.alumnos.slice(0, 5);\n      } else if (!isNewUser && this.teacher.alumnos.length > 5) {\n        alert(\"You can only select a maximum of 5 options.\");\n        this.teacher.alumnos = this.teacher.alumnos.slice(0, 5);\n      }\n    },\n    async fetchData() {\n      try {\n        const response = await axios.get(\"http://localhost:3000/teachers\");\n        this.teachers = response.data;\n      } catch (error) {\n        console.error(\"Error fetching teachers:\", error);\n      }\n    },\n    async fetchStudents() {\n      try {\n        const studentsResponse = await axios.get(\"http://localhost:3000/students\");\n        const allStudents = studentsResponse.data;\n\n        // Filter out students who are not assigned to any teacher\n        const unassignedStudents = allStudents.filter(student => {\n          return !this.teachers.some(teacher => teacher.alumnos.includes(student._id));\n        });\n        const assignedStudents = allStudents.filter(student => {\n          return this.teachers.some(teacher => teacher.alumnos.includes(student._id));\n        });\n\n        // Include the teacher's ID in the assignedStudents array\n        const updatedAssignedStudents = assignedStudents.map(student => ({\n          ...student,\n          teacherId: student.teacherId // Ensure each student object has a teacherId property\n        }));\n\n        // Fetch project names for each student's project\n        const projectNamesPromises = updatedAssignedStudents.map(async student => {\n          const projectName = await this.getProjectName(student.project);\n          return {\n            ...student,\n            projectName\n          };\n        });\n\n        // Wait for all project names to be fetched\n        this.assignedStudents = await Promise.all(projectNamesPromises);\n\n        // Extract just the names from the unassigned students data\n        this.students = unassignedStudents.map(student => student._id);\n      } catch (error) {\n        console.error(\"Error fetching students:\", error);\n      }\n    },\n    async showAssignedStudents(teacher, event) {\n      event.stopPropagation();\n      // Filter assignedStudents to include only those assigned to the current teacher\n      await this.fetchStudents();\n      this.assignedStudents = this.assignedStudents.filter(student => teacher.alumnos.includes(student._id));\n      this.showAssignedStudentsDialog = true;\n    },\n    async navigate(index) {\n      switch (index) {\n        case 0:\n          this.$router.push(\"/admin\");\n          break;\n        case 1:\n          this.$router.push(\"/admin/students\");\n          break;\n        case 2:\n          this.$router.push(\"/admin/teachers\");\n          break;\n        default:\n          break;\n      }\n    },\n    logout() {\n      // Logic to logout the user\n      // For example, you can clear any user data or tokens stored in localStorage\n      localStorage.removeItem(\"token\");\n\n      // Redirect the user to the login page\n      this.$router.push(\"/login\");\n    },\n    async editUser(teacher, event) {\n      event.stopPropagation();\n      // Assign the teacher data to editedTeacher\n      await this.fetchStudents();\n      this.teacher = {\n        ...teacher\n      };\n\n      // If editedTeacher has alumnos property, add its students to the students array\n      if (this.teacher.alumnos && Array.isArray(this.teacher.alumnos)) {\n        this.students = [...this.students, ...this.teacher.alumnos];\n      }\n\n      // Open the edit dialog\n      this.editDialog = true;\n    },\n    async saveEditedTeacher() {\n      try {\n        // Send the updated teacher data to the server\n        const response = await axios.put(`http://localhost:3000/users/${this.teacher._id}`, this.teacher);\n        console.log(\"Teacher updated successfully:\", response.data);\n        this.fetchData();\n      } catch (error) {\n        console.error(\"Error updating teacher:\", error);\n      }\n      this.editDialog = false;\n    },\n    cancelEdit() {\n      this.editDialog = false;\n    },\n    openCreateDialog() {\n      this.resetTeacher();\n      this.createDialog = true;\n      this.fetchStudents();\n    },\n    async saveNewTeacher() {\n      try {\n        // Add 'rol' field with value 'teacher'\n        this.teacher.rol = \"teacher\";\n        const response = await axios.post(\"http://localhost:3000/register\", this.teacher);\n        if (response.status === 201) {\n          console.log(\"Teacher created successfully:\", response.data);\n          this.fetchData();\n        } else {\n          console.error(\"Failed to create teacher:\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error creating teacher:\", error);\n      }\n      this.createDialog = false;\n    },\n    cancelCreate() {\n      this.createDialog = false;\n    },\n    async deleteTeacher(teacherId, event) {\n      event.stopPropagation();\n      try {\n        const response = await axios.delete(`http://localhost:3000/users/${teacherId}`);\n        console.log(\"Teacher deleted successfully:\", response.data);\n        this.fetchData(); // Call a method to update the UI or fetch updated data\n      } catch (error) {\n        console.error(\"Error deleting teacher:\", error);\n      }\n    },\n    async getProjectName(projectId) {\n      try {\n        const response = await axios.get(`http://localhost:3000/projects/${projectId}`);\n        const data = response.data; // Assuming the project name is stored in the 'name' field\n        return data.name;\n      } catch (error) {\n        console.error(\"Error fetching project name:\", error);\n        return \"Unknown\"; // Return a default value if an error occurs\n      }\n    },\n    async renderProjectName(projectId) {\n      const projectName = await this.getProjectName(projectId);\n      this.studentProjectNames[projectId] = projectName; // Store the project name\n    },\n    handleRowClick(item) {\n      // Handle row click event here\n      console.log(\"Row clicked:\", item);\n      // Navigate to a new page and pass the user's ID as route parameters\n      this.$router.push({\n        name: \"UserDetails\",\n        params: {\n          userId: item._id\n        }\n      });\n    },\n    resetTeacher() {\n      this.teacher = {\n        _id: \"\",\n        nombre: \"\",\n        apellido: \"\",\n        correo: \"\",\n        contrase単a: \"\",\n        alumnos: [],\n        apellidoM: \"\",\n        numeroTelefonico: \"\"\n      };\n    }\n  },\n  mounted() {\n    this.fetchData();\n    this.fetchStudents();\n  }\n};","map":{"version":3,"names":["axios","data","studentProjectNames","students","selectedOptions","teachers","sidebarItems","title","icon","userName","localStorage","getItem","drawer","editDialog","teacher","_id","nombre","apellido","correo","contrase単a","alumnos","apellidoM","numeroTelefonico","createDialog","showAssignedStudentsDialog","assignedStudents","search","computed","isCreateFormValid","$refs","editDialogForm","isEditFormValid","methods","limitSelection","isNewUser","length","alert","slice","fetchData","response","get","error","console","fetchStudents","studentsResponse","allStudents","unassignedStudents","filter","student","some","includes","updatedAssignedStudents","map","teacherId","projectNamesPromises","projectName","getProjectName","project","Promise","all","showAssignedStudents","event","stopPropagation","navigate","index","$router","push","logout","removeItem","editUser","Array","isArray","saveEditedTeacher","put","log","cancelEdit","openCreateDialog","resetTeacher","saveNewTeacher","rol","post","status","cancelCreate","deleteTeacher","delete","projectId","name","renderProjectName","handleRowClick","item","params","userId","mounted"],"sources":["/Users/angel/school-project/my-app/src/components/TeachersPage.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-container fluid>\n      <!-- Top Bar -->\n      <v-app-bar app color=\"blue darken-2\" dark>\n        <!-- Burger menu icon -->\n        <v-btn icon @click=\"drawer = !drawer\">\n          <v-icon>mdi-menu</v-icon>\n        </v-btn>\n        <!-- Title -->\n        <v-toolbar-title>{{ userName }}</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <!-- Logout button -->\n        <v-btn icon @click=\"logout\">\n          <v-icon>mdi-logout</v-icon>\n        </v-btn>\n      </v-app-bar>\n\n      <!-- Sidebar -->\n      <v-navigation-drawer app v-model=\"drawer\" color=\"blue darken-2\" dark>\n        <v-list dense>\n          <v-list-item\n            v-for=\"(item, index) in sidebarItems\"\n            :key=\"index\"\n            @click=\"navigate(index)\"\n          >\n            <v-list-item-action>\n              <v-icon>{{ item.icon }}</v-icon>\n            </v-list-item-action>\n            <v-list-item-content>\n              <v-list-item-title>{{ item.title }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n        </v-list>\n      </v-navigation-drawer>\n\n      <v-main>\n        <!-- Main content -->\n        <v-col cols=\"12\" style=\"max-width: 1500px; margin: 0px auto\">\n          <v-card class=\"text-center\" style=\"width: 100%; margin: 0px auto\">\n            <template v-slot:text>\n              <v-text-field\n                v-model=\"search\"\n                label=\"Buscar\"\n                prepend-inner-icon=\"mdi-magnify\"\n                variant=\"outlined\"\n                hide-details\n                single-line\n              ></v-text-field>\n            </template>\n            <!-- Teachers Data -->\n            <v-data-table\n              v-if=\"teachers.length > 0\"\n              :items=\"teachers\"\n              align=\"center\"\n              :search=\"search\"\n              items-per-page-text=\"Elementos por p叩gina\"\n              pageText=\"\"\n            >\n              <template v-slot:top>\n                <v-toolbar flat color=\"blue darken-2\">\n                  <v-toolbar-title>Maestros</v-toolbar-title>\n                  <v-divider class=\"mx-4\" inset vertical></v-divider>\n                  <v-spacer></v-spacer>\n                  <v-btn icon color=\"blue darken-2\" @click=\"openCreateDialog\">\n                    <v-icon>mdi-plus</v-icon>\n                  </v-btn>\n                </v-toolbar>\n              </template>\n              <template v-slot:headers>\n                <tr>\n                  <th>{{ \"ID\" }}</th>\n                  <th>{{ \"Correo\" }}</th>\n                  <th>{{ \"Nombre\" }}</th>\n                  <th>{{ \"Apellido Paterno\" }}</th>\n                  <th>{{ \"Apellido Materno\" }}</th>\n                  <th>{{ \"Alumnos\" }}</th>\n                  <!-- Exclude numeroTelefonico from the headers -->\n                </tr>\n              </template>\n              <template v-slot:item=\"{ item }\">\n                <tr @click=\"handleRowClick(item)\" class=\"clickable-row\">\n                  <td>{{ item._id }}</td>\n                  <td>{{ item.correo }}</td>\n                  <td>{{ item.nombre }}</td>\n                  <td>{{ item.apellido }}</td>\n                  <td>{{ item.apellidoM }}</td>\n                  <td>\n                    <v-btn\n                      small\n                      color=\"blue darken-2\"\n                      @click=\"showAssignedStudents(item, $event)\"\n                    >\n                      {{ item.alumnos.length }} Students\n                    </v-btn>\n                  </td>\n                  <td>\n                    <v-btn\n                      icon\n                      small\n                      color=\"blue darken-2\"\n                      @click=\"editUser(item, $event)\"\n                      style=\"width: 30px; height: 30px; margin-right: 5px\"\n                    >\n                      <v-icon style=\"font-size: 18px\">mdi-pencil</v-icon>\n                    </v-btn>\n                    <v-btn\n                      icon\n                      small\n                      color=\"red darken-2\"\n                      @click=\"deleteTeacher(item._id, $event)\"\n                      style=\"width: 30px; height: 30px; margin-right: 5px\"\n                    >\n                      <v-icon style=\"font-size: 18px\">mdi-delete</v-icon>\n                    </v-btn>\n                  </td>\n                </tr>\n              </template>\n            </v-data-table>\n          </v-card>\n        </v-col>\n      </v-main>\n      <!-- Show Assigned Students Dialog -->\n      <!-- Show Assigned Students Dialog -->\n      <v-dialog v-model=\"showAssignedStudentsDialog\" max-width=\"500\">\n        <v-card>\n          <v-card-title class=\"headline\">Assigned Students</v-card-title>\n          <v-card-text>\n            <v-list>\n              <v-list-item\n                v-for=\"student in assignedStudents\"\n                :key=\"student.id\"\n                class=\"mb-4\"\n              >\n                <v-list-item-icon>\n                  <v-icon>mdi-account</v-icon>\n                </v-list-item-icon>\n                <v-list-item-content>\n                  <v-list-item-title class=\"font-weight-bold\">\n                    <span>ID:</span> {{ student._id }}<br />\n                    <span>Nombre:</span> {{ student.nombre }}<br />\n                    <span>Proyecto:</span> {{ student.projectName }}\n\n                    <!-- Modified to call getProjectName method -->\n                  </v-list-item-title>\n                </v-list-item-content>\n              </v-list-item>\n            </v-list>\n          </v-card-text>\n          <v-card-actions>\n            <v-btn\n              color=\"blue darken-2\"\n              dark\n              large\n              @click=\"showAssignedStudentsDialog = false\"\n              >Cerrar</v-btn\n            >\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n\n      <!-- Edit Dialog -->\n      <v-dialog v-model=\"editDialog\" max-width=\"500\" ref=\"editDialogForm\">\n        <v-card>\n          <v-card-title>Edit Teacher</v-card-title>\n          <v-card-text>\n            <v-text-field\n              v-model=\"teacher.nombre\"\n              label=\"Nombre\"\n              required\n              :rules=\"[(v) => !!v || 'Nombre requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.apellido\"\n              label=\"Apellido Paterno\"\n              required\n              :rules=\"[(v) => !!v || 'Apellido Paterno requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.apellidoM\"\n              label=\"Apellido Materno\"\n              required\n              :rules=\"[(v) => !!v || 'Apellido Materno requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.numeroTelefonico\"\n              label=\"N炭mero Telef坦nico\"\n              type=\"number\"\n              required\n              :rules=\"[(v) => !!v || 'N炭mero Telef坦nico requerido']\"\n            ></v-text-field>\n            <!-- Add v-select to select students -->\n            <v-select\n              v-model=\"teacher.alumnos\"\n              :items=\"students\"\n              label=\"Assign students (max 5)\"\n              multiple\n              chips\n              required\n              :rules=\"[(v) => !!v || 'Alumnos is required']\"\n              @update:modelValue=\"limitSelection(false)\"\n            ></v-select>\n            <!-- Add more fields as needed -->\n          </v-card-text>\n          <v-card-actions>\n            <v-btn\n              color=\"blue darken-2\"\n              @click=\"saveEditedTeacher\"\n              :disabled=\"!isEditFormValid\"\n              >Save</v-btn\n            >\n            <v-btn @click=\"cancelEdit\">Cancel</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n\n      <!-- Create Dialog -->\n      <v-dialog v-model=\"createDialog\" max-width=\"500\" ref=\"createDialogForm\">\n        <v-card>\n          <v-card-title>Create New Teacher</v-card-title>\n          <v-card-text>\n            <v-text-field\n              v-model=\"teacher._id\"\n              label=\"ID\"\n              required\n              :rules=\"[\n                (v) => {\n                  console.log('ID value:', v);\n                  return !!v || 'ID is required';\n                },\n                (v) => {\n                  const isValid = /^[0-9]+$/.test(v);\n                  console.log('Is ID valid?', isValid);\n                  return isValid || 'ID must contain only numbers';\n                },\n              ]\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.nombre\"\n              label=\"Nombre\"\n              required\n              :rules=\"[(v) => !!v || 'Nombre requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.apellido\"\n              label=\"Apellido Paterno\"\n              required\n              :rules=\"[(v) => !!v || 'Apellido Paterno requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.apellidoM\"\n              label=\"Apellido Materno\"\n              required\n              :rules=\"[(v) => !!v || 'Apellido Materno requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.numeroTelefonico\"\n              label=\"N炭mero Telef坦nico\"\n              type=\"number\"\n              required\n              :rules=\"[(v) => !!v || 'N炭mero Telef坦nico requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.correo\"\n              label=\"Correo Electr坦nico\"\n              required\n              :rules=\"[(v) => !!v || 'Correo requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.contrase単a\"\n              label=\"Contrase単a\"\n              type=\"password\"\n              required\n              :rules=\"[(v) => !!v || 'Contrase単a requerida']\"\n            ></v-text-field>\n            <div>\n              <v-select\n                v-model=\"teacher.alumnos\"\n                :items=\"students\"\n                label=\"Selecciona alumnos (max 5)\"\n                multiple\n                chips\n                required\n                :rules=\"[(v) => !!v || 'Alumnos is required']\"\n                @update:modelValue=\"limitSelection(true)\"\n              ></v-select>\n            </div>\n            <!-- Add more fields as needed -->\n          </v-card-text>\n          <v-card-actions>\n            <v-btn\n              color=\"blue darken-2\"\n              @click=\"saveNewTeacher\"\n              :disabled=\"!isCreateFormValid\"\n              >Save</v-btn\n            >\n            <v-btn @click=\"cancelCreate\">Cancel</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n    </v-container>\n  </v-app>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      studentProjectNames: {},\n      students: [],\n      selectedOptions: [],\n      teachers: [],\n      sidebarItems: [\n        { title: \"Proyectos\", icon: \"mdi-folder-outline\" },\n        { title: \"Alumnos\", icon: \"mdi-account-plus-outline\" },\n        { title: \"Maestros\", icon: \"mdi-account-tie\" },\n      ],\n      userName: localStorage.getItem(\"userName\"),\n      drawer: false,\n      editDialog: false,\n      teacher: {\n        _id: \"\",\n        nombre: \"\",\n        apellido: \"\",\n        correo: \"\",\n        contrase単a: \"\",\n        alumnos: [],\n        apellidoM: \"\",\n        numeroTelefonico: \"\",\n        // Add more fields as needed\n      },\n      createDialog: false,\n      showAssignedStudentsDialog: false,\n      assignedStudents: [],\n      search: \"\",\n    };\n  },\n  computed: {\n    isCreateFormValid() {\n      // Check if the form reference exists\n      if (!this.$refs.editDialogForm) {\n        return false;\n      }\n\n      // Manually validate each field\n      return (\n        this.teacher._id &&\n        this.teacher.contrase単a &&\n        this.teacher.nombre &&\n        this.teacher.apellido &&\n        this.teacher.apellidoM &&\n        this.teacher.numeroTelefonico &&\n        this.teacher.correo &&\n        this.teacher.alumnos\n      );\n    },\n    isEditFormValid() {\n      // Check if the form reference exists\n      if (!this.$refs.editDialogForm) {\n        return false;\n      }\n\n      // Manually validate each field\n      return (\n        this.teacher.nombre &&\n        this.teacher.apellido &&\n        this.teacher.apellidoM &&\n        this.teacher.numeroTelefonico &&\n        this.teacher.alumnos\n      );\n    },\n  },\n  methods: {\n    limitSelection(isNewUser) {\n      if (isNewUser && this.teacher.alumnos.length > 5) {\n        alert(\"You can only select a maximum of 5 options.\");\n        this.teacher.alumnos = this.teacher.alumnos.slice(0, 5);\n      } else if (!isNewUser && this.teacher.alumnos.length > 5) {\n        alert(\"You can only select a maximum of 5 options.\");\n        this.teacher.alumnos = this.teacher.alumnos.slice(0, 5);\n      }\n    },\n    async fetchData() {\n      try {\n        const response = await axios.get(\"http://localhost:3000/teachers\");\n        this.teachers = response.data;\n      } catch (error) {\n        console.error(\"Error fetching teachers:\", error);\n      }\n    },\n\n    async fetchStudents() {\n      try {\n        const studentsResponse = await axios.get(\n          \"http://localhost:3000/students\"\n        );\n        const allStudents = studentsResponse.data;\n\n        // Filter out students who are not assigned to any teacher\n        const unassignedStudents = allStudents.filter((student) => {\n          return !this.teachers.some((teacher) =>\n            teacher.alumnos.includes(student._id)\n          );\n        });\n\n        const assignedStudents = allStudents.filter((student) => {\n          return this.teachers.some((teacher) =>\n            teacher.alumnos.includes(student._id)\n          );\n        });\n\n        // Include the teacher's ID in the assignedStudents array\n        const updatedAssignedStudents = assignedStudents.map((student) => ({\n          ...student,\n          teacherId: student.teacherId, // Ensure each student object has a teacherId property\n        }));\n\n        // Fetch project names for each student's project\n        const projectNamesPromises = updatedAssignedStudents.map(\n          async (student) => {\n            const projectName = await this.getProjectName(student.project);\n            return { ...student, projectName };\n          }\n        );\n\n        // Wait for all project names to be fetched\n        this.assignedStudents = await Promise.all(projectNamesPromises);\n\n        // Extract just the names from the unassigned students data\n        this.students = unassignedStudents.map((student) => student._id);\n      } catch (error) {\n        console.error(\"Error fetching students:\", error);\n      }\n    },\n\n    async showAssignedStudents(teacher, event) {\n      event.stopPropagation();\n      // Filter assignedStudents to include only those assigned to the current teacher\n      await this.fetchStudents();\n      this.assignedStudents = this.assignedStudents.filter((student) =>\n        teacher.alumnos.includes(student._id)\n      );\n      this.showAssignedStudentsDialog = true;\n    },\n\n    async navigate(index) {\n      switch (index) {\n        case 0:\n          this.$router.push(\"/admin\");\n          break;\n        case 1:\n          this.$router.push(\"/admin/students\");\n          break;\n        case 2:\n          this.$router.push(\"/admin/teachers\");\n          break;\n        default:\n          break;\n      }\n    },\n    logout() {\n      // Logic to logout the user\n      // For example, you can clear any user data or tokens stored in localStorage\n      localStorage.removeItem(\"token\");\n\n      // Redirect the user to the login page\n      this.$router.push(\"/login\");\n    },\n    async editUser(teacher, event) {\n      event.stopPropagation();\n      // Assign the teacher data to editedTeacher\n      await this.fetchStudents();\n      this.teacher = { ...teacher };\n\n      // If editedTeacher has alumnos property, add its students to the students array\n      if (this.teacher.alumnos && Array.isArray(this.teacher.alumnos)) {\n        this.students = [...this.students, ...this.teacher.alumnos];\n      }\n\n      // Open the edit dialog\n      this.editDialog = true;\n    },\n\n    async saveEditedTeacher() {\n      try {\n        // Send the updated teacher data to the server\n        const response = await axios.put(\n          `http://localhost:3000/users/${this.teacher._id}`,\n          this.teacher\n        );\n\n        console.log(\"Teacher updated successfully:\", response.data);\n        this.fetchData();\n      } catch (error) {\n        console.error(\"Error updating teacher:\", error);\n      }\n      this.editDialog = false;\n    },\n\n    cancelEdit() {\n      this.editDialog = false;\n    },\n    openCreateDialog() {\n      this.resetTeacher();\n      this.createDialog = true;\n      this.fetchStudents();\n    },\n    async saveNewTeacher() {\n      try {\n        // Add 'rol' field with value 'teacher'\n        this.teacher.rol = \"teacher\";\n\n        const response = await axios.post(\n          \"http://localhost:3000/register\",\n          this.teacher\n        );\n        if (response.status === 201) {\n          console.log(\"Teacher created successfully:\", response.data);\n          this.fetchData();\n        } else {\n          console.error(\"Failed to create teacher:\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error creating teacher:\", error);\n      }\n      this.createDialog = false;\n    },\n\n    cancelCreate() {\n      this.createDialog = false;\n    },\n    async deleteTeacher(teacherId, event) {\n      event.stopPropagation();\n      try {\n        const response = await axios.delete(\n          `http://localhost:3000/users/${teacherId}`\n        );\n        console.log(\"Teacher deleted successfully:\", response.data);\n        this.fetchData(); // Call a method to update the UI or fetch updated data\n      } catch (error) {\n        console.error(\"Error deleting teacher:\", error);\n      }\n    },\n\n    async getProjectName(projectId) {\n      try {\n        const response = await axios.get(\n          `http://localhost:3000/projects/${projectId}`\n        );\n        const data = response.data; // Assuming the project name is stored in the 'name' field\n        return data.name;\n      } catch (error) {\n        console.error(\"Error fetching project name:\", error);\n        return \"Unknown\"; // Return a default value if an error occurs\n      }\n    },\n    async renderProjectName(projectId) {\n      const projectName = await this.getProjectName(projectId);\n      this.studentProjectNames[projectId] = projectName; // Store the project name\n    },\n\n    handleRowClick(item) {\n      // Handle row click event here\n      console.log(\"Row clicked:\", item);\n      // Navigate to a new page and pass the user's ID as route parameters\n      this.$router.push({\n        name: \"UserDetails\",\n        params: { userId: item._id },\n      });\n    },\n\n    resetTeacher() {\n      this.teacher = {\n        _id: \"\",\n        nombre: \"\",\n        apellido: \"\",\n        correo: \"\",\n        contrase単a: \"\",\n        alumnos: [],\n        apellidoM: \"\",\n        numeroTelefonico: \"\",\n      };\n    },\n  },\n  mounted() {\n    this.fetchData();\n    this.fetchStudents();\n  },\n};\n</script>\n\n<style scoped>\n.v-btn i {\n  color: white;\n}\n\n.clickable-row:hover {\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}