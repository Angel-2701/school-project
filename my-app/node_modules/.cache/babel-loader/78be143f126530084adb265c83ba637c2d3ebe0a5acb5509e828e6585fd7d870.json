{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport ProjectCard from '@/components/ProjectCard.vue';\nexport default {\n  components: {\n    ProjectCard\n  },\n  data() {\n    return {\n      id: localStorage.getItem('id'),\n      editDialog: false,\n      editedProjectName: '',\n      editedProjectId: '',\n      newProject: {\n        name: '',\n        company: '',\n        _id: ''\n      },\n      showProjects: true,\n      projects: [],\n      users: [],\n      students: [],\n      sidebarItems: [{\n        title: 'Projects',\n        icon: 'mdi-folder-outline'\n      }],\n      userName: 'John Doe',\n      drawer: false,\n      selectedProject: {},\n      // Add selectedProject property to hold the selected project name\n      selectedUser: {},\n      // Add selectedUser property to hold the selected user for grade assignment\n      selectedGrade: null,\n      // Add selectedGrade property to hold the selected grade\n      grades: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] // Define available grade options\n    };\n  },\n  methods: {\n    async fetchData2() {\n      this.users = this.students;\n    },\n    async fetchData() {\n      try {\n        // Fetch the teacher data\n        const teacherResponse = await axios.get(`http://localhost:3000/users/${this.id}`);\n        const teacher = teacherResponse.data;\n\n        // Fetch all students\n        const studentsResponse = await axios.get('http://localhost:3000/students');\n        const allStudents = studentsResponse.data;\n\n        // Filter students based on the teacher's alumnos array\n        const teacherStudents = allStudents.filter(student => teacher.alumnos.includes(student._id));\n\n        // Extract the project IDs assigned to the teacher's students\n        const projectIds = teacherStudents.map(student => student.project);\n\n        // Fetch projects based on the extracted project IDs\n        const projectsResponse = await axios.get('http://localhost:3000/projects');\n        const projects = projectsResponse.data;\n\n        // Filter projects based on whether their ID is included in the projectIds array\n        const filteredProjects = projects.filter(project => projectIds.includes(project._id));\n\n        // Set the filtered projects to the component's projects property\n        this.projects = filteredProjects;\n        this.students = teacherStudents;\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    async openGradeDialog(user) {\n      // Set the selected user for grade assignment\n      this.selectedUser = user;\n      // Open the dialog for assigning grades\n      this.editDialog = true;\n    },\n    assignGrade() {\n      // Here you can handle the grade assignment logic\n      console.log('Assigning grade', this.selectedGrade, 'to user:', this.selectedUser.name);\n      // Close the dialog after assigning grade\n      this.editDialog = false;\n    },\n    saveEditedProject() {\n      const updatedProject = {\n        name: this.editedProjectName // Assuming the only editable field is the project name\n      };\n      axios.put(`http://localhost:3000/projects/${this.editedProjectId}`, updatedProject).then(response => {\n        if (response.status === 200) {\n          console.log('Project updated successfully:', response.data);\n          this.fetchData();\n        } else {\n          console.error('Failed to update project:', response.data);\n        }\n      }).catch(error => {\n        console.error('Error updating project:', error);\n      });\n      this.editDialog = false;\n    },\n    deleteProject(project) {\n      if (confirm('Are you sure you want to delete this project?')) {\n        axios.delete(`http://localhost:3000/projects/${project._id}`).then(response => {\n          if (response.status === 200) {\n            console.log('Project deleted successfully:', response.data);\n            this.fetchData();\n          } else {\n            console.error('Failed to delete project:', response.data);\n          }\n        }).catch(error => {\n          console.error('Error deleting project:', error);\n        });\n      }\n    },\n    async onClick(project) {\n      // Set the selected project name\n      this.selectedProject = project;\n      await this.fetchData2();\n      // Emit a click event when the card is clicked\n      this.showProjects = false;\n    },\n    navigate(index) {\n      this.showProjects = true;\n      switch (index) {\n        case 0:\n          this.$router.push('/Teacher/Projects');\n          break;\n        case 1:\n          this.$router.push('/Students');\n          break;\n        case 2:\n          this.$router.push('/Teachers');\n          break;\n        default:\n          break;\n      }\n    },\n    logout() {\n      localStorage.removeItem('token');\n      this.$router.push('/login');\n    }\n  },\n  mounted() {\n    this.fetchData();\n  }\n};","map":{"version":3,"names":["axios","ProjectCard","components","data","id","localStorage","getItem","editDialog","editedProjectName","editedProjectId","newProject","name","company","_id","showProjects","projects","users","students","sidebarItems","title","icon","userName","drawer","selectedProject","selectedUser","selectedGrade","grades","methods","fetchData2","fetchData","teacherResponse","get","teacher","studentsResponse","allStudents","teacherStudents","filter","student","alumnos","includes","projectIds","map","project","projectsResponse","filteredProjects","error","console","openGradeDialog","user","assignGrade","log","saveEditedProject","updatedProject","put","then","response","status","catch","deleteProject","confirm","delete","onClick","navigate","index","$router","push","logout","removeItem","mounted"],"sources":["/Users/angel/school-project/my-app/src/components/TeacherPage.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-container>\n      <!-- Top Bar -->\n      <v-app-bar app color=\"blue darken-2\" dark>\n        <!-- Burger menu icon -->\n        <v-btn icon @click=\"drawer = !drawer\">\n          <v-icon>mdi-menu</v-icon>\n        </v-btn>\n        <!-- Title -->\n        <v-toolbar-title>{{ userName }}</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <!-- Logout button -->\n        <v-btn icon @click=\"logout\">\n          <v-icon>mdi-logout</v-icon>\n        </v-btn>\n      </v-app-bar>\n\n      <!-- Sidebar -->\n      <v-navigation-drawer app v-model=\"drawer\" color=\"blue darken-2\" dark>\n        <v-list dense>\n          <v-list-item\n            v-for=\"(item, index) in sidebarItems\"\n            :key=\"index\"\n            @click=\"navigate(index)\"\n          >\n            <v-list-item-action>\n              <v-icon>{{ item.icon }}</v-icon>\n            </v-list-item-action>\n            <v-list-item-content>\n              <v-list-item-title>{{ item.title }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n        </v-list>\n      </v-navigation-drawer>\n\n      <v-main v-if=\"showProjects\">\n        <!-- Main content -->\n        <v-row>\n          <v-col\n            v-for=\"project in projects\"\n            :key=\"project.id\"\n            cols=\"12\"\n            sm=\"6\"\n            md=\"4\"\n            lg=\"3\"\n            xl=\"2\"\n          >\n            <ProjectCard\n              :projectName=\"project.name\"\n              @click=\"onClick(project)\"\n            />\n          </v-col>\n        </v-row>\n      </v-main>\n\n      <template v-else>\n        <v-main>\n          <!-- Main content -->\n          <v-col cols=\"12\" style=\"max-width: 1500px; margin: 0px auto\">\n            <v-card class=\"text-center\" style=\"width: 100%; margin: 0px auto\">\n              <!-- Projects Data -->\n              <v-data-table\n                v-if=\"users.length > 0\"\n                :items=\"users\"\n                align=\"center\"\n              >\n                <template v-slot:top>\n                  <v-toolbar flat color=\"blue darken-2\">\n                    <v-toolbar-title>{{ selectedProject.name }}</v-toolbar-title>\n                    <v-divider class=\"mx-4\" inset vertical></v-divider>\n                    <v-spacer></v-spacer>\n                    <!-- Removed the button for creating a new project -->\n                  </v-toolbar>\n                </template>\n                <template v-slot:item=\"{ item }\">\n                  <tr>\n                    <td v-for=\"(value, key) in item\" :key=\"key\">\n                      {{ value }}\n                    </td>\n                    <td>\n                      <!-- Use small prop to make the buttons smaller -->\n                      <v-btn\n                        icon\n                        small\n                        color=\"blue darken-2\"\n                        @click=\"openGradeDialog(item)\"\n                        style=\"width: 30px; height: 30px; margin-right: 5px\"\n                      >\n                        <v-icon style=\"font-size: 18px\">mdi-pencil</v-icon>\n                      </v-btn>\n                      <v-btn\n                        icon\n                        small\n                        color=\"red darken-2\"\n                        @click=\"deleteProject(item)\"\n                        style=\"width: 30px; height: 30px; margin-right: 5px\"\n                      >\n                        <v-icon style=\"font-size: 18px\">mdi-delete</v-icon>\n                      </v-btn>\n                    </td>\n                  </tr>\n                </template>\n              </v-data-table>\n            </v-card>\n          </v-col>\n        </v-main>\n      </template>\n      \n      <!-- Dialog for assigning grades -->\n      <v-dialog v-model=\"editDialog\" max-width=\"500\">\n        <v-card>\n          <v-card-title class=\"headline\">\n            Assign Grades to {{ selectedUser.name }}\n          </v-card-title>\n          <v-card-text>\n            <!-- Add your grade options here -->\n            <!-- For example: -->\n            <v-radio-group v-model=\"selectedGrade\">\n              <v-radio v-for=\"grade in grades\" :key=\"grade\" :label=\"grade\" :value=\"grade\"></v-radio>\n            </v-radio-group>\n          </v-card-text>\n          <v-card-actions>\n            <v-btn color=\"blue darken-1\" text @click=\"editDialog = false\">Cancel</v-btn>\n            <v-btn color=\"blue darken-1\" text @click=\"assignGrade\">Save</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n    </v-container>\n  </v-app>\n</template>\n\n<script>\nimport axios from 'axios'\nimport ProjectCard from '@/components/ProjectCard.vue'\n\nexport default {\n  components: {\n    ProjectCard\n  },\n  data () {\n    return {\n      id: localStorage.getItem('id'),\n      editDialog: false,\n      editedProjectName: '',\n      editedProjectId: '',\n      newProject: {\n        name: '',\n        company: '',\n        _id: ''\n      },\n      showProjects: true,\n      projects: [],\n      users: [],\n      students: [],\n      sidebarItems: [{ title: 'Projects', icon: 'mdi-folder-outline' }],\n      userName: 'John Doe',\n      drawer: false,\n      selectedProject: {}, // Add selectedProject property to hold the selected project name\n      selectedUser: {}, // Add selectedUser property to hold the selected user for grade assignment\n      selectedGrade: null, // Add selectedGrade property to hold the selected grade\n      grades: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] // Define available grade options\n    }\n  },\n  methods: {\n    async fetchData2 () {\n      this.users = this.students\n    },\n\n    async fetchData () {\n      try {\n        // Fetch the teacher data\n        const teacherResponse = await axios.get(\n          `http://localhost:3000/users/${this.id}`\n        )\n        const teacher = teacherResponse.data\n\n        // Fetch all students\n        const studentsResponse = await axios.get(\n          'http://localhost:3000/students'\n        )\n        const allStudents = studentsResponse.data\n\n        // Filter students based on the teacher's alumnos array\n        const teacherStudents = allStudents.filter((student) =>\n          teacher.alumnos.includes(student._id)\n        )\n\n        // Extract the project IDs assigned to the teacher's students\n        const projectIds = teacherStudents.map((student) => student.project)\n\n        // Fetch projects based on the extracted project IDs\n        const projectsResponse = await axios.get(\n          'http://localhost:3000/projects'\n        )\n        const projects = projectsResponse.data\n\n        // Filter projects based on whether their ID is included in the projectIds array\n        const filteredProjects = projects.filter((project) =>\n          projectIds.includes(project._id)\n        )\n\n        // Set the filtered projects to the component's projects property\n        this.projects = filteredProjects\n        this.students = teacherStudents\n      } catch (error) {\n        console.error('Error fetching data:', error)\n      }\n    },\n    async openGradeDialog (user) {\n      // Set the selected user for grade assignment\n      this.selectedUser = user;\n      // Open the dialog for assigning grades\n      this.editDialog = true;\n    },\n    assignGrade () {\n      // Here you can handle the grade assignment logic\n      console.log('Assigning grade', this.selectedGrade, 'to user:', this.selectedUser.name);\n      // Close the dialog after assigning grade\n      this.editDialog = false;\n    },\n    saveEditedProject () {\n      const updatedProject = {\n        name: this.editedProjectName // Assuming the only editable field is the project name\n      }\n\n      axios\n        .put(\n          `http://localhost:3000/projects/${this.editedProjectId}`,\n          updatedProject\n        )\n        .then((response) => {\n          if (response.status === 200) {\n            console.log('Project updated successfully:', response.data)\n            this.fetchData()\n          } else {\n            console.error('Failed to update project:', response.data)\n          }\n        })\n        .catch((error) => {\n          console.error('Error updating project:', error)\n        })\n\n      this.editDialog = false\n    },\n\n    deleteProject (project) {\n      if (confirm('Are you sure you want to delete this project?')) {\n        axios\n          .delete(`http://localhost:3000/projects/${project._id}`)\n          .then((response) => {\n            if (response.status === 200) {\n              console.log('Project deleted successfully:', response.data)\n              this.fetchData()\n            } else {\n              console.error('Failed to delete project:', response.data)\n            }\n          })\n          .catch((error) => {\n            console.error('Error deleting project:', error)\n          })\n      }\n    },\n    async onClick (project) {\n      // Set the selected project name\n      this.selectedProject = project\n      await this.fetchData2()\n      // Emit a click event when the card is clicked\n      this.showProjects = false\n    },\n    navigate (index) {\n      this.showProjects = true\n      switch (index) {\n        case 0:\n          this.$router.push('/Teacher/Projects')\n          break\n        case 1:\n          this.$router.push('/Students')\n          break\n        case 2:\n          this.$router.push('/Teachers')\n          break\n        default:\n          break\n      }\n    },\n    logout () {\n      localStorage.removeItem('token')\n      this.$router.push('/login')\n    }\n  },\n  mounted () {\n    this.fetchData()\n  }\n}\n</script>\n\n<style scoped>\n/* Adjustments for burger menu icon color */\n.v-btn i {\n  color: white;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}