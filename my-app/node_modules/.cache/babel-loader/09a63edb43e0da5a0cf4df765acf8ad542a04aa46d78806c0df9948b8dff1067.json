{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      userName: localStorage.getItem('userName'),\n      pdfFiles: {\n        'Solicitud de residencias profesionales': null,\n        'Carta de presentación': null,\n        'Carta de aceptación': null,\n        'Cartilla IMSS': null,\n        'Oficio de Asignación de asesor interno': null,\n        Anteproyecto: null,\n        'Liberación de los 5 créditos': null,\n        'Liberación servicio social': null\n      },\n      submittedFiles: JSON.parse(localStorage.getItem('submittedFiles')) || {},\n      drawer: false,\n      sidebarItems: [{\n        title: 'Proyecto',\n        icon: 'mdi-folder-outline'\n      }, {\n        title: 'Asesorias',\n        icon: 'mdi-account-plus-outline'\n      }, {\n        title: 'Archivos',\n        icon: 'mdi-file-document-outline'\n      }],\n      userId: localStorage.getItem('id')\n    };\n  },\n  computed: {\n    isFormValid() {\n      for (const key in this.pdfFiles) {\n        if (!this.pdfFiles[key]) {\n          return false;\n        }\n      }\n      return true;\n    },\n    getFileLabel() {\n      return index => Object.keys(this.pdfFiles)[index];\n    }\n  },\n  mounted() {\n    this.initializeSubmittedFiles();\n  },\n  methods: {\n    initializeSubmittedFiles() {\n      // Check if there are any submitted files stored in local storage\n      const submittedFiles = JSON.parse(localStorage.getItem('submittedFiles'));\n      if (submittedFiles) {\n        // Assign submitted files to the component state\n        this.submittedFiles = submittedFiles;\n      }\n    },\n    navigate(index) {\n      switch (index) {\n        case 0:\n          this.$router.push('/student');\n          break;\n        case 1:\n          this.$router.push('/student/asesorias');\n          break;\n        case 2:\n          this.$router.push('/student/archivos');\n          break;\n        default:\n          break;\n      }\n    },\n    logout() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      this.$router.push('/login');\n    },\n    async submitForm() {\n      try {\n        const formData = new FormData();\n        for (const key in this.pdfFiles) {\n          if (this.pdfFiles[key]) {\n            formData.append('files', this.pdfFiles[key]);\n          }\n        }\n        const response = await axios.post('http://localhost:3000/upload-archivo', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        if (response.status === 201) {\n          window.alert('File uploaded successfully!');\n          console.log('File uploaded successfully!');\n          // Move uploaded files to submittedFiles\n          for (const key in this.pdfFiles) {\n            if (this.pdfFiles[key]) {\n              this.submittedFiles[key] = this.pdfFiles[key];\n            }\n          }\n          // Save submittedFiles to local storage\n          localStorage.setItem('submittedFiles', JSON.stringify(this.submittedFiles));\n          // Reset the form after successful upload\n          this.pdfFiles = Object.fromEntries(Object.keys(this.pdfFiles).map(key => [key, null]));\n        } else {\n          console.error('Failed to upload file.');\n        }\n      } catch (error) {\n        console.error('Error uploading files:', error);\n      }\n    },\n    downloadAllFiles() {\n      // Download all files logic\n    },\n    downloadFile(index) {\n      const file = this.submittedFiles[index];\n      if (file) {\n        const url = URL.createObjectURL(file);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = file.name;\n        a.click();\n        URL.revokeObjectURL(url);\n      }\n    },\n    deleteFile(index) {\n      this.$delete(this.submittedFiles, index);\n      this.$delete(this.pdfFiles, index);\n      this.pdfFiles = {\n        ...this.pdfFiles\n      }; // Trigger reactivity\n      // Remove deleted file from local storage\n      localStorage.setItem('submittedFiles', JSON.stringify(this.submittedFiles));\n    }\n  }\n};","map":{"version":3,"names":["axios","data","userName","localStorage","getItem","pdfFiles","Anteproyecto","submittedFiles","JSON","parse","drawer","sidebarItems","title","icon","userId","computed","isFormValid","key","getFileLabel","index","Object","keys","mounted","initializeSubmittedFiles","methods","navigate","$router","push","logout","removeItem","submitForm","formData","FormData","append","response","post","headers","status","window","alert","console","log","setItem","stringify","fromEntries","map","error","downloadAllFiles","downloadFile","file","url","URL","createObjectURL","a","document","createElement","href","download","name","click","revokeObjectURL","deleteFile","$delete"],"sources":["/Users/angel/school-project/my-app/src/components/ArchivosAlumno.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-container>\n      <!-- Top Bar -->\n      <v-app-bar app color=\"blue darken-2\" dark>\n        <!-- Burger menu icon -->\n        <v-btn icon @click=\"drawer = !drawer\">\n          <v-icon>mdi-menu</v-icon>\n        </v-btn>\n        <!-- Title -->\n        <v-toolbar-title>{{ userName }}</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <!-- Logout button -->\n        <v-btn icon @click=\"logout\">\n          <v-icon>mdi-logout</v-icon>\n        </v-btn>\n      </v-app-bar>\n\n      <!-- Sidebar -->\n      <v-navigation-drawer app v-model=\"drawer\" color=\"blue darken-2\" dark>\n        <v-list dense>\n          <v-list-item\n            v-for=\"(item, index) in sidebarItems\"\n            :key=\"index\"\n            @click=\"navigate(index)\"\n          >\n            <v-list-item-action>\n              <v-icon>{{ item.icon }}</v-icon>\n            </v-list-item-action>\n            <v-list-item-content>\n              <v-list-item-title>{{ item.title }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n        </v-list>\n      </v-navigation-drawer>\n\n      <!-- Main Content -->\n      <v-main>\n        <v-col cols=\"12\" style=\"max-width: 1000px; margin: 0 auto\">\n          <v-card class=\"mx-auto\" max-width=\"800\">\n            <v-card-title class=\"blue darken-2 white--text\">\n              Upload PDF Files\n            </v-card-title>\n            <v-card-text>\n              <v-row>\n                <v-col\n                  v-for=\"(file, index) in pdfFiles\"\n                  :key=\"index\"\n                  cols=\"12\"\n                  md=\"6\"\n                >\n                  <v-card class=\"mb-3\">\n                    <v-card-title>{{ getFileLabel(index) }}</v-card-title>\n                    <v-file-input\n                      v-if=\"!submittedFiles[index]\"\n                      v-model=\"pdfFiles[index]\"\n                      accept=\".pdf\"\n                      :label=\"'Select ' + getFileLabel(index)\"\n                    ></v-file-input>\n                    <v-row class=\"mt-2\" v-if=\"submittedFiles[index]\">\n                      <v-col cols=\"4\">\n                        <v-icon color=\"blue darken-2\" size=\"48\"\n                          >mdi-file-pdf-box</v-icon\n                        >\n                      </v-col>\n                      <v-col cols=\"4\">\n                        <v-btn icon @click=\"downloadFile(index)\">\n                          <v-icon>mdi-download</v-icon>\n                        </v-btn>\n                      </v-col>\n                      <v-col cols=\"4\">\n                        <v-btn icon @click=\"deleteFile(index)\">\n                          <v-icon>mdi-delete</v-icon>\n                        </v-btn>\n                      </v-col>\n                    </v-row>\n                  </v-card>\n                </v-col>\n              </v-row>\n            </v-card-text>\n            <v-divider class=\"my-4\"></v-divider>\n            <v-card-actions>\n              <v-btn color=\"blue darken-2\" @click=\"submitForm\">Submit</v-btn>\n              <v-btn color=\"primary\" @click=\"downloadAllFiles\"\n                >Download All Files</v-btn\n              >\n            </v-card-actions>\n          </v-card>\n        </v-col>\n      </v-main>\n    </v-container>\n  </v-app>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  data () {\n    return {\n      userName: localStorage.getItem('userName'),\n      pdfFiles: {\n        'Solicitud de residencias profesionales': null,\n        'Carta de presentación': null,\n        'Carta de aceptación': null,\n        'Cartilla IMSS': null,\n        'Oficio de Asignación de asesor interno': null,\n        Anteproyecto: null,\n        'Liberación de los 5 créditos': null,\n        'Liberación servicio social': null\n      },\n      submittedFiles: JSON.parse(localStorage.getItem('submittedFiles')) || {},\n      drawer: false,\n      sidebarItems: [\n        { title: 'Proyecto', icon: 'mdi-folder-outline' },\n        { title: 'Asesorias', icon: 'mdi-account-plus-outline' },\n        { title: 'Archivos', icon: 'mdi-file-document-outline' }\n      ],\n      userId: localStorage.getItem('id')\n    }\n  },\n  computed: {\n    isFormValid () {\n      for (const key in this.pdfFiles) {\n        if (!this.pdfFiles[key]) {\n          return false\n        }\n      }\n      return true\n    },\n    getFileLabel () {\n      return (index) => Object.keys(this.pdfFiles)[index]\n    }\n  },\n  mounted () {\n    this.initializeSubmittedFiles()\n  },\n  methods: {\n    initializeSubmittedFiles () {\n      // Check if there are any submitted files stored in local storage\n      const submittedFiles = JSON.parse(localStorage.getItem('submittedFiles'))\n      if (submittedFiles) {\n        // Assign submitted files to the component state\n        this.submittedFiles = submittedFiles\n      }\n    },\n    navigate (index) {\n      switch (index) {\n        case 0:\n          this.$router.push('/student')\n          break\n        case 1:\n          this.$router.push('/student/asesorias')\n          break\n        case 2:\n          this.$router.push('/student/archivos')\n          break\n        default:\n          break\n      }\n    },\n    logout () {\n      localStorage.removeItem('token')\n      localStorage.removeItem('user')\n      this.$router.push('/login')\n    },\n    async submitForm () {\n      try {\n        const formData = new FormData()\n        for (const key in this.pdfFiles) {\n          if (this.pdfFiles[key]) {\n            formData.append('files', this.pdfFiles[key])\n          }\n        }\n        const response = await axios.post(\n          'http://localhost:3000/upload-archivo',\n          formData,\n          {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          }\n        )\n        if (response.status === 201) {\n          window.alert('File uploaded successfully!')\n          console.log('File uploaded successfully!')\n          // Move uploaded files to submittedFiles\n          for (const key in this.pdfFiles) {\n            if (this.pdfFiles[key]) {\n              this.submittedFiles[key] = this.pdfFiles[key]\n            }\n          }\n          // Save submittedFiles to local storage\n          localStorage.setItem(\n            'submittedFiles',\n            JSON.stringify(this.submittedFiles)\n          )\n          // Reset the form after successful upload\n          this.pdfFiles = Object.fromEntries(\n            Object.keys(this.pdfFiles).map((key) => [key, null])\n          )\n        } else {\n          console.error('Failed to upload file.')\n        }\n      } catch (error) {\n        console.error('Error uploading files:', error)\n      }\n    },\n    downloadAllFiles () {\n      // Download all files logic\n    },\n    downloadFile (index) {\n      const file = this.submittedFiles[index]\n      if (file) {\n        const url = URL.createObjectURL(file)\n        const a = document.createElement('a')\n        a.href = url\n        a.download = file.name\n        a.click()\n        URL.revokeObjectURL(url)\n      }\n    },\n    deleteFile (index) {\n      this.$delete(this.submittedFiles, index)\n      this.$delete(this.pdfFiles, index)\n      this.pdfFiles = { ...this.pdfFiles } // Trigger reactivity\n      // Remove deleted file from local storage\n      localStorage.setItem(\n        'submittedFiles',\n        JSON.stringify(this.submittedFiles)\n      )\n    }\n  }\n}\n</script>\n\n<style scoped>\n.v-btn i {\n  color: white;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}