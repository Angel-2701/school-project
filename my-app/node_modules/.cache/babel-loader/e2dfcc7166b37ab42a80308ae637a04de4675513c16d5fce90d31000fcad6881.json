{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nexport default {\n  name: 'FilesDialog',\n  props: {\n    isOpen: {\n      type: Boolean,\n      required: true\n    },\n    student: {\n      type: Object,\n      required: true\n    },\n    title: {\n      type: String,\n      default: 'Dialog'\n    }\n  },\n  data() {\n    return {\n      files: []\n    };\n  },\n  computed: {\n    dialogVisible: {\n      get() {\n        return this.isOpen;\n      },\n      set(value) {\n        this.$emit('update:isOpen', value);\n      }\n    }\n  },\n  watch: {\n    dialogVisible(newVal) {\n      if (newVal) {\n        this.loadFiles();\n      }\n    }\n  },\n  methods: {\n    loadFiles() {\n      if (this.student && this.student.seguimiento1 && this.student.seguimiento2 && this.student.seguimiento3) {\n        this.fetchFiles([this.student.seguimiento1, this.student.seguimiento2, this.student.seguimiento3]);\n      }\n    },\n    closeDialog() {\n      this.dialogVisible = false;\n    },\n    async fetchFiles(fileIds) {\n      try {\n        const files = await Promise.all(fileIds.map(async fileId => {\n          const response = await fetch(`/files/${fileId}`);\n          if (!response.ok) {\n            throw new Error(`Failed to fetch file with ID ${fileId}`);\n          }\n          const blob = await response.blob();\n          return {\n            _id: fileId,\n            filename: response.headers.get('Content-Disposition').split('filename=')[1],\n            // Extract filename from Content-Disposition header\n            data: URL.createObjectURL(blob)\n          };\n        }));\n        this.files = files;\n      } catch (error) {\n        console.error('Error fetching files:', error);\n      }\n    },\n    downloadFile(fileId) {\n      const file = this.files.find(f => f._id === fileId);\n      if (file) {\n        const link = document.createElement('a');\n        link.href = file.data;\n        link.download = file.filename;\n        link.click();\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","props","isOpen","type","Boolean","required","student","Object","title","String","default","data","files","computed","dialogVisible","get","set","value","$emit","watch","newVal","loadFiles","methods","seguimiento1","seguimiento2","seguimiento3","fetchFiles","closeDialog","fileIds","Promise","all","map","fileId","response","fetch","ok","Error","blob","_id","filename","headers","split","URL","createObjectURL","error","console","downloadFile","file","find","f","link","document","createElement","href","download","click"],"sources":["/Users/angel/school-project/my-app/src/components/FilesDialog.vue"],"sourcesContent":["<template>\n    <v-dialog v-model=\"dialogVisible\" max-width=\"500\">\n      <v-card>\n        <v-card-title>\n          <span class=\"headline\">{{ title }}</span>\n          <v-spacer></v-spacer>\n          <v-btn icon @click=\"closeDialog\">\n            <v-icon>mdi-close</v-icon>\n          </v-btn>\n        </v-card-title>\n        <v-card-text v-if=\"files.length > 0\">\n          <v-list>\n            <v-list-item v-for=\"file in files\" :key=\"file._id\">\n              <v-list-item-icon>\n                <v-icon>mdi-file-pdf</v-icon>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title>{{ file.filename }}</v-list-item-title>\n              </v-list-item-content>\n              <v-list-item-action>\n                <v-btn text @click=\"downloadFile(file._id)\">Download</v-btn>\n              </v-list-item-action>\n            </v-list-item>\n          </v-list>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"blue darken-2\" text @click=\"closeDialog\">Close</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </template>\n  \n  <script>\n  export default {\n    name: 'FilesDialog',\n    props: {\n      isOpen: {\n        type: Boolean,\n        required: true\n      },\n      student: {\n        type: Object,\n        required: true\n      },\n      title: {\n        type: String,\n        default: 'Dialog'\n      }\n    },\n    data () {\n      return {\n        files: []\n      }\n    },\n    computed: {\n      dialogVisible: {\n        get () {\n          return this.isOpen\n        },\n        set (value) {\n          this.$emit('update:isOpen', value)\n        }\n      }\n    },\n    watch: {\n      dialogVisible(newVal) {\n        if (newVal) {\n          this.loadFiles();\n        }\n      }\n    },\n    methods: {\n      loadFiles() {\n        if (this.student && this.student.seguimiento1 && this.student.seguimiento2 && this.student.seguimiento3) {\n          this.fetchFiles([this.student.seguimiento1, this.student.seguimiento2, this.student.seguimiento3]);\n        }\n      },\n      closeDialog () {\n        this.dialogVisible = false;\n      },\n      async fetchFiles (fileIds) {\n        try {\n          const files = await Promise.all(\n            fileIds.map(async (fileId) => {\n              const response = await fetch(`/files/${fileId}`);\n              if (!response.ok) {\n                throw new Error(`Failed to fetch file with ID ${fileId}`);\n              }\n              const blob = await response.blob();\n              return {\n                _id: fileId,\n                filename: response.headers.get('Content-Disposition').split('filename=')[1], // Extract filename from Content-Disposition header\n                data: URL.createObjectURL(blob)\n              };\n            })\n          );\n          this.files = files;\n        } catch (error) {\n          console.error('Error fetching files:', error);\n        }\n      },\n      downloadFile (fileId) {\n        const file = this.files.find((f) => f._id === fileId);\n        if (file) {\n          const link = document.createElement('a');\n          link.href = file.data;\n          link.download = file.filename;\n          link.click();\n        }\n      }\n    }\n  }\n  </script>\n  \n  <style scoped>\n  .headline {\n    font-weight: bold;\n  }\n  </style>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}