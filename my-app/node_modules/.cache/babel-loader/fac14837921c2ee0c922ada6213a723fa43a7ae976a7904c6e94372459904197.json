{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      selectedFile: null,\n      pdfFiles: []\n    };\n  },\n  methods: {\n    onFileChange(event) {\n      this.selectedFile = event.target.files[0];\n    },\n    async uploadFile() {\n      if (!this.selectedFile) {\n        alert('Please select a PDF file first!');\n        return;\n      }\n      const formData = new FormData();\n      formData.append('file', this.selectedFile);\n      try {\n        const response = await axios.post('http://localhost:3000/upload', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        if (response.status === 201) {\n          alert('File uploaded successfully!');\n          this.fetchPDFFiles(); // After successful upload, fetch PDF files again\n        } else {\n          alert('Failed to upload file.');\n        }\n      } catch (error) {\n        console.error('Error uploading file:', error);\n        alert('Error uploading file.');\n      }\n    },\n    async fetchPDFFiles() {\n      try {\n        const response = await axios.get('http://localhost:3000/files');\n        this.pdfFiles = response.data;\n      } catch (error) {\n        console.error('Error fetching PDF files:', error);\n        alert('Error fetching PDF files.');\n      }\n    }\n  },\n  mounted() {\n    this.fetchPDFFiles(); // Fetch PDF files when the component is mounted\n  }\n};","map":{"version":3,"names":["axios","data","selectedFile","pdfFiles","methods","onFileChange","event","target","files","uploadFile","alert","formData","FormData","append","response","post","headers","status","fetchPDFFiles","error","console","get","mounted"],"sources":["/Users/angel/school-project/my-app/src/components/StudentPage.vue"],"sourcesContent":["<template>\n  <div>\n    <input type=\"file\" @change=\"onFileChange\" accept=\"application/pdf\" />\n    <button @click=\"uploadFile\">Upload PDF</button>\n\n    <div v-if=\"pdfFiles.length > 0\">\n      <h2>Uploaded PDF Files</h2>\n      <ul>\n        <li v-for=\"(file, index) in pdfFiles\" :key=\"index\">\n          <!-- View PDF -->\n          <a\n            :href=\"'data:application/pdf;base64,' + file.data\"\n            target=\"_blank\"\n            >{{ file.filename }}</a\n          >\n          <!-- Download PDF -->\n          <a\n            :href=\"'data:application/octet-stream;base64,' + file.data\"\n            :download=\"file.filename\"\n            >Download</a\n          >\n        </li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  data () {\n    return {\n      selectedFile: null,\n      pdfFiles: []\n    }\n  },\n  methods: {\n    onFileChange (event) {\n      this.selectedFile = event.target.files[0]\n    },\n    async uploadFile () {\n      if (!this.selectedFile) {\n        alert('Please select a PDF file first!')\n        return\n      }\n\n      const formData = new FormData()\n      formData.append('file', this.selectedFile)\n\n      try {\n        const response = await axios.post(\n          'http://localhost:3000/upload',\n          formData,\n          {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          }\n        )\n\n        if (response.status === 201) {\n          alert('File uploaded successfully!')\n          this.fetchPDFFiles() // After successful upload, fetch PDF files again\n        } else {\n          alert('Failed to upload file.')\n        }\n      } catch (error) {\n        console.error('Error uploading file:', error)\n        alert('Error uploading file.')\n      }\n    },\n    async fetchPDFFiles () {\n      try {\n        const response = await axios.get('http://localhost:3000/files')\n        this.pdfFiles = response.data\n      } catch (error) {\n        console.error('Error fetching PDF files:', error)\n        alert('Error fetching PDF files.')\n      }\n    }\n  },\n  mounted () {\n    this.fetchPDFFiles() // Fetch PDF files when the component is mounted\n  }\n}\n</script>\n\n<style scoped>\n/* Add your styles here */\n</style>\n"],"mappings":"AA4BA,OAAOA,KAAI,MAAO,OAAM;AAExB,eAAe;EACbC,IAAGA,CAAA,EAAK;IACN,OAAO;MACLC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,YAAWA,CAAGC,KAAK,EAAE;MACnB,IAAI,CAACJ,YAAW,GAAII,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC;IAC1C,CAAC;IACD,MAAMC,UAASA,CAAA,EAAK;MAClB,IAAI,CAAC,IAAI,CAACP,YAAY,EAAE;QACtBQ,KAAK,CAAC,iCAAiC;QACvC;MACF;MAEA,MAAMC,QAAO,GAAI,IAAIC,QAAQ,CAAC;MAC9BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,IAAI,CAACX,YAAY;MAEzC,IAAI;QACF,MAAMY,QAAO,GAAI,MAAMd,KAAK,CAACe,IAAI,CAC/B,8BAA8B,EAC9BJ,QAAQ,EACR;UACEK,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CACF;QAEA,IAAIF,QAAQ,CAACG,MAAK,KAAM,GAAG,EAAE;UAC3BP,KAAK,CAAC,6BAA6B;UACnC,IAAI,CAACQ,aAAa,CAAC,GAAE;QACvB,OAAO;UACLR,KAAK,CAAC,wBAAwB;QAChC;MACF,EAAE,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK;QAC5CT,KAAK,CAAC,uBAAuB;MAC/B;IACF,CAAC;IACD,MAAMQ,aAAYA,CAAA,EAAK;MACrB,IAAI;QACF,MAAMJ,QAAO,GAAI,MAAMd,KAAK,CAACqB,GAAG,CAAC,6BAA6B;QAC9D,IAAI,CAAClB,QAAO,GAAIW,QAAQ,CAACb,IAAG;MAC9B,EAAE,OAAOkB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK;QAChDT,KAAK,CAAC,2BAA2B;MACnC;IACF;EACF,CAAC;EACDY,OAAMA,CAAA,EAAK;IACT,IAAI,CAACJ,aAAa,CAAC,GAAE;EACvB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}