{"ast":null,"code":"export default {\n  name: 'FilesDialog',\n  props: {\n    isOpen: {\n      type: Boolean,\n      required: true\n    },\n    student: {\n      type: Object,\n      required: true\n    },\n    title: {\n      type: String,\n      default: 'Dialog'\n    }\n  },\n  data() {\n    return {\n      files: []\n    };\n  },\n  computed: {\n    dialogVisible: {\n      get() {\n        return this.isOpen;\n      },\n      set(value) {\n        this.$emit('update:isOpen', value);\n      }\n    }\n  },\n  watch: {\n    dialogVisible(newVal) {\n      if (newVal) {\n        this.loadFiles();\n      }\n    }\n  },\n  methods: {\n    loadFiles() {\n      if (this.student && this.student.seguimiento1 && this.student.seguimiento2 && this.student.seguimiento3) {\n        this.fetchFiles([this.student.seguimiento1, this.student.seguimiento2, this.student.seguimiento3]);\n      }\n    },\n    closeDialog() {\n      this.dialogVisible = false;\n    },\n    async fetchFiles(fileIds) {\n      try {\n        const files = await Promise.all(fileIds.map(async fileId => {\n          const response = await fetch(`http://localhost:3000/files/${fileId}`);\n          if (!response.ok) {\n            throw new Error(`Failed to fetch file with ID ${fileId}`);\n          }\n          const blob = await response.blob();\n          const base64Data = await this.blobToBase64(blob);\n          const contentDisposition = response.headers.get('Content-Disposition');\n          let filename = 'unknown';\n          if (contentDisposition) {\n            const filenameMatch = contentDisposition.match(/filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/);\n            if (filenameMatch && filenameMatch.length > 1) {\n              filename = filenameMatch[1].replace(/['\"]/g, '');\n            }\n          }\n          return {\n            _id: fileId,\n            filename,\n            data: base64Data\n          };\n        }));\n        this.files = files;\n      } catch (error) {\n        console.error('Error fetching files:', error);\n      }\n    },\n    async blobToBase64(blob) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n          resolve(reader.result.split(',')[1]);\n        };\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","props","isOpen","type","Boolean","required","student","Object","title","String","default","data","files","computed","dialogVisible","get","set","value","$emit","watch","newVal","loadFiles","methods","seguimiento1","seguimiento2","seguimiento3","fetchFiles","closeDialog","fileIds","Promise","all","map","fileId","response","fetch","ok","Error","blob","base64Data","blobToBase64","contentDisposition","headers","filename","filenameMatch","match","length","replace","_id","error","console","resolve","reject","reader","FileReader","onloadend","result","split","onerror","readAsDataURL"],"sources":["/Users/angel/school-project/my-app/src/components/FilesDialog.vue"],"sourcesContent":["<template>\n    <v-dialog v-model=\"dialogVisible\" max-width=\"500\">\n      <v-card>\n        <v-card-title>\n          <span class=\"headline\">{{ title }}</span>\n          <v-spacer></v-spacer>\n          <v-btn icon @click=\"closeDialog\">\n            <v-icon>mdi-close</v-icon>\n          </v-btn>\n        </v-card-title>\n        <v-card-text v-if=\"files.length > 0\">\n          <v-list>\n            <v-list-item v-for=\"file in files\" :key=\"file._id\">\n              <v-list-item-icon>\n                <v-icon>mdi-file-pdf</v-icon>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title>{{ file.filename }}</v-list-item-title>\n              </v-list-item-content>\n              <v-list-item-action>\n                <v-btn\n                  :href=\"'data:application/pdf;base64,' + file.data\"\n                  :download=\"file.filename\"\n                  color=\"blue darken-2\"\n                  block\n                >\n                  Descargar\n                </v-btn>\n              </v-list-item-action>\n            </v-list-item>\n          </v-list>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"blue darken-2\" text @click=\"closeDialog\">Close</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </template>\n\n<script>\nexport default {\n  name: 'FilesDialog',\n  props: {\n    isOpen: {\n      type: Boolean,\n      required: true\n    },\n    student: {\n      type: Object,\n      required: true\n    },\n    title: {\n      type: String,\n      default: 'Dialog'\n    }\n  },\n  data () {\n    return {\n      files: []\n    }\n  },\n  computed: {\n    dialogVisible: {\n      get () {\n        return this.isOpen\n      },\n      set (value) {\n        this.$emit('update:isOpen', value)\n      }\n    }\n  },\n  watch: {\n    dialogVisible (newVal) {\n      if (newVal) {\n        this.loadFiles()\n      }\n    }\n  },\n  methods: {\n    loadFiles () {\n      if (this.student && this.student.seguimiento1 && this.student.seguimiento2 && this.student.seguimiento3) {\n        this.fetchFiles([this.student.seguimiento1, this.student.seguimiento2, this.student.seguimiento3])\n      }\n    },\n    closeDialog () {\n      this.dialogVisible = false\n    },\n    async fetchFiles (fileIds) {\n      try {\n        const files = await Promise.all(\n          fileIds.map(async (fileId) => {\n            const response = await fetch(`http://localhost:3000/files/${fileId}`)\n            if (!response.ok) {\n              throw new Error(`Failed to fetch file with ID ${fileId}`)\n            }\n            const blob = await response.blob()\n            const base64Data = await this.blobToBase64(blob)\n            const contentDisposition = response.headers.get('Content-Disposition')\n\n            let filename = 'unknown'\n            if (contentDisposition) {\n              const filenameMatch = contentDisposition.match(/filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/)\n              if (filenameMatch && filenameMatch.length > 1) {\n                filename = filenameMatch[1].replace(/['\"]/g, '')\n              }\n            }\n\n            return {\n              _id: fileId,\n              filename,\n              data: base64Data\n            }\n          })\n        )\n        this.files = files\n      } catch (error) {\n        console.error('Error fetching files:', error)\n      }\n    },\n    async blobToBase64 (blob) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader()\n        reader.onloadend = () => {\n          resolve(reader.result.split(',')[1])\n        }\n        reader.onerror = reject\n        reader.readAsDataURL(blob)\n      })\n    }\n  }\n}\n</script>\n\n  <style scoped>\n  .headline {\n    font-weight: bold;\n  }\n  </style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}