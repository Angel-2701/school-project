{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nexport default {\n  name: 'FilesDialog',\n  props: {\n    isOpen: {\n      type: Boolean,\n      required: true\n    },\n    student: {\n      type: Object,\n      required: true\n    },\n    title: {\n      type: String,\n      default: 'Dialog'\n    }\n  },\n  data() {\n    return {\n      files: []\n    };\n  },\n  computed: {\n    dialogVisible: {\n      get() {\n        return this.isOpen;\n      },\n      set(value) {\n        this.$emit('update:isOpen', value);\n      }\n    }\n  },\n  mounted() {\n    // Check if seguimiento IDs exist in student object\n    if (this.student && this.student.seguimiento1 && this.student.seguimiento2 && this.student.seguimiento3) {\n      // Fetch files for seguimiento1, seguimiento2, seguimiento3\n      this.fetchFiles([this.student.seguimiento1, this.student.seguimiento2, this.student.seguimiento3]);\n    }\n  },\n  methods: {\n    closeDialog() {\n      this.dialogVisible = false;\n    },\n    async fetchFiles(fileIds) {\n      try {\n        const files = await Promise.all(fileIds.map(async fileId => {\n          const response = await fetch(`/files/${fileId}`);\n          if (!response.ok) {\n            throw new Error(`Failed to fetch file with ID ${fileId}`);\n          }\n          const blob = await response.blob();\n          return {\n            _id: fileId,\n            filename: response.headers.get('Content-Disposition').split('filename=')[1],\n            // Extract filename from Content-Disposition header\n            data: URL.createObjectURL(blob)\n          };\n        }));\n        this.files = files;\n      } catch (error) {\n        console.error('Error fetching files:', error);\n      }\n    },\n    downloadFile(fileId) {\n      const file = this.files.find(f => f._id === fileId);\n      if (file) {\n        const link = document.createElement('a');\n        link.href = file.data;\n        link.download = file.filename;\n        link.click();\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","props","isOpen","type","Boolean","required","student","Object","title","String","default","data","files","computed","dialogVisible","get","set","value","$emit","mounted","seguimiento1","seguimiento2","seguimiento3","fetchFiles","methods","closeDialog","fileIds","Promise","all","map","fileId","response","fetch","ok","Error","blob","_id","filename","headers","split","URL","createObjectURL","error","console","downloadFile","file","find","f","link","document","createElement","href","download","click"],"sources":["/Users/angel/school-project/my-app/src/components/FilesDialog.vue"],"sourcesContent":["<template>\n  <v-dialog v-model=\"dialogVisible\" max-width=\"500\">\n    <v-card>\n      <v-card-title>\n        <span class=\"headline\">{{ title }}</span>\n        <v-spacer></v-spacer>\n        <v-btn icon @click=\"closeDialog\">\n          <v-icon>mdi-close</v-icon>\n        </v-btn>\n      </v-card-title>\n      <v-card-text v-if=\"files.length > 0\">\n        <v-list>\n          <v-list-item v-for=\"file in files\" :key=\"file._id\">\n            <v-list-item-icon>\n              <v-icon>mdi-file-pdf</v-icon>\n            </v-list-item-icon>\n            <v-list-item-content>\n              <v-list-item-title>{{ file.filename }}</v-list-item-title>\n            </v-list-item-content>\n            <v-list-item-action>\n              <v-btn text @click=\"downloadFile(file._id)\">Download</v-btn>\n            </v-list-item-action>\n          </v-list-item>\n        </v-list>\n      </v-card-text>\n      <v-card-actions>\n        <v-spacer></v-spacer>\n        <v-btn color=\"blue darken-2\" text @click=\"closeDialog\">Close</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-dialog>\n</template>\n\n<script>\nexport default {\n  name: 'FilesDialog',\n  props: {\n    isOpen: {\n      type: Boolean,\n      required: true\n    },\n    student: {\n      type: Object,\n      required: true\n    },\n    title: {\n      type: String,\n      default: 'Dialog'\n    }\n  },\n  data () {\n    return {\n      files: []\n    }\n  },\n  computed: {\n    dialogVisible: {\n      get () {\n        return this.isOpen\n      },\n      set (value) {\n        this.$emit('update:isOpen', value)\n      }\n    }\n  },\n  mounted () {\n    // Check if seguimiento IDs exist in student object\n    if (\n      this.student &&\n      this.student.seguimiento1 &&\n      this.student.seguimiento2 &&\n      this.student.seguimiento3\n    ) {\n      // Fetch files for seguimiento1, seguimiento2, seguimiento3\n      this.fetchFiles([\n        this.student.seguimiento1,\n        this.student.seguimiento2,\n        this.student.seguimiento3\n      ])\n    }\n  },\n  methods: {\n    closeDialog () {\n      this.dialogVisible = false\n    },\n    async fetchFiles (fileIds) {\n      try {\n        const files = await Promise.all(\n          fileIds.map(async (fileId) => {\n            const response = await fetch(`/files/${fileId}`)\n            if (!response.ok) {\n              throw new Error(`Failed to fetch file with ID ${fileId}`)\n            }\n            const blob = await response.blob()\n            return {\n              _id: fileId,\n              filename: response.headers\n                .get('Content-Disposition')\n                .split('filename=')[1], // Extract filename from Content-Disposition header\n              data: URL.createObjectURL(blob)\n            }\n          })\n        )\n        this.files = files\n      } catch (error) {\n        console.error('Error fetching files:', error)\n      }\n    },\n    downloadFile (fileId) {\n      const file = this.files.find((f) => f._id === fileId)\n      if (file) {\n        const link = document.createElement('a')\n        link.href = file.data\n        link.download = file.filename\n        link.click()\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.headline {\n  font-weight: bold;\n}\n</style>\n"],"mappings":";;;AAkCA,eAAe;EACbA,IAAI,EAAE,aAAa;EACnBC,KAAK,EAAE;IACLC,MAAM,EAAE;MACNC,IAAI,EAAEC,OAAO;MACbC,QAAQ,EAAE;IACZ,CAAC;IACDC,OAAO,EAAE;MACPH,IAAI,EAAEI,MAAM;MACZF,QAAQ,EAAE;IACZ,CAAC;IACDG,KAAK,EAAE;MACLL,IAAI,EAAEM,MAAM;MACZC,OAAO,EAAE;IACX;EACF,CAAC;EACDC,IAAGA,CAAA,EAAK;IACN,OAAO;MACLC,KAAK,EAAE;IACT;EACF,CAAC;EACDC,QAAQ,EAAE;IACRC,aAAa,EAAE;MACbC,GAAEA,CAAA,EAAK;QACL,OAAO,IAAI,CAACb,MAAK;MACnB,CAAC;MACDc,GAAEA,CAAGC,KAAK,EAAE;QACV,IAAI,CAACC,KAAK,CAAC,eAAe,EAAED,KAAK;MACnC;IACF;EACF,CAAC;EACDE,OAAMA,CAAA,EAAK;IACT;IACA,IACE,IAAI,CAACb,OAAM,IACX,IAAI,CAACA,OAAO,CAACc,YAAW,IACxB,IAAI,CAACd,OAAO,CAACe,YAAW,IACxB,IAAI,CAACf,OAAO,CAACgB,YAAW,EACxB;MACA;MACA,IAAI,CAACC,UAAU,CAAC,CACd,IAAI,CAACjB,OAAO,CAACc,YAAY,EACzB,IAAI,CAACd,OAAO,CAACe,YAAY,EACzB,IAAI,CAACf,OAAO,CAACgB,YAAW,CACzB;IACH;EACF,CAAC;EACDE,OAAO,EAAE;IACPC,WAAUA,CAAA,EAAK;MACb,IAAI,CAACX,aAAY,GAAI,KAAI;IAC3B,CAAC;IACD,MAAMS,UAASA,CAAGG,OAAO,EAAE;MACzB,IAAI;QACF,MAAMd,KAAI,GAAI,MAAMe,OAAO,CAACC,GAAG,CAC7BF,OAAO,CAACG,GAAG,CAAC,MAAOC,MAAM,IAAK;UAC5B,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAE,UAASF,MAAO,EAAC;UAC/C,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;YAChB,MAAM,IAAIC,KAAK,CAAE,gCAA+BJ,MAAO,EAAC;UAC1D;UACA,MAAMK,IAAG,GAAI,MAAMJ,QAAQ,CAACI,IAAI,CAAC;UACjC,OAAO;YACLC,GAAG,EAAEN,MAAM;YACXO,QAAQ,EAAEN,QAAQ,CAACO,OAAM,CACtBvB,GAAG,CAAC,qBAAqB,EACzBwB,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAAE;YAC1B5B,IAAI,EAAE6B,GAAG,CAACC,eAAe,CAACN,IAAI;UAChC;QACF,CAAC,CACH;QACA,IAAI,CAACvB,KAAI,GAAIA,KAAI;MACnB,EAAE,OAAO8B,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK;MAC9C;IACF,CAAC;IACDE,YAAWA,CAAGd,MAAM,EAAE;MACpB,MAAMe,IAAG,GAAI,IAAI,CAACjC,KAAK,CAACkC,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACX,GAAE,KAAMN,MAAM;MACpD,IAAIe,IAAI,EAAE;QACR,MAAMG,IAAG,GAAIC,QAAQ,CAACC,aAAa,CAAC,GAAG;QACvCF,IAAI,CAACG,IAAG,GAAIN,IAAI,CAAClC,IAAG;QACpBqC,IAAI,CAACI,QAAO,GAAIP,IAAI,CAACR,QAAO;QAC5BW,IAAI,CAACK,KAAK,CAAC;MACb;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}