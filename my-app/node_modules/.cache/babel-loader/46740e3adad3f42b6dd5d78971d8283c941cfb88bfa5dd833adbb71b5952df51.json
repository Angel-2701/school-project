{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      projects: [],\n      tableHeaders: [],\n      sidebarItems: [{\n        title: 'Projects',\n        icon: 'mdi-folder-outline'\n      }, {\n        title: 'Students',\n        icon: 'mdi-account-plus-outline'\n      }, {\n        title: 'Create Teacher',\n        icon: 'mdi-teacher'\n      }],\n      userName: 'John Doe',\n      drawer: false,\n      editDialog: false,\n      editedProjectName: '',\n      editedProjectId: ''\n    };\n  },\n  methods: {\n    async fetchData() {\n      try {\n        const response = await axios.get('http://localhost:3000/projects');\n        this.projects = response.data;\n\n        // Generate table headers based on the keys of the first project\n        if (this.projects.length > 0) {\n          // Access the first project from the reactive proxy object\n          const firstProject = this.projects[0];\n\n          // Extract keys from the first project and capitalize them\n          const keys = Object.keys(firstProject).map(key => ({\n            text: key.charAt(0).toUpperCase() + key.slice(1),\n            // Capitalize first letter\n            value: key\n          }));\n\n          // Set the tableHeaders property with the generated headers\n          this.tableHeaders = keys;\n        }\n      } catch (error) {\n        console.error('Error fetching projects:', error);\n      }\n    },\n    navigate(index) {\n      switch (index) {\n        case 0:\n          this.$router.push('/admin');\n          break;\n        case 1:\n          this.$router.push('/Students');\n          break;\n        case 2:\n          this.$router.push('/create-teacher');\n          break;\n        default:\n          break;\n      }\n    },\n    logout() {\n      // Logic to logout the user\n    },\n    editProject(project) {\n      this.editedProjectName = project.name;\n      this.editedProjectId = project._id;\n      this.editDialog = true;\n    },\n    saveEditedProject() {\n      // Logic to save the edited project name\n      console.log('Saving edited project name:', this.editedProjectName);\n      this.editDialog = false;\n    },\n    cancelEdit() {\n      this.editDialog = false;\n    }\n  },\n  mounted() {\n    this.fetchData();\n  }\n};","map":{"version":3,"names":["axios","data","projects","tableHeaders","sidebarItems","title","icon","userName","drawer","editDialog","editedProjectName","editedProjectId","methods","fetchData","response","get","length","firstProject","keys","Object","map","key","text","charAt","toUpperCase","slice","value","error","console","navigate","index","$router","push","logout","editProject","project","name","_id","saveEditedProject","log","cancelEdit","mounted"],"sources":["/Users/angel/project-system/my-app/src/components/AdminPage.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-container fluid>\n      <!-- Top Bar -->\n      <v-app-bar app color=\"blue darken-2\" dark>\n        <!-- Burger menu icon -->\n        <v-btn icon @click=\"drawer = !drawer\">\n          <v-icon>mdi-menu</v-icon>\n        </v-btn>\n        <!-- Title -->\n        <v-toolbar-title>{{ userName }}</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <!-- Logout button -->\n        <v-btn icon @click=\"logout\">\n          <v-icon>mdi-logout</v-icon>\n        </v-btn>\n      </v-app-bar>\n\n      <!-- Sidebar -->\n      <v-navigation-drawer app v-model=\"drawer\" color=\"blue darken-2\" dark>\n        <v-list dense>\n          <v-list-item\n            v-for=\"(item, index) in sidebarItems\"\n            :key=\"index\"\n            @click=\"navigate(index)\"\n          >\n            <v-list-item-action>\n              <v-icon>{{ item.icon }}</v-icon>\n            </v-list-item-action>\n            <v-list-item-content>\n              <v-list-item-title>{{ item.title }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n        </v-list>\n      </v-navigation-drawer>\n\n      <v-main>\n  <!-- Main content -->\n  <v-col cols=\"10\">\n    <v-card>\n      <!-- Projects Data -->\n      <v-data-table\n        v-if=\"projects.length > 0\"\n        :items=\"projects\"\n        align=\"center\"\n      >\n        <template v-slot:top>\n          <v-toolbar flat color=\"blue darken-2\">\n            <v-toolbar-title>Projects</v-toolbar-title>\n            <v-divider class=\"mx-4\" inset vertical></v-divider>\n            <v-spacer></v-spacer>\n            <v-btn icon color=\"blue darken-2\" @click=\"openCreateDialog\">\n              <v-icon>mdi-plus</v-icon>\n            </v-btn>\n          </v-toolbar>\n        </template>\n        <template v-slot:item=\"{ item }\">\n          <tr>\n            <td v-for=\"(value, key) in item\" :key=\"key\">\n              {{ value }}\n            </td>\n            <td>\n              <!-- Use small prop to make the buttons smaller -->\n              <v-btn icon small color=\"blue darken-2\" @click=\"editProject(item)\">\n                <v-icon>mdi-pencil</v-icon>\n              </v-btn>\n              <v-btn icon small color=\"red darken-2\" @click=\"deleteProject(item)\">\n                <v-icon>mdi-delete</v-icon>\n              </v-btn>\n            </td>\n          </tr>\n        </template>\n      </v-data-table>\n    </v-card>\n  </v-col>\n</v-main>\n\n\n      <!-- Edit Dialog -->\n      <v-dialog v-model=\"editDialog\" max-width=\"500\">\n        <v-card>\n          <v-card-title>Edit Project Name</v-card-title>\n          <v-card-text>\n            <v-text-field\n              v-model=\"editedProjectName\"\n              label=\"Project Name\"\n            ></v-text-field>\n          </v-card-text>\n          <v-card-actions>\n            <v-btn color=\"blue darken-2\" @click=\"saveEditedProject\">Save</v-btn>\n            <v-btn @click=\"cancelEdit\">Cancel</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n    </v-container>\n  </v-app>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  data () {\n    return {\n      projects: [],\n      tableHeaders: [],\n      sidebarItems: [\n        { title: 'Projects', icon: 'mdi-folder-outline' },\n        { title: 'Students', icon: 'mdi-account-plus-outline' },\n        { title: 'Create Teacher', icon: 'mdi-teacher' }\n      ],\n      userName: 'John Doe',\n      drawer: false,\n      editDialog: false,\n      editedProjectName: '',\n      editedProjectId: ''\n    }\n  },\n  methods: {\n    async fetchData () {\n      try {\n        const response = await axios.get('http://localhost:3000/projects')\n        this.projects = response.data\n\n        // Generate table headers based on the keys of the first project\n        if (this.projects.length > 0) {\n          // Access the first project from the reactive proxy object\n          const firstProject = this.projects[0]\n\n          // Extract keys from the first project and capitalize them\n          const keys = Object.keys(firstProject).map((key) => ({\n            text: key.charAt(0).toUpperCase() + key.slice(1), // Capitalize first letter\n            value: key\n          }))\n\n          // Set the tableHeaders property with the generated headers\n          this.tableHeaders = keys\n        }\n      } catch (error) {\n        console.error('Error fetching projects:', error)\n      }\n    },\n\n    navigate (index) {\n      switch (index) {\n        case 0:\n          this.$router.push('/admin')\n          break\n        case 1:\n          this.$router.push('/Students')\n          break\n        case 2:\n          this.$router.push('/create-teacher')\n          break\n        default:\n          break\n      }\n    },\n    logout () {\n      // Logic to logout the user\n    },\n    editProject (project) {\n      this.editedProjectName = project.name\n      this.editedProjectId = project._id\n      this.editDialog = true\n    },\n    saveEditedProject () {\n      // Logic to save the edited project name\n      console.log('Saving edited project name:', this.editedProjectName)\n      this.editDialog = false\n    },\n    cancelEdit () {\n      this.editDialog = false\n    }\n  },\n  mounted () {\n    this.fetchData()\n  }\n}\n</script>\n\n<style scoped>\n/* Adjustments for burger menu icon color */\n.v-btn i {\n  color: white;\n}\n</style>\n"],"mappings":";AAmGA,OAAOA,KAAI,MAAO,OAAM;AAExB,eAAe;EACbC,IAAGA,CAAA,EAAK;IACN,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,YAAY,EAAE,EAAE;MAChBC,YAAY,EAAE,CACZ;QAAEC,KAAK,EAAE,UAAU;QAAEC,IAAI,EAAE;MAAqB,CAAC,EACjD;QAAED,KAAK,EAAE,UAAU;QAAEC,IAAI,EAAE;MAA2B,CAAC,EACvD;QAAED,KAAK,EAAE,gBAAgB;QAAEC,IAAI,EAAE;MAAc,EAChD;MACDC,QAAQ,EAAE,UAAU;MACpBC,MAAM,EAAE,KAAK;MACbC,UAAU,EAAE,KAAK;MACjBC,iBAAiB,EAAE,EAAE;MACrBC,eAAe,EAAE;IACnB;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,SAAQA,CAAA,EAAK;MACjB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMd,KAAK,CAACe,GAAG,CAAC,gCAAgC;QACjE,IAAI,CAACb,QAAO,GAAIY,QAAQ,CAACb,IAAG;;QAE5B;QACA,IAAI,IAAI,CAACC,QAAQ,CAACc,MAAK,GAAI,CAAC,EAAE;UAC5B;UACA,MAAMC,YAAW,GAAI,IAAI,CAACf,QAAQ,CAAC,CAAC;;UAEpC;UACA,MAAMgB,IAAG,GAAIC,MAAM,CAACD,IAAI,CAACD,YAAY,CAAC,CAACG,GAAG,CAAEC,GAAG,KAAM;YACnDC,IAAI,EAAED,GAAG,CAACE,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,IAAIH,GAAG,CAACI,KAAK,CAAC,CAAC,CAAC;YAAE;YAClDC,KAAK,EAAEL;UACT,CAAC,CAAC;;UAEF;UACA,IAAI,CAAClB,YAAW,GAAIe,IAAG;QACzB;MACF,EAAE,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK;MACjD;IACF,CAAC;IAEDE,QAAOA,CAAGC,KAAK,EAAE;MACf,QAAQA,KAAK;QACX,KAAK,CAAC;UACJ,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ;UAC1B;QACF,KAAK,CAAC;UACJ,IAAI,CAACD,OAAO,CAACC,IAAI,CAAC,WAAW;UAC7B;QACF,KAAK,CAAC;UACJ,IAAI,CAACD,OAAO,CAACC,IAAI,CAAC,iBAAiB;UACnC;QACF;UACE;MACJ;IACF,CAAC;IACDC,MAAKA,CAAA,EAAK;MACR;IAAA,CACD;IACDC,WAAUA,CAAGC,OAAO,EAAE;MACpB,IAAI,CAACzB,iBAAgB,GAAIyB,OAAO,CAACC,IAAG;MACpC,IAAI,CAACzB,eAAc,GAAIwB,OAAO,CAACE,GAAE;MACjC,IAAI,CAAC5B,UAAS,GAAI,IAAG;IACvB,CAAC;IACD6B,iBAAgBA,CAAA,EAAK;MACnB;MACAV,OAAO,CAACW,GAAG,CAAC,6BAA6B,EAAE,IAAI,CAAC7B,iBAAiB;MACjE,IAAI,CAACD,UAAS,GAAI,KAAI;IACxB,CAAC;IACD+B,UAASA,CAAA,EAAK;MACZ,IAAI,CAAC/B,UAAS,GAAI,KAAI;IACxB;EACF,CAAC;EACDgC,OAAMA,CAAA,EAAK;IACT,IAAI,CAAC5B,SAAS,CAAC;EACjB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}