{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport FilesDialog from './FilesDialog.vue';\nexport default {\n  components: {\n    FilesDialog\n  },\n  data() {\n    return {\n      selectedStudent: null,\n      showFilesDialog: false,\n      studentProjectNames: {},\n      students: [],\n      selectedOptions: [],\n      teachers: [],\n      sidebarItems: [{\n        title: 'Proyectos',\n        icon: 'mdi-folder-outline'\n      }, {\n        title: 'Alumnos',\n        icon: 'mdi-account-plus-outline'\n      }, {\n        title: 'Maestros',\n        icon: 'mdi-account-tie'\n      }],\n      userName: localStorage.getItem('userName'),\n      drawer: false,\n      editDialog: false,\n      teacher: {\n        _id: '',\n        nombre: '',\n        apellido: '',\n        correo: '',\n        contrase単a: '',\n        alumnos: [],\n        apellidoM: '',\n        numeroTelefonico: ''\n        // Add more fields as needed\n      },\n      createDialog: false,\n      showAssignedStudentsDialog: false,\n      assignedStudents: [],\n      search: ''\n    };\n  },\n  computed: {\n    isCreateFormValid() {\n      // Check if the form reference exists\n      if (!this.$refs.editDialogForm) {\n        return false;\n      }\n\n      // Manually validate each field\n      return this.teacher._id && this.teacher.contrase単a && this.teacher.nombre && this.teacher.apellido && this.teacher.apellidoM && this.teacher.numeroTelefonico && this.teacher.correo && this.teacher.alumnos;\n    },\n    isEditFormValid() {\n      // Check if the form reference exists\n      if (!this.$refs.editDialogForm) {\n        return false;\n      }\n\n      // Manually validate each field\n      return this.teacher.nombre && this.teacher.apellido && this.teacher.apellidoM && this.teacher.numeroTelefonico && this.teacher.alumnos;\n    }\n  },\n  methods: {\n    openFilesDialog(student) {\n      this.selectedStudent = student;\n      this.showFilesDialog = true; // Open the dialog with the student's files\n    },\n    limitSelection(isNewUser) {\n      if (isNewUser && this.teacher.alumnos.length > 5) {\n        alert('You can only select a maximum of 5 options.');\n        this.teacher.alumnos = this.teacher.alumnos.slice(0, 5);\n      } else if (!isNewUser && this.teacher.alumnos.length > 5) {\n        alert('You can only select a maximum of 5 options.');\n        this.teacher.alumnos = this.teacher.alumnos.slice(0, 5);\n      }\n    },\n    async fetchData() {\n      try {\n        const response = await axios.get('http://localhost:3000/teachers');\n        this.teachers = response.data;\n      } catch (error) {\n        console.error('Error fetching teachers:', error);\n      }\n    },\n    async fetchStudents() {\n      try {\n        const studentsResponse = await axios.get('http://localhost:3000/students');\n        const allStudents = studentsResponse.data;\n\n        // Filter out students who are not assigned to any teacher\n        const unassignedStudents = allStudents.filter(student => {\n          return !this.teachers.some(teacher => teacher.alumnos.includes(student._id));\n        });\n        const assignedStudents = allStudents.filter(student => {\n          return this.teachers.some(teacher => teacher.alumnos.includes(student._id));\n        });\n\n        // Include the teacher's ID in the assignedStudents array\n        const updatedAssignedStudents = assignedStudents.map(student => ({\n          ...student,\n          teacherId: student.teacherId // Ensure each student object has a teacherId property\n        }));\n\n        // Fetch project names for each student's project\n        const projectNamesPromises = updatedAssignedStudents.map(async student => {\n          const projectName = await this.getProjectName(student.proyecto);\n          return {\n            ...student,\n            projectName\n          };\n        });\n\n        // Wait for all project names to be fetched\n        this.assignedStudents = await Promise.all(projectNamesPromises);\n\n        // Extract just the names from the unassigned students data\n        this.students = unassignedStudents.map(student => student._id);\n      } catch (error) {\n        console.error('Error fetching students:', error);\n      }\n    },\n    async showAssignedStudents(teacher, event) {\n      event.stopPropagation();\n      // Filter assignedStudents to include only those assigned to the current teacher\n      await this.fetchStudents();\n      this.assignedStudents = this.assignedStudents.filter(student => teacher.alumnos.includes(student._id));\n      this.showAssignedStudentsDialog = true;\n    },\n    async navigate(index) {\n      switch (index) {\n        case 0:\n          this.$router.push('/admin');\n          break;\n        case 1:\n          this.$router.push('/admin/students');\n          break;\n        case 2:\n          this.$router.push('/admin/teachers');\n          break;\n        default:\n          break;\n      }\n    },\n    logout() {\n      // Logic to logout the user\n      // For example, you can clear any user data or tokens stored in localStorage\n      localStorage.removeItem('token');\n\n      // Redirect the user to the login page\n      this.$router.push('/login');\n    },\n    async editUser(teacher, event) {\n      event.stopPropagation();\n      // Assign the teacher data to editedTeacher\n      await this.fetchStudents();\n      this.teacher = {\n        ...teacher\n      };\n\n      // If editedTeacher has alumnos property, add its students to the students array\n      if (this.teacher.alumnos && Array.isArray(this.teacher.alumnos)) {\n        this.students = [...this.students, ...this.teacher.alumnos];\n      }\n\n      // Open the edit dialog\n      this.editDialog = true;\n    },\n    async saveEditedTeacher() {\n      try {\n        // Send the updated teacher data to the server\n        const response = await axios.put(`http://localhost:3000/users/${this.teacher._id}`, this.teacher);\n        console.log('Teacher updated successfully:', response.data);\n        this.fetchData();\n      } catch (error) {\n        console.error('Error updating teacher:', error);\n      }\n      this.editDialog = false;\n    },\n    cancelEdit() {\n      this.editDialog = false;\n    },\n    openCreateDialog() {\n      this.resetTeacher();\n      this.createDialog = true;\n      this.fetchStudents();\n    },\n    async saveNewTeacher() {\n      try {\n        // Add 'rol' field with value 'teacher'\n        this.teacher.rol = 'teacher';\n        const response = await axios.post('http://localhost:3000/register', this.teacher);\n        if (response.status === 201) {\n          console.log('Teacher created successfully:', response.data);\n          this.fetchData();\n        } else {\n          console.error('Failed to create teacher:', response.data);\n        }\n      } catch (error) {\n        console.error('Error creating teacher:', error);\n      }\n      this.createDialog = false;\n    },\n    cancelCreate() {\n      this.createDialog = false;\n    },\n    async deleteTeacher(teacherId, event) {\n      event.stopPropagation();\n      try {\n        const response = await axios.delete(`http://localhost:3000/users/${teacherId}`);\n        console.log('Teacher deleted successfully:', response.data);\n        this.fetchData(); // Call a method to update the UI or fetch updated data\n      } catch (error) {\n        console.error('Error deleting teacher:', error);\n      }\n    },\n    async getProjectName(projectId) {\n      try {\n        const response = await axios.get(`http://localhost:3000/projects/${projectId}`);\n        const data = response.data; // Assuming the project name is stored in the 'name' field\n        return data.nombre;\n      } catch (error) {\n        console.error('Error fetching project name:', error);\n        return 'Unknown'; // Return a default value if an error occurs\n      }\n    },\n    async renderProjectName(projectId) {\n      const projectName = await this.getProjectName(projectId);\n      this.studentProjectNames[projectId] = projectName; // Store the project name\n    },\n    handleRowClick(item) {\n      // Handle row click event here\n      console.log('Row clicked:', item);\n      // Navigate to a new page and pass the user's ID as route parameters\n      this.$router.push({\n        name: 'UserDetails',\n        params: {\n          userId: item._id\n        }\n      });\n    },\n    resetTeacher() {\n      this.teacher = {\n        _id: '',\n        nombre: '',\n        apellido: '',\n        correo: '',\n        contrase単a: '',\n        alumnos: [],\n        apellidoM: '',\n        numeroTelefonico: ''\n      };\n    }\n  },\n  mounted() {\n    this.fetchData();\n    this.fetchStudents();\n  }\n};","map":{"version":3,"names":["axios","FilesDialog","components","data","selectedStudent","showFilesDialog","studentProjectNames","students","selectedOptions","teachers","sidebarItems","title","icon","userName","localStorage","getItem","drawer","editDialog","teacher","_id","nombre","apellido","correo","contrase単a","alumnos","apellidoM","numeroTelefonico","createDialog","showAssignedStudentsDialog","assignedStudents","search","computed","isCreateFormValid","$refs","editDialogForm","isEditFormValid","methods","openFilesDialog","student","limitSelection","isNewUser","length","alert","slice","fetchData","response","get","error","console","fetchStudents","studentsResponse","allStudents","unassignedStudents","filter","some","includes","updatedAssignedStudents","map","teacherId","projectNamesPromises","projectName","getProjectName","proyecto","Promise","all","showAssignedStudents","event","stopPropagation","navigate","index","$router","push","logout","removeItem","editUser","Array","isArray","saveEditedTeacher","put","log","cancelEdit","openCreateDialog","resetTeacher","saveNewTeacher","rol","post","status","cancelCreate","deleteTeacher","delete","projectId","renderProjectName","handleRowClick","item","name","params","userId","mounted"],"sources":["/Users/angel/school-project/my-app/src/components/TeachersPage.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-container fluid>\n      <!-- Top Bar -->\n      <v-app-bar app color=\"blue darken-2\" dark>\n        <!-- Burger menu icon -->\n        <v-btn icon @click=\"drawer = !drawer\">\n          <v-icon>mdi-menu</v-icon>\n        </v-btn>\n        <!-- Title -->\n        <v-toolbar-title>{{ userName }}</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <!-- Logout button -->\n        <v-btn icon @click=\"logout\">\n          <v-icon>mdi-logout</v-icon>\n        </v-btn>\n      </v-app-bar>\n\n      <!-- Sidebar -->\n      <v-navigation-drawer app v-model=\"drawer\" color=\"blue darken-2\" dark>\n        <v-list dense>\n          <v-list-item\n            v-for=\"(item, index) in sidebarItems\"\n            :key=\"index\"\n            @click=\"navigate(index)\"\n          >\n            <v-list-item-action>\n              <v-icon>{{ item.icon }}</v-icon>\n            </v-list-item-action>\n            <v-list-item-content>\n              <v-list-item-title>{{ item.title }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n        </v-list>\n      </v-navigation-drawer>\n\n      <v-main>\n        <!-- Main content -->\n        <v-col cols=\"12\" style=\"max-width: 1500px; margin: 0px auto\">\n          <v-card class=\"text-center\" style=\"width: 100%; margin: 0px auto\">\n            <template v-slot:text>\n              <v-text-field\n                v-model=\"search\"\n                label=\"Buscar\"\n                prepend-inner-icon=\"mdi-magnify\"\n                variant=\"outlined\"\n                hide-details\n                single-line\n              ></v-text-field>\n            </template>\n            <!-- Teachers Data -->\n            <v-data-table\n              v-if=\"teachers.length > 0\"\n              :items=\"teachers\"\n              align=\"center\"\n              :search=\"search\"\n              items-per-page-text=\"Elementos por p叩gina\"\n              pageText=\"\"\n            >\n              <template v-slot:top>\n                <v-toolbar flat color=\"blue darken-2\">\n                  <v-toolbar-title>Maestros</v-toolbar-title>\n                  <v-divider class=\"mx-4\" inset vertical></v-divider>\n                  <v-spacer></v-spacer>\n                  <v-btn icon color=\"blue darken-2\" @click=\"openCreateDialog\">\n                    <v-icon>mdi-plus</v-icon>\n                  </v-btn>\n                </v-toolbar>\n              </template>\n              <template v-slot:headers>\n                <tr>\n                  <th>{{ \"ID\" }}</th>\n                  <th>{{ \"Correo\" }}</th>\n                  <th>{{ \"Nombre\" }}</th>\n                  <th>{{ \"Apellido Paterno\" }}</th>\n                  <th>{{ \"Apellido Materno\" }}</th>\n                  <th>{{ \"Alumnos\" }}</th>\n                  <!-- Exclude numeroTelefonico from the headers -->\n                </tr>\n              </template>\n              <template v-slot:item=\"{ item }\">\n                <tr @click=\"handleRowClick(item)\" class=\"clickable-row\">\n                  <td>{{ item._id }}</td>\n                  <td>{{ item.correo }}</td>\n                  <td>{{ item.nombre }}</td>\n                  <td>{{ item.apellido }}</td>\n                  <td>{{ item.apellidoM }}</td>\n                  <td>\n                    <v-btn\n                      small\n                      color=\"blue darken-2\"\n                      @click=\"showAssignedStudents(item, $event)\"\n                    >\n                      {{ item.alumnos.length }} Alumnos\n                    </v-btn>\n                  </td>\n                  <td>\n                    <v-btn\n                      icon\n                      small\n                      color=\"blue darken-2\"\n                      @click=\"editUser(item, $event)\"\n                      style=\"width: 30px; height: 30px; margin-right: 5px\"\n                    >\n                      <v-icon style=\"font-size: 18px\">mdi-pencil</v-icon>\n                    </v-btn>\n                    <v-btn\n                      icon\n                      small\n                      color=\"red darken-2\"\n                      @click=\"deleteTeacher(item._id, $event)\"\n                      style=\"width: 30px; height: 30px; margin-right: 5px\"\n                    >\n                      <v-icon style=\"font-size: 18px\">mdi-delete</v-icon>\n                    </v-btn>\n                  </td>\n                </tr>\n              </template>\n            </v-data-table>\n          </v-card>\n        </v-col>\n      </v-main>\n      <!-- Show Assigned Students Dialog -->\n      <v-dialog v-model=\"showAssignedStudentsDialog\" max-width=\"500\">\n        <v-card>\n          <v-card-title class=\"headline\">Alumnos Asignados</v-card-title>\n          <v-card-text>\n            <v-list>\n              <v-list-item\n                v-for=\"student in assignedStudents\"\n                :key=\"student.id\"\n                class=\"mb-4\"\n                @click=\"openFilesDialog(student)\"\n              >\n                  <v-list-item-icon>\n                    <v-icon>mdi-account</v-icon>\n                  </v-list-item-icon>\n                  <v-list-item-content>\n                    <v-list-item-title class=\"font-weight-bold\">\n                      <span>ID:</span> {{ student._id }}<br />\n                      <span>Nombre:</span> {{ student.nombre }}<br />\n                      <span>Proyecto:</span> {{ student.projectName }}\n\n                      <!-- Modified to call getProjectName method -->\n                    </v-list-item-title>\n                  </v-list-item-content>\n              </v-list-item>\n            </v-list>\n          </v-card-text>\n          <v-card-actions>\n            <v-btn\n              color=\"blue darken-2\"\n              dark\n              large\n              @click=\"showAssignedStudentsDialog = false\"\n              >Cerrar</v-btn\n            >\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n\n      <!-- Edit Dialog -->\n      <v-dialog v-model=\"editDialog\" max-width=\"500\" ref=\"editDialogForm\">\n        <v-card>\n          <v-card-title>Editar Maestro</v-card-title>\n          <v-card-text>\n            <v-text-field\n              v-model=\"teacher.nombre\"\n              label=\"Nombre\"\n              required\n              :rules=\"[(v) => !!v || 'Nombre requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.apellido\"\n              label=\"Apellido Paterno\"\n              required\n              :rules=\"[(v) => !!v || 'Apellido Paterno requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.apellidoM\"\n              label=\"Apellido Materno\"\n              required\n              :rules=\"[(v) => !!v || 'Apellido Materno requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.numeroTelefonico\"\n              label=\"N炭mero Telef坦nico\"\n              type=\"number\"\n              required\n              :rules=\"[(v) => !!v || 'N炭mero Telef坦nico requerido']\"\n            ></v-text-field>\n            <!-- Add v-select to select students -->\n            <v-select\n              v-model=\"teacher.alumnos\"\n              :items=\"students\"\n              label=\"Selecciona alumnos (max 5)\"\n              multiple\n              chips\n              required\n              :rules=\"[(v) => !!v || 'Alumnos son requeridos']\"\n              @update:modelValue=\"limitSelection(false)\"\n            ></v-select>\n            <!-- Add more fields as needed -->\n          </v-card-text>\n          <v-card-actions>\n            <v-btn\n              color=\"blue darken-2\"\n              @click=\"saveEditedTeacher\"\n              :disabled=\"!isEditFormValid\"\n              >Guardar</v-btn\n            >\n            <v-btn @click=\"cancelEdit\">Cancelar</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n\n      <!-- Create Dialog -->\n      <v-dialog v-model=\"createDialog\" max-width=\"500\" ref=\"createDialogForm\">\n        <v-card>\n          <v-card-title>Crear Nuevo Maestro</v-card-title>\n          <v-card-text>\n            <v-text-field\n              v-model=\"teacher._id\"\n              label=\"ID\"\n              required\n              :rules=\"[\n                (v) => {\n                  console.log('ID value:', v);\n                  return !!v || 'ID is required';\n                },\n                (v) => {\n                  const isValid = /^[0-9]+$/.test(v);\n                  console.log('Is ID valid?', isValid);\n                  return isValid || 'ID must contain only numbers';\n                },\n              ]\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.nombre\"\n              label=\"Nombre\"\n              required\n              :rules=\"[(v) => !!v || 'Nombre requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.apellido\"\n              label=\"Apellido Paterno\"\n              required\n              :rules=\"[(v) => !!v || 'Apellido Paterno requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.apellidoM\"\n              label=\"Apellido Materno\"\n              required\n              :rules=\"[(v) => !!v || 'Apellido Materno requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.numeroTelefonico\"\n              label=\"N炭mero Telef坦nico\"\n              type=\"number\"\n              required\n              :rules=\"[(v) => !!v || 'N炭mero Telef坦nico requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.correo\"\n              label=\"Correo Electr坦nico\"\n              required\n              :rules=\"[(v) => !!v || 'Correo requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.contrase単a\"\n              label=\"Contrase単a\"\n              type=\"password\"\n              required\n              :rules=\"[(v) => !!v || 'Contrase単a requerida']\"\n            ></v-text-field>\n            <div>\n              <v-select\n                v-model=\"teacher.alumnos\"\n                :items=\"students\"\n                label=\"Selecciona alumnos (max 5)\"\n                multiple\n                chips\n                required\n                :rules=\"[(v) => !!v || 'Alumnos requeridos']\"\n                @update:modelValue=\"limitSelection(true)\"\n              ></v-select>\n            </div>\n            <!-- Add more fields as needed -->\n          </v-card-text>\n          <v-card-actions>\n            <v-btn\n              color=\"blue darken-2\"\n              @click=\"saveNewTeacher\"\n              :disabled=\"!isCreateFormValid\"\n              >Guardar</v-btn\n            >\n            <v-btn @click=\"cancelCreate\">Cancelar</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n\n      <FilesDialog\n  :isOpen=\"showFilesDialog\"\n  @update:isOpen=\"showFilesDialog = $event\"\n/>\n\n    </v-container>\n  </v-app>\n</template>\n\n<script>\nimport axios from 'axios'\nimport FilesDialog from './FilesDialog.vue'\n\nexport default {\n  components: {\n    FilesDialog\n  },\n  data () {\n    return {\n      selectedStudent: null,\n      showFilesDialog: false,\n      studentProjectNames: {},\n      students: [],\n      selectedOptions: [],\n      teachers: [],\n      sidebarItems: [\n        { title: 'Proyectos', icon: 'mdi-folder-outline' },\n        { title: 'Alumnos', icon: 'mdi-account-plus-outline' },\n        { title: 'Maestros', icon: 'mdi-account-tie' }\n      ],\n      userName: localStorage.getItem('userName'),\n      drawer: false,\n      editDialog: false,\n      teacher: {\n        _id: '',\n        nombre: '',\n        apellido: '',\n        correo: '',\n        contrase単a: '',\n        alumnos: [],\n        apellidoM: '',\n        numeroTelefonico: ''\n        // Add more fields as needed\n      },\n      createDialog: false,\n      showAssignedStudentsDialog: false,\n      assignedStudents: [],\n      search: ''\n    }\n  },\n  computed: {\n    isCreateFormValid () {\n      // Check if the form reference exists\n      if (!this.$refs.editDialogForm) {\n        return false\n      }\n\n      // Manually validate each field\n      return (\n        this.teacher._id &&\n        this.teacher.contrase単a &&\n        this.teacher.nombre &&\n        this.teacher.apellido &&\n        this.teacher.apellidoM &&\n        this.teacher.numeroTelefonico &&\n        this.teacher.correo &&\n        this.teacher.alumnos\n      )\n    },\n    isEditFormValid () {\n      // Check if the form reference exists\n      if (!this.$refs.editDialogForm) {\n        return false\n      }\n\n      // Manually validate each field\n      return (\n        this.teacher.nombre &&\n        this.teacher.apellido &&\n        this.teacher.apellidoM &&\n        this.teacher.numeroTelefonico &&\n        this.teacher.alumnos\n      )\n    }\n  },\n  methods: {\n    openFilesDialog (student) {\n      this.selectedStudent = student\n      this.showFilesDialog = true // Open the dialog with the student's files\n    },\n    limitSelection (isNewUser) {\n      if (isNewUser && this.teacher.alumnos.length > 5) {\n        alert('You can only select a maximum of 5 options.')\n        this.teacher.alumnos = this.teacher.alumnos.slice(0, 5)\n      } else if (!isNewUser && this.teacher.alumnos.length > 5) {\n        alert('You can only select a maximum of 5 options.')\n        this.teacher.alumnos = this.teacher.alumnos.slice(0, 5)\n      }\n    },\n    async fetchData () {\n      try {\n        const response = await axios.get('http://localhost:3000/teachers')\n        this.teachers = response.data\n      } catch (error) {\n        console.error('Error fetching teachers:', error)\n      }\n    },\n\n    async fetchStudents () {\n      try {\n        const studentsResponse = await axios.get(\n          'http://localhost:3000/students'\n        )\n        const allStudents = studentsResponse.data\n\n        // Filter out students who are not assigned to any teacher\n        const unassignedStudents = allStudents.filter((student) => {\n          return !this.teachers.some((teacher) =>\n            teacher.alumnos.includes(student._id)\n          )\n        })\n\n        const assignedStudents = allStudents.filter((student) => {\n          return this.teachers.some((teacher) =>\n            teacher.alumnos.includes(student._id)\n          )\n        })\n\n        // Include the teacher's ID in the assignedStudents array\n        const updatedAssignedStudents = assignedStudents.map((student) => ({\n          ...student,\n          teacherId: student.teacherId // Ensure each student object has a teacherId property\n        }))\n\n        // Fetch project names for each student's project\n        const projectNamesPromises = updatedAssignedStudents.map(\n          async (student) => {\n            const projectName = await this.getProjectName(student.proyecto)\n            return { ...student, projectName }\n          }\n        )\n\n        // Wait for all project names to be fetched\n        this.assignedStudents = await Promise.all(projectNamesPromises)\n\n        // Extract just the names from the unassigned students data\n        this.students = unassignedStudents.map((student) => student._id)\n      } catch (error) {\n        console.error('Error fetching students:', error)\n      }\n    },\n\n    async showAssignedStudents (teacher, event) {\n      event.stopPropagation()\n      // Filter assignedStudents to include only those assigned to the current teacher\n      await this.fetchStudents()\n      this.assignedStudents = this.assignedStudents.filter((student) =>\n        teacher.alumnos.includes(student._id)\n      )\n      this.showAssignedStudentsDialog = true\n    },\n\n    async navigate (index) {\n      switch (index) {\n        case 0:\n          this.$router.push('/admin')\n          break\n        case 1:\n          this.$router.push('/admin/students')\n          break\n        case 2:\n          this.$router.push('/admin/teachers')\n          break\n        default:\n          break\n      }\n    },\n    logout () {\n      // Logic to logout the user\n      // For example, you can clear any user data or tokens stored in localStorage\n      localStorage.removeItem('token')\n\n      // Redirect the user to the login page\n      this.$router.push('/login')\n    },\n    async editUser (teacher, event) {\n      event.stopPropagation()\n      // Assign the teacher data to editedTeacher\n      await this.fetchStudents()\n      this.teacher = { ...teacher }\n\n      // If editedTeacher has alumnos property, add its students to the students array\n      if (this.teacher.alumnos && Array.isArray(this.teacher.alumnos)) {\n        this.students = [...this.students, ...this.teacher.alumnos]\n      }\n\n      // Open the edit dialog\n      this.editDialog = true\n    },\n\n    async saveEditedTeacher () {\n      try {\n        // Send the updated teacher data to the server\n        const response = await axios.put(\n          `http://localhost:3000/users/${this.teacher._id}`,\n          this.teacher\n        )\n\n        console.log('Teacher updated successfully:', response.data)\n        this.fetchData()\n      } catch (error) {\n        console.error('Error updating teacher:', error)\n      }\n      this.editDialog = false\n    },\n\n    cancelEdit () {\n      this.editDialog = false\n    },\n    openCreateDialog () {\n      this.resetTeacher()\n      this.createDialog = true\n      this.fetchStudents()\n    },\n    async saveNewTeacher () {\n      try {\n        // Add 'rol' field with value 'teacher'\n        this.teacher.rol = 'teacher'\n\n        const response = await axios.post(\n          'http://localhost:3000/register',\n          this.teacher\n        )\n        if (response.status === 201) {\n          console.log('Teacher created successfully:', response.data)\n          this.fetchData()\n        } else {\n          console.error('Failed to create teacher:', response.data)\n        }\n      } catch (error) {\n        console.error('Error creating teacher:', error)\n      }\n      this.createDialog = false\n    },\n\n    cancelCreate () {\n      this.createDialog = false\n    },\n    async deleteTeacher (teacherId, event) {\n      event.stopPropagation()\n      try {\n        const response = await axios.delete(\n          `http://localhost:3000/users/${teacherId}`\n        )\n        console.log('Teacher deleted successfully:', response.data)\n        this.fetchData() // Call a method to update the UI or fetch updated data\n      } catch (error) {\n        console.error('Error deleting teacher:', error)\n      }\n    },\n\n    async getProjectName (projectId) {\n      try {\n        const response = await axios.get(\n          `http://localhost:3000/projects/${projectId}`\n        )\n        const data = response.data // Assuming the project name is stored in the 'name' field\n        return data.nombre\n      } catch (error) {\n        console.error('Error fetching project name:', error)\n        return 'Unknown' // Return a default value if an error occurs\n      }\n    },\n    async renderProjectName (projectId) {\n      const projectName = await this.getProjectName(projectId)\n      this.studentProjectNames[projectId] = projectName // Store the project name\n    },\n\n    handleRowClick (item) {\n      // Handle row click event here\n      console.log('Row clicked:', item)\n      // Navigate to a new page and pass the user's ID as route parameters\n      this.$router.push({\n        name: 'UserDetails',\n        params: { userId: item._id }\n      })\n    },\n\n    resetTeacher () {\n      this.teacher = {\n        _id: '',\n        nombre: '',\n        apellido: '',\n        correo: '',\n        contrase単a: '',\n        alumnos: [],\n        apellidoM: '',\n        numeroTelefonico: ''\n      }\n    }\n  },\n  mounted () {\n    this.fetchData()\n    this.fetchStudents()\n  }\n}\n</script>\n\n<style scoped>\n.v-btn i {\n  color: white;\n}\n\n.clickable-row:hover {\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}