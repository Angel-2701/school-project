{"ast":null,"code":"import \"core-js/modules/web.dom-exception.stack.js\";\nimport { createRouter, createWebHistory } from 'vue-router';\nimport LoginPage from '../components/LoginPage.vue';\nimport AdminPage from '../components/AdminPage.vue';\nimport StudentPage from '../components/StudentPage.vue';\nimport TeacherPage from '../components/TeacherPage.vue';\nimport StudentsPage from '../components/StudentsPage.vue';\nimport TeachersPage from '../components/TeachersPage.vue';\nimport UserDetails from '../components/UserDetails.vue';\nimport ProjectTable from '../components/ProjectTable.vue';\nimport AsesoriasAlumno from '../components/Asesorias.vue';\nconst routes = [{\n  path: '/',\n  name: 'Login',\n  component: LoginPage\n}, {\n  path: '/Login',\n  name: 'Login',\n  component: LoginPage\n}, {\n  path: '/Admin',\n  name: 'Admin',\n  component: AdminPage,\n  meta: {\n    requiresAuth: true,\n    role: 'admin'\n  }\n}, {\n  path: '/Student',\n  name: 'Student',\n  component: StudentPage,\n  meta: {\n    requiresAuth: true,\n    role: 'student'\n  }\n}, {\n  path: '/admin/Students',\n  name: 'Students',\n  component: StudentsPage,\n  meta: {\n    requiresAuth: true,\n    role: 'admin'\n  }\n}, {\n  path: '/admin/Teachers',\n  name: 'Teachers',\n  component: TeachersPage,\n  meta: {\n    requiresAuth: true,\n    role: 'admin'\n  }\n}, {\n  path: '/teacher/projects',\n  name: 'TeacherProjects',\n  component: TeacherPage,\n  meta: {\n    requiresAuth: true,\n    role: 'teacher'\n  }\n}, {\n  path: '/user-details/:userId',\n  name: 'UserDetails',\n  component: UserDetails,\n  meta: {\n    requiresAuth: true,\n    role: ['admin', 'teacher']\n  }\n}, {\n  path: '/teacher/projects/:projectId',\n  name: 'ProjectTable',\n  component: ProjectTable,\n  // Your component for displaying project details\n  props: true\n}, {\n  path: '/student/asesorias/',\n  name: 'AsesoriasAlumno',\n  component: AsesoriasAlumno,\n  // Your component for displaying project details\n  meta: {\n    requiresAuth: true,\n    role: 'student'\n  }\n}];\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n});\nrouter.beforeEach((to, from, next) => {\n  const token = localStorage.getItem('token');\n  const requiresAuth = to.matched.some(record => record.meta.requiresAuth);\n  const userRole = token ? parseToken(token).rol : null;\n  if (to.path === '/' || requiresAuth && !token) {\n    // Redirect to login page if accessing root path or if authentication is required but token is not present\n    next('/login');\n  } else if (requiresAuth && !to.meta.role.includes(userRole)) {\n    // Redirect to corresponding role page if user role does not match the route's required role\n    switch (userRole) {\n      case 'admin':\n        next('/Admin');\n        break;\n      case 'student':\n        next('/Student');\n        break;\n      case 'teacher':\n        next('/Teacher');\n        break;\n      default:\n        // Redirect to login page if user role is invalid\n        next('/login');\n    }\n  } else {\n    // Allow access to the route\n    next();\n  }\n});\nfunction parseToken(token) {\n  // Assuming the token is in JWT format with a payload containing the user's role\n  const [, payloadBase64] = token.split('.');\n  const payloadJson = atob(payloadBase64);\n  const payload = JSON.parse(payloadJson);\n  return payload;\n}\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","LoginPage","AdminPage","StudentPage","TeacherPage","StudentsPage","TeachersPage","UserDetails","ProjectTable","AsesoriasAlumno","routes","path","name","component","meta","requiresAuth","role","props","router","history","process","env","BASE_URL","beforeEach","to","from","next","token","localStorage","getItem","matched","some","record","userRole","parseToken","rol","includes","payloadBase64","split","payloadJson","atob","payload","JSON","parse"],"sources":["/Users/angel/school-project/my-app/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router'\nimport LoginPage from '../components/LoginPage.vue'\nimport AdminPage from '../components/AdminPage.vue'\nimport StudentPage from '../components/StudentPage.vue'\nimport TeacherPage from '../components/TeacherPage.vue'\nimport StudentsPage from '../components/StudentsPage.vue'\nimport TeachersPage from '../components/TeachersPage.vue'\nimport UserDetails from '../components/UserDetails.vue'\nimport ProjectTable from '../components/ProjectTable.vue'\nimport AsesoriasAlumno from '../components/Asesorias.vue'\n\nconst routes = [\n  {\n    path: '/',\n    name: 'Login',\n    component: LoginPage\n  },\n  {\n    path: '/Login',\n    name: 'Login',\n    component: LoginPage\n  },\n  {\n    path: '/Admin',\n    name: 'Admin',\n    component: AdminPage,\n    meta: { requiresAuth: true, role: 'admin' }\n  },\n  {\n    path: '/Student',\n    name: 'Student',\n    component: StudentPage,\n    meta: { requiresAuth: true, role: 'student' }\n  },\n  {\n    path: '/admin/Students',\n    name: 'Students',\n    component: StudentsPage,\n    meta: { requiresAuth: true, role: 'admin' }\n  },\n  {\n    path: '/admin/Teachers',\n    name: 'Teachers',\n    component: TeachersPage,\n    meta: { requiresAuth: true, role: 'admin' }\n  },\n  {\n    path: '/teacher/projects',\n    name: 'TeacherProjects',\n    component: TeacherPage,\n    meta: { requiresAuth: true, role: 'teacher' }\n  },\n  {\n    path: '/user-details/:userId',\n    name: 'UserDetails',\n    component: UserDetails,\n    meta: { requiresAuth: true, role: ['admin', 'teacher'] }\n  },\n  {\n    path: '/teacher/projects/:projectId',\n    name: 'ProjectTable',\n    component: ProjectTable, // Your component for displaying project details\n    props: true\n  },\n  {\n    path: '/student/asesorias/',\n    name: 'AsesoriasAlumno',\n    component: AsesoriasAlumno, // Your component for displaying project details\n    meta: { requiresAuth: true, role: 'student' }\n  }\n]\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n})\n\nrouter.beforeEach((to, from, next) => {\n  const token = localStorage.getItem('token')\n  const requiresAuth = to.matched.some((record) => record.meta.requiresAuth)\n  const userRole = token ? parseToken(token).rol : null\n\n  if (to.path === '/' || (requiresAuth && !token)) {\n    // Redirect to login page if accessing root path or if authentication is required but token is not present\n    next('/login')\n  } else if (requiresAuth && !to.meta.role.includes(userRole)) {\n    // Redirect to corresponding role page if user role does not match the route's required role\n    switch (userRole) {\n      case 'admin':\n        next('/Admin')\n        break\n      case 'student':\n        next('/Student')\n        break\n      case 'teacher':\n        next('/Teacher')\n        break\n      default:\n        // Redirect to login page if user role is invalid\n        next('/login')\n    }\n  } else {\n    // Allow access to the route\n    next()\n  }\n})\n\nfunction parseToken (token) {\n  // Assuming the token is in JWT format with a payload containing the user's role\n  const [, payloadBase64] = token.split('.')\n  const payloadJson = atob(payloadBase64)\n  const payload = JSON.parse(payloadJson)\n  return payload\n}\n\nexport default router\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}