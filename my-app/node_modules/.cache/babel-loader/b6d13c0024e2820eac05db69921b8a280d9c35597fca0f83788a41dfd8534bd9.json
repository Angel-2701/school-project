{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport ProjectCard from '@/components/ProjectCard.vue';\nexport default {\n  components: {\n    ProjectCard\n  },\n  data() {\n    return {\n      editDialog: false,\n      editedProjectName: '',\n      editedProjectId: '',\n      createDialog: false,\n      newProject: {\n        name: '',\n        company: '',\n        _id: ''\n      },\n      showProjects: true,\n      projects: [],\n      users: [],\n      sidebarItems: [{\n        title: 'Projects',\n        icon: 'mdi-folder-outline'\n      }],\n      userName: 'John Doe',\n      drawer: false,\n      selectedProject: {} // Add selectedProject property to hold the selected project name\n    };\n  },\n  methods: {\n    async fetchData2() {\n      try {\n        // Fetch the selected project\n        const response = await axios.get(`http://localhost:3000/projects?name=${this.selectedProject_}`);\n        const selectedProject = response.data[0];\n\n        // Fetch all students\n        const studentsResponse = await axios.get('http://localhost:3000/students');\n        const allStudents = studentsResponse.data;\n\n        // Filter students based on the selected project\n        const filteredStudents = allStudents.filter(student => student.project === selectedProject._id);\n\n        // Save filtered students to this.users\n        this.users = filteredStudents;\n\n        // If you need additional information about the project itself, you can assign it to a separate variable\n        this.selectedProjectInfo = selectedProject;\n      } catch (error) {\n        console.error('Error fetching users:', error);\n      }\n    },\n    async fetchData() {\n      try {\n        const response = await axios.get('http://localhost:3000/projects');\n        this.projects = response.data;\n      } catch (error) {\n        console.error('Error fetching projects:', error);\n      }\n    },\n    editProject(project) {\n      this.editedProjectName = project.name;\n      this.editedProjectId = project._id;\n      this.editDialog = true;\n    },\n    saveEditedProject() {\n      const updatedProject = {\n        name: this.editedProjectName // Assuming the only editable field is the project name\n      };\n      axios.put(`http://localhost:3000/projects/${this.editedProjectId}`, updatedProject).then(response => {\n        if (response.status === 200) {\n          console.log('Project updated successfully:', response.data);\n          this.fetchData();\n        } else {\n          console.error('Failed to update project:', response.data);\n        }\n      }).catch(error => {\n        console.error('Error updating project:', error);\n      });\n      this.editDialog = false;\n    },\n    deleteProject(project) {\n      if (confirm('Are you sure you want to delete this project?')) {\n        axios.delete(`http://localhost:3000/projects/${project._id}`).then(response => {\n          if (response.status === 200) {\n            console.log('Project deleted successfully:', response.data);\n            this.fetchData();\n          } else {\n            console.error('Failed to delete project:', response.data);\n          }\n        }).catch(error => {\n          console.error('Error deleting project:', error);\n        });\n      }\n    },\n    openCreateDialog() {\n      this.createDialog = true;\n    },\n    saveNewProject() {\n      axios.post('http://localhost:3000/projects', this.newProject).then(response => {\n        if (response.status === 201) {\n          console.log('Project created successfully:', response.data);\n          this.fetchData();\n        } else {\n          console.error('Failed to create project:', response.data);\n        }\n      }).catch(error => {\n        console.error('Error creating project:', error);\n      });\n      this.createDialog = false;\n    },\n    cancelCreate() {\n      this.createDialog = false;\n    },\n    cancelEdit() {\n      this.editDialog = false;\n    },\n    onClick(project) {\n      this.fetchData2();\n      // Set the selected project name\n      this.selectedProject = project.name;\n      // Emit a click event when the card is clicked\n      this.showProjects = false;\n    },\n    navigate(index) {\n      switch (index) {\n        case 0:\n          this.$router.push('/Teacher/Projects');\n          break;\n        case 1:\n          this.$router.push('/Students');\n          break;\n        case 2:\n          this.$router.push('/Teachers');\n          break;\n        default:\n          break;\n      }\n    },\n    logout() {\n      localStorage.removeItem('token');\n      this.$router.push('/login');\n    }\n  },\n  mounted() {\n    this.fetchData();\n  }\n};","map":{"version":3,"names":["axios","ProjectCard","components","data","editDialog","editedProjectName","editedProjectId","createDialog","newProject","name","company","_id","showProjects","projects","users","sidebarItems","title","icon","userName","drawer","selectedProject","methods","fetchData2","response","get","selectedProject_","studentsResponse","allStudents","filteredStudents","filter","student","project","selectedProjectInfo","error","console","fetchData","editProject","saveEditedProject","updatedProject","put","then","status","log","catch","deleteProject","confirm","delete","openCreateDialog","saveNewProject","post","cancelCreate","cancelEdit","onClick","navigate","index","$router","push","logout","localStorage","removeItem","mounted"],"sources":["/Users/angel/school-project/my-app/src/components/TeacherPage.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-container>\n      <!-- Top Bar -->\n      <v-app-bar app color=\"blue darken-2\" dark>\n        <!-- Burger menu icon -->\n        <v-btn icon @click=\"drawer = !drawer\">\n          <v-icon>mdi-menu</v-icon>\n        </v-btn>\n        <!-- Title -->\n        <v-toolbar-title>{{ userName }}</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <!-- Logout button -->\n        <v-btn icon @click=\"logout\">\n          <v-icon>mdi-logout</v-icon>\n        </v-btn>\n      </v-app-bar>\n\n      <!-- Sidebar -->\n      <v-navigation-drawer app v-model=\"drawer\" color=\"blue darken-2\" dark>\n        <v-list dense>\n          <v-list-item\n            v-for=\"(item, index) in sidebarItems\"\n            :key=\"index\"\n            @click=\"navigate(index)\"\n          >\n            <v-list-item-action>\n              <v-icon>{{ item.icon }}</v-icon>\n            </v-list-item-action>\n            <v-list-item-content>\n              <v-list-item-title>{{ item.title }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n        </v-list>\n      </v-navigation-drawer>\n\n      <v-main v-if=\"showProjects\">\n        <!-- Main content -->\n        <v-row>\n          <v-col\n            v-for=\"project in projects\"\n            :key=\"project.id\"\n            cols=\"12\"\n            sm=\"6\"\n            md=\"4\"\n            lg=\"3\"\n            xl=\"2\"\n          >\n            <ProjectCard\n              :projectName=\"project.name\"\n              @click=\"onClick(project._id)\"\n            />\n          </v-col>\n        </v-row>\n      </v-main>\n\n      <template v-else>\n        <v-main>\n          <!-- Main content -->\n          <v-col cols=\"12\" style=\"max-width: 1500px; margin: 0px auto\">\n            <v-card class=\"text-center\" style=\"width: 100%; margin: 0px auto\">\n              <!-- Projects Data -->\n              <v-data-table\n                v-if=\"users.length > 0\"\n                :items=\"users\"\n                align=\"center\"\n              >\n                <template v-slot:top>\n                  <v-toolbar flat color=\"blue darken-2\">\n                    <v-toolbar-title>{{ selectedProject.name }}</v-toolbar-title>\n                    <v-divider class=\"mx-4\" inset vertical></v-divider>\n                    <v-spacer></v-spacer>\n                    <v-btn icon color=\"blue darken-2\" @click=\"openCreateDialog\">\n                      <v-icon>mdi-plus</v-icon>\n                    </v-btn>\n                  </v-toolbar>\n                </template>\n                <template v-slot:item=\"{ item }\">\n                  <tr>\n                    <td v-for=\"(value, key) in item\" :key=\"key\">\n                      {{ value }}\n                    </td>\n                    <td>\n                      <!-- Use small prop to make the buttons smaller -->\n                      <v-btn\n                        icon\n                        small\n                        color=\"blue darken-2\"\n                        @click=\"editProject(item)\"\n                        style=\"width: 30px; height: 30px; margin-right: 5px\"\n                      >\n                        <v-icon style=\"font-size: 18px\">mdi-pencil</v-icon>\n                      </v-btn>\n                      <v-btn\n                        icon\n                        small\n                        color=\"red darken-2\"\n                        @click=\"deleteProject(item)\"\n                        style=\"width: 30px; height: 30px; margin-right: 5px\"\n                      >\n                        <v-icon style=\"font-size: 18px\">mdi-delete</v-icon>\n                      </v-btn>\n                    </td>\n                  </tr>\n                </template>\n              </v-data-table>\n            </v-card>\n          </v-col>\n        </v-main>\n      </template>\n    </v-container>\n  </v-app>\n</template>\n\n<script>\nimport axios from 'axios'\nimport ProjectCard from '@/components/ProjectCard.vue'\n\nexport default {\n  components: {\n    ProjectCard\n  },\n  data () {\n    return {\n      editDialog: false,\n      editedProjectName: '',\n      editedProjectId: '',\n      createDialog: false,\n      newProject: {\n        name: '',\n        company: '',\n        _id: ''\n      },\n      showProjects: true,\n      projects: [],\n      users: [],\n      sidebarItems: [{ title: 'Projects', icon: 'mdi-folder-outline' }],\n      userName: 'John Doe',\n      drawer: false,\n      selectedProject: {}, // Add selectedProject property to hold the selected project name\n    }\n  },\n  methods: {\n    async fetchData2 () {\n      try {\n        // Fetch the selected project\n        const response = await axios.get(\n          `http://localhost:3000/projects?name=${this.selectedProject_}`\n        )\n        const selectedProject = response.data[0]\n\n        // Fetch all students\n        const studentsResponse = await axios.get(\n          'http://localhost:3000/students'\n        )\n        const allStudents = studentsResponse.data\n\n        // Filter students based on the selected project\n        const filteredStudents = allStudents.filter(\n          (student) => student.project === selectedProject._id\n        )\n\n        // Save filtered students to this.users\n        this.users = filteredStudents\n\n        // If you need additional information about the project itself, you can assign it to a separate variable\n        this.selectedProjectInfo = selectedProject\n      } catch (error) {\n        console.error('Error fetching users:', error)\n      }\n    },\n\n    async fetchData () {\n      try {\n        const response = await axios.get('http://localhost:3000/projects')\n        this.projects = response.data\n      } catch (error) {\n        console.error('Error fetching projects:', error)\n      }\n    },\n    editProject (project) {\n      this.editedProjectName = project.name\n      this.editedProjectId = project._id\n      this.editDialog = true\n    },\n    saveEditedProject () {\n      const updatedProject = {\n        name: this.editedProjectName // Assuming the only editable field is the project name\n      }\n\n      axios\n        .put(\n          `http://localhost:3000/projects/${this.editedProjectId}`,\n          updatedProject\n        )\n        .then((response) => {\n          if (response.status === 200) {\n            console.log('Project updated successfully:', response.data)\n            this.fetchData()\n          } else {\n            console.error('Failed to update project:', response.data)\n          }\n        })\n        .catch((error) => {\n          console.error('Error updating project:', error)\n        })\n\n      this.editDialog = false\n    },\n\n    deleteProject (project) {\n      if (confirm('Are you sure you want to delete this project?')) {\n        axios\n          .delete(`http://localhost:3000/projects/${project._id}`)\n          .then((response) => {\n            if (response.status === 200) {\n              console.log('Project deleted successfully:', response.data)\n              this.fetchData()\n            } else {\n              console.error('Failed to delete project:', response.data)\n            }\n          })\n          .catch((error) => {\n            console.error('Error deleting project:', error)\n          })\n      }\n    },\n    openCreateDialog () {\n      this.createDialog = true\n    },\n    saveNewProject () {\n      axios\n        .post('http://localhost:3000/projects', this.newProject)\n        .then((response) => {\n          if (response.status === 201) {\n            console.log('Project created successfully:', response.data)\n            this.fetchData()\n          } else {\n            console.error('Failed to create project:', response.data)\n          }\n        })\n        .catch((error) => {\n          console.error('Error creating project:', error)\n        })\n      this.createDialog = false\n    },\n    cancelCreate () {\n      this.createDialog = false\n    },\n\n    cancelEdit () {\n      this.editDialog = false\n    },\n    onClick (project) {\n      this.fetchData2()\n      // Set the selected project name\n      this.selectedProject = project.name\n      // Emit a click event when the card is clicked\n      this.showProjects = false\n    },\n    navigate (index) {\n      switch (index) {\n        case 0:\n          this.$router.push('/Teacher/Projects')\n          break\n        case 1:\n          this.$router.push('/Students')\n          break\n        case 2:\n          this.$router.push('/Teachers')\n          break\n        default:\n          break\n      }\n    },\n    logout () {\n      localStorage.removeItem('token')\n      this.$router.push('/login')\n    }\n  },\n  mounted () {\n    this.fetchData()\n  }\n}\n</script>\n\n<style scoped>\n/* Adjustments for burger menu icon color */\n.v-btn i {\n  color: white;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}