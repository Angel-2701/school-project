{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      studentProjectNames: {},\n      students: [],\n      selectedOptions: [],\n      teachers: [],\n      sidebarItems: [{\n        title: 'Projects',\n        icon: 'mdi-folder-outline'\n      }, {\n        title: 'Students',\n        icon: 'mdi-account-plus-outline'\n      }, {\n        title: 'Teachers',\n        icon: 'mdi-account-tie'\n      }],\n      userName: 'John Doe',\n      drawer: false,\n      editDialog: false,\n      editedTeacher: {\n        _id: '',\n        nombre: '',\n        apellido: '',\n        correo: '',\n        contraseña: '',\n        alumnos: [],\n        apellidoM: ''\n        // Add more fields as needed\n      },\n      createDialog: false,\n      newTeacher: {\n        nombre: '',\n        apellido: '',\n        correo: '',\n        contraseña: '',\n        apellidoM: ''\n        // Add more fields as needed\n      },\n      showAssignedStudentsDialog: false,\n      assignedStudents: []\n    };\n  },\n  methods: {\n    limitSelection() {\n      if (this.selectedOptions.length > 5) {\n        alert('You can only select a maximum of 5 options.');\n        this.selectedOptions = this.selectedOptions.slice(0, 5);\n      }\n    },\n    async fetchData() {\n      try {\n        const response = await axios.get('http://localhost:3000/teachers');\n        this.teachers = response.data;\n      } catch (error) {\n        console.error('Error fetching teachers:', error);\n      }\n    },\n    async fetchStudents() {\n      try {\n        const studentsResponse = await axios.get('http://localhost:3000/students');\n        const allStudents = studentsResponse.data;\n\n        // Filter out students who are not assigned to any teacher\n        const unassignedStudents = allStudents.filter(student => {\n          return !this.teachers.some(teacher => teacher.alumnos.includes(student._id));\n        });\n        const assignedStudents = allStudents.filter(student => {\n          return this.teachers.some(teacher => teacher.alumnos.includes(student._id));\n        });\n\n        // Include the teacher's ID in the assignedStudents array\n        const updatedAssignedStudents = assignedStudents.map(student => ({\n          ...student,\n          teacherId: student.teacherId // Ensure each student object has a teacherId property\n        }));\n\n        // Fetch project names for each student's project\n        const projectNamesPromises = updatedAssignedStudents.map(async student => {\n          const projectName = await this.getProjectName(student.project);\n          return {\n            ...student,\n            projectName\n          };\n        });\n\n        // Wait for all project names to be fetched\n        this.assignedStudents = await Promise.all(projectNamesPromises);\n\n        // Extract just the names from the unassigned students data\n        this.students = unassignedStudents.map(student => student._id);\n      } catch (error) {\n        console.error('Error fetching students:', error);\n      }\n    },\n    async showAssignedStudents(teacher) {\n      // Filter assignedStudents to include only those assigned to the current teacher\n      await this.fetchStudents();\n      this.assignedStudents = this.assignedStudents.filter(student => teacher.alumnos.includes(student._id));\n      this.showAssignedStudentsDialog = true;\n    },\n    async navigate(index) {\n      switch (index) {\n        case 0:\n          this.$router.push('/admin');\n          break;\n        case 1:\n          this.$router.push('/admin/students');\n          break;\n        case 2:\n          this.$router.push('/admin/teachers');\n          break;\n        default:\n          break;\n      }\n    },\n    logout() {\n      // Logic to logout the user\n      // For example, you can clear any user data or tokens stored in localStorage\n      localStorage.removeItem('token');\n\n      // Redirect the user to the login page\n      this.$router.push('/login');\n    },\n    editUser(teacher) {\n      // Assign the teacher data to editedTeacher\n      this.editedTeacher = {\n        ...teacher\n      };\n\n      // If editedTeacher has alumnos property, add its students to the students array\n      if (this.editedTeacher.alumnos && Array.isArray(this.editedTeacher.alumnos)) {\n        this.students = [...this.students, ...this.editedTeacher.alumnos];\n      }\n\n      // Open the edit dialog\n      this.editDialog = true;\n    },\n    async saveEditedTeacher() {\n      try {\n        // Send the updated teacher data to the server\n        const response = await axios.put(`http://localhost:3000/users/${this.editedTeacher._id}`, this.editedTeacher);\n        console.log('Teacher updated successfully:', response.data);\n        this.fetchData();\n      } catch (error) {\n        console.error('Error updating teacher:', error);\n      }\n      this.editDialog = false;\n    },\n    cancelEdit() {\n      this.editDialog = false;\n    },\n    openCreateDialog() {\n      this.createDialog = true;\n      this.fetchStudents();\n    },\n    async saveNewTeacher() {\n      try {\n        // Add 'rol' field with value 'teacher'\n        this.newTeacher.rol = 'teacher';\n        const response = await axios.post('http://localhost:3000/register', this.newTeacher);\n        if (response.status === 201) {\n          console.log('Teacher created successfully:', response.data);\n          this.fetchData();\n        } else {\n          console.error('Failed to create teacher:', response.data);\n        }\n      } catch (error) {\n        console.error('Error creating teacher:', error);\n      }\n      this.createDialog = false;\n    },\n    cancelCreate() {\n      this.createDialog = false;\n    },\n    async deleteTeacher(teacherId) {\n      try {\n        const response = await axios.delete(`http://localhost:3000/users/${teacherId}`);\n        console.log('Teacher deleted successfully:', response.data);\n        this.fetchData(); // Call a method to update the UI or fetch updated data\n      } catch (error) {\n        console.error('Error deleting teacher:', error);\n      }\n    },\n    async getProjectName(projectId) {\n      try {\n        const response = await axios.get(`http://localhost:3000/projects/${projectId}`);\n        const data = response.data; // Assuming the project name is stored in the 'name' field\n        return data.name;\n      } catch (error) {\n        console.error('Error fetching project name:', error);\n        return 'Unknown'; // Return a default value if an error occurs\n      }\n    },\n    async renderProjectName(projectId) {\n      const projectName = await this.getProjectName(projectId);\n      this.studentProjectNames[projectId] = projectName; // Store the project name\n    }\n  },\n  mounted() {\n    this.fetchData();\n    this.fetchStudents();\n  }\n};","map":{"version":3,"names":["axios","data","studentProjectNames","students","selectedOptions","teachers","sidebarItems","title","icon","userName","drawer","editDialog","editedTeacher","_id","nombre","apellido","correo","contraseña","alumnos","apellidoM","createDialog","newTeacher","showAssignedStudentsDialog","assignedStudents","methods","limitSelection","length","alert","slice","fetchData","response","get","error","console","fetchStudents","studentsResponse","allStudents","unassignedStudents","filter","student","some","teacher","includes","updatedAssignedStudents","map","teacherId","projectNamesPromises","projectName","getProjectName","project","Promise","all","showAssignedStudents","navigate","index","$router","push","logout","localStorage","removeItem","editUser","Array","isArray","saveEditedTeacher","put","log","cancelEdit","openCreateDialog","saveNewTeacher","rol","post","status","cancelCreate","deleteTeacher","delete","projectId","name","renderProjectName","mounted"],"sources":["/Users/angel/school-project/my-app/src/components/TeachersPage.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-container fluid>\n      <!-- Top Bar -->\n      <v-app-bar app color=\"blue darken-2\" dark>\n        <!-- Burger menu icon -->\n        <v-btn icon @click=\"drawer = !drawer\">\n          <v-icon>mdi-menu</v-icon>\n        </v-btn>\n        <!-- Title -->\n        <v-toolbar-title>{{ userName }}</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <!-- Logout button -->\n        <v-btn icon @click=\"logout\">\n          <v-icon>mdi-logout</v-icon>\n        </v-btn>\n      </v-app-bar>\n\n      <!-- Sidebar -->\n      <v-navigation-drawer app v-model=\"drawer\" color=\"blue darken-2\" dark>\n        <v-list dense>\n          <v-list-item\n            v-for=\"(item, index) in sidebarItems\"\n            :key=\"index\"\n            @click=\"navigate(index)\"\n          >\n            <v-list-item-action>\n              <v-icon>{{ item.icon }}</v-icon>\n            </v-list-item-action>\n            <v-list-item-content>\n              <v-list-item-title>{{ item.title }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n        </v-list>\n      </v-navigation-drawer>\n\n      <v-main>\n        <!-- Main content -->\n        <v-col cols=\"12\" style=\"max-width: 1500px; margin: 0px auto\">\n          <v-card class=\"text-center\" style=\"width: 100%; margin: 0px auto\">\n            <!-- Teachers Data -->\n            <v-data-table\n              v-if=\"teachers.length > 0\"\n              :items=\"teachers\"\n              align=\"center\"\n            >\n              <template v-slot:top>\n                <v-toolbar flat color=\"blue darken-2\">\n                  <v-toolbar-title>Teachers</v-toolbar-title>\n                  <v-divider class=\"mx-4\" inset vertical></v-divider>\n                  <v-spacer></v-spacer>\n                  <v-btn icon color=\"blue darken-2\" @click=\"openCreateDialog\">\n                    <v-icon>mdi-plus</v-icon>\n                  </v-btn>\n                </v-toolbar>\n              </template>\n              <template v-slot:item=\"{ item }\">\n                <tr>\n                  <td>{{ item._id }}</td>\n                  <td>{{ item.correo }}</td>\n                  <td>{{ item.apellido }}</td>\n                  <td>{{ item.nombre }}</td>\n                  <td>\n                    <v-btn\n                      small\n                      color=\"blue darken-2\"\n                      @click=\"showAssignedStudents(item)\"\n                    >\n                      {{ item.alumnos.length }} Students\n                    </v-btn>\n                  </td>\n                  <td>\n                    <v-btn\n                      icon\n                      small\n                      color=\"blue darken-2\"\n                      @click=\"editUser(item)\"\n                      style=\"width: 30px; height: 30px; margin-right: 5px\"\n                    >\n                      <v-icon style=\"font-size: 18px\">mdi-pencil</v-icon>\n                    </v-btn>\n                    <v-btn\n                      icon\n                      small\n                      color=\"red darken-2\"\n                      @click=\"deleteTeacher(item._id)\"\n                      style=\"width: 30px; height: 30px; margin-right: 5px\"\n                    >\n                      <v-icon style=\"font-size: 18px\">mdi-delete</v-icon>\n                    </v-btn>\n                  </td>\n                </tr>\n              </template>\n            </v-data-table>\n          </v-card>\n        </v-col>\n      </v-main>\n      <!-- Show Assigned Students Dialog -->\n      <!-- Show Assigned Students Dialog -->\n      <v-dialog v-model=\"showAssignedStudentsDialog\" max-width=\"500\">\n        <v-card>\n          <v-card-title class=\"headline\">Assigned Students</v-card-title>\n          <v-card-text>\n            <v-list>\n              <v-list-item\n                v-for=\"student in assignedStudents\"\n                :key=\"student.id\"\n                class=\"mb-4\"\n              >\n                <v-list-item-icon>\n                  <v-icon>mdi-account</v-icon>\n                </v-list-item-icon>\n                <v-list-item-content>\n                  <v-list-item-title class=\"font-weight-bold\">\n                    <span>ID:</span> {{ student._id }}<br />\n                    <span>Name:</span> {{ student.nombre }}<br />\n                    <span>Project:</span> {{ student.projectName }}\n\n                    <!-- Modified to call getProjectName method -->\n                  </v-list-item-title>\n                </v-list-item-content>\n              </v-list-item>\n            </v-list>\n          </v-card-text>\n          <v-card-actions>\n            <v-btn\n              color=\"blue darken-2\"\n              dark\n              large\n              @click=\"showAssignedStudentsDialog = false\"\n              >Close</v-btn\n            >\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n\n      <!-- Edit Dialog -->\n      <v-dialog v-model=\"editDialog\" max-width=\"500\">\n        <v-card>\n          <v-card-title>Edit Teacher</v-card-title>\n          <v-card-text>\n            <v-text-field\n              v-model=\"editedTeacher.nombre\"\n              label=\"Name\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"editedTeacher.apellido\"\n              label=\"Last Name\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"editedTeacher.apellidoM\"\n              label=\"Apellido Materno\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"editedTeacher.correo\"\n              label=\"Email\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"editedTeacher.contraseña\"\n              label=\"Password\"\n              type=\"password\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"editedStudent.asesorExterno.telefono\"\n              label=\"External Advisor Number\"\n              type=\"number\"\n            ></v-text-field>\n            <!-- Add v-select to select students -->\n            <v-select\n              v-model=\"editedTeacher.alumnos\"\n              :items=\"students\"\n              label=\"Assign students (max 5)\"\n              multiple\n              chips\n            ></v-select>\n            <!-- Add more fields as needed -->\n          </v-card-text>\n          <v-card-actions>\n            <v-btn color=\"blue darken-2\" @click=\"saveEditedTeacher\">Save</v-btn>\n            <v-btn @click=\"cancelEdit\">Cancel</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n\n      <!-- Create Dialog -->\n      <v-dialog v-model=\"createDialog\" max-width=\"500\">\n        <v-card>\n          <v-card-title>Create New Teacher</v-card-title>\n          <v-card-text>\n            <v-text-field v-model=\"newTeacher._id\" label=\"ID\"></v-text-field>\n            <v-text-field\n              v-model=\"newTeacher.nombre\"\n              label=\"Name\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"newTeacher.apellido\"\n              label=\"Last Name\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"newTeacher.apellidoM\"\n              label=\"Apellido Materno\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"newTeacher.correo\"\n              label=\"Email\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"newTeacher.contraseña\"\n              label=\"Password\"\n              type=\"password\"\n            ></v-text-field>\n            <div>\n              <v-select\n                v-model=\"newTeacher.alumnos\"\n                :items=\"students\"\n                label=\"Assign students (max 5)\"\n                multiple\n                chips\n                @update:modelValue=\"limitSelection\"\n              ></v-select>\n            </div>\n            <!-- Add more fields as needed -->\n          </v-card-text>\n          <v-card-actions>\n            <v-btn color=\"blue darken-2\" @click=\"saveNewTeacher\">Save</v-btn>\n            <v-btn @click=\"cancelCreate\">Cancel</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n    </v-container>\n  </v-app>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  data () {\n    return {\n      studentProjectNames: {},\n      students: [],\n      selectedOptions: [],\n      teachers: [],\n      sidebarItems: [\n        { title: 'Projects', icon: 'mdi-folder-outline' },\n        { title: 'Students', icon: 'mdi-account-plus-outline' },\n        { title: 'Teachers', icon: 'mdi-account-tie' }\n      ],\n      userName: 'John Doe',\n      drawer: false,\n      editDialog: false,\n      editedTeacher: {\n        _id: '',\n        nombre: '',\n        apellido: '',\n        correo: '',\n        contraseña: '',\n        alumnos: [],\n        apellidoM: ''\n        // Add more fields as needed\n      },\n      createDialog: false,\n      newTeacher: {\n        nombre: '',\n        apellido: '',\n        correo: '',\n        contraseña: '',\n        apellidoM: ''\n        // Add more fields as needed\n      },\n      showAssignedStudentsDialog: false,\n      assignedStudents: []\n    }\n  },\n  methods: {\n    limitSelection () {\n      if (this.selectedOptions.length > 5) {\n        alert('You can only select a maximum of 5 options.')\n        this.selectedOptions = this.selectedOptions.slice(0, 5)\n      }\n    },\n    async fetchData () {\n      try {\n        const response = await axios.get('http://localhost:3000/teachers')\n        this.teachers = response.data\n      } catch (error) {\n        console.error('Error fetching teachers:', error)\n      }\n    },\n\n    async fetchStudents () {\n      try {\n        const studentsResponse = await axios.get(\n          'http://localhost:3000/students'\n        )\n        const allStudents = studentsResponse.data\n\n        // Filter out students who are not assigned to any teacher\n        const unassignedStudents = allStudents.filter((student) => {\n          return !this.teachers.some((teacher) =>\n            teacher.alumnos.includes(student._id)\n          )\n        })\n\n        const assignedStudents = allStudents.filter((student) => {\n          return this.teachers.some((teacher) =>\n            teacher.alumnos.includes(student._id)\n          )\n        })\n\n        // Include the teacher's ID in the assignedStudents array\n        const updatedAssignedStudents = assignedStudents.map((student) => ({\n          ...student,\n          teacherId: student.teacherId // Ensure each student object has a teacherId property\n        }))\n\n        // Fetch project names for each student's project\n        const projectNamesPromises = updatedAssignedStudents.map(\n          async (student) => {\n            const projectName = await this.getProjectName(student.project)\n            return { ...student, projectName }\n          }\n        )\n\n        // Wait for all project names to be fetched\n        this.assignedStudents = await Promise.all(projectNamesPromises)\n\n        // Extract just the names from the unassigned students data\n        this.students = unassignedStudents.map((student) => student._id)\n      } catch (error) {\n        console.error('Error fetching students:', error)\n      }\n    },\n\n    async showAssignedStudents (teacher) {\n      // Filter assignedStudents to include only those assigned to the current teacher\n      await this.fetchStudents()\n      this.assignedStudents = this.assignedStudents.filter((student) =>\n        teacher.alumnos.includes(student._id)\n      )\n      this.showAssignedStudentsDialog = true\n    },\n\n    async navigate (index) {\n      switch (index) {\n        case 0:\n          this.$router.push('/admin')\n          break\n        case 1:\n          this.$router.push('/admin/students')\n          break\n        case 2:\n          this.$router.push('/admin/teachers')\n          break\n        default:\n          break\n      }\n    },\n    logout () {\n      // Logic to logout the user\n      // For example, you can clear any user data or tokens stored in localStorage\n      localStorage.removeItem('token')\n\n      // Redirect the user to the login page\n      this.$router.push('/login')\n    },\n    editUser (teacher) {\n      // Assign the teacher data to editedTeacher\n      this.editedTeacher = { ...teacher }\n\n      // If editedTeacher has alumnos property, add its students to the students array\n      if (\n        this.editedTeacher.alumnos &&\n        Array.isArray(this.editedTeacher.alumnos)\n      ) {\n        this.students = [...this.students, ...this.editedTeacher.alumnos]\n      }\n\n      // Open the edit dialog\n      this.editDialog = true\n    },\n\n    async saveEditedTeacher () {\n      try {\n        // Send the updated teacher data to the server\n        const response = await axios.put(\n          `http://localhost:3000/users/${this.editedTeacher._id}`,\n          this.editedTeacher\n        )\n\n        console.log('Teacher updated successfully:', response.data)\n        this.fetchData()\n      } catch (error) {\n        console.error('Error updating teacher:', error)\n      }\n      this.editDialog = false\n    },\n\n    cancelEdit () {\n      this.editDialog = false\n    },\n    openCreateDialog () {\n      this.createDialog = true\n      this.fetchStudents()\n    },\n    async saveNewTeacher () {\n      try {\n        // Add 'rol' field with value 'teacher'\n        this.newTeacher.rol = 'teacher'\n\n        const response = await axios.post(\n          'http://localhost:3000/register',\n          this.newTeacher\n        )\n        if (response.status === 201) {\n          console.log('Teacher created successfully:', response.data)\n          this.fetchData()\n        } else {\n          console.error('Failed to create teacher:', response.data)\n        }\n      } catch (error) {\n        console.error('Error creating teacher:', error)\n      }\n      this.createDialog = false\n    },\n\n    cancelCreate () {\n      this.createDialog = false\n    },\n    async deleteTeacher (teacherId) {\n      try {\n        const response = await axios.delete(\n          `http://localhost:3000/users/${teacherId}`\n        )\n        console.log('Teacher deleted successfully:', response.data)\n        this.fetchData() // Call a method to update the UI or fetch updated data\n      } catch (error) {\n        console.error('Error deleting teacher:', error)\n      }\n    },\n\n    async getProjectName (projectId) {\n      try {\n        const response = await axios.get(\n          `http://localhost:3000/projects/${projectId}`\n        )\n        const data = response.data // Assuming the project name is stored in the 'name' field\n        return data.name\n      } catch (error) {\n        console.error('Error fetching project name:', error)\n        return 'Unknown' // Return a default value if an error occurs\n      }\n    },\n    async renderProjectName (projectId) {\n      const projectName = await this.getProjectName(projectId)\n      this.studentProjectNames[projectId] = projectName // Store the project name\n    }\n  },\n  mounted () {\n    this.fetchData()\n    this.fetchStudents()\n  }\n}\n</script>\n\n<style scoped>\n.v-btn i {\n  color: white;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}