{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      studentsTable: [],\n      students: [],\n      projects: [],\n      projectMenu: false,\n      // Control for project dropdown menu\n      sidebarItems: [{\n        title: \"Projects\",\n        icon: \"mdi-folder-outline\"\n      }, {\n        title: \"Students\",\n        icon: \"mdi-account-plus-outline\"\n      }, {\n        title: \"Teachers\",\n        icon: \"mdi-account-tie\"\n      }],\n      userName: \"John Doe\",\n      drawer: false,\n      editDialog: false,\n      editedStudent: {\n        _id: \"\",\n        nombre: \"\",\n        apellido: \"\",\n        apellidoM: \"\",\n        correo: \"\",\n        project: \"\",\n        carrera: \"\",\n        numeroTelefonico: \"\",\n        empresa: \"\",\n        periodo: \"\",\n        asesorExterno: {\n          nombre: \"\",\n          telefono: \"\",\n          correo: \"\"\n        }\n        // Add more fields as needed\n      },\n      createDialog: false,\n      newStudent: {\n        rol: \"student\",\n        nombre: \"\",\n        apellido: \"\",\n        apellidoM: \"\",\n        correo: \"\",\n        project: \"\",\n        contrase単a: \"\",\n        carrera: \"\",\n        numeroTelefonico: \"\",\n        empresa: \"\",\n        periodo: \"\",\n        asesorExterno: {\n          nombre: \"\",\n          apellido: \"\",\n          correo: \"\"\n        }\n        // Add more fields as needed\n      }\n    };\n  },\n  computed: {\n    isCreateFormValid() {\n      // Check if the form reference exists\n      if (!this.$refs.createDialogForm) {\n        return false;\n      }\n\n      // Check the validity of each field in the form\n      return this.$refs.createDialogForm.validate() &&\n      // Check overall form validation\n      !!this.newStudent._id &&\n      // Check _id field\n      !!this.newStudent.nombre &&\n      // Check nombre field\n      !!this.newStudent.apellido &&\n      // Check apellido field\n      !!this.newStudent.apellidoM &&\n      // Check apellidoM field\n      !!this.newStudent.correo &&\n      // Check correo field\n      !!this.newStudent.contrase単a &&\n      // Check contrase単a field\n      !!this.newStudent.project &&\n      // Check project field\n      !!this.newStudent.carrera &&\n      // Check carrera field\n      !!this.newStudent.numeroTelefonico &&\n      // Check numeroTelefonico field\n      !!this.newStudent.empresa &&\n      // Check empresa field\n      !!this.newStudent.periodo &&\n      // Check periodo field\n      !!this.newStudent.asesorExterno.nombre &&\n      // Check asesorExterno.nombre field\n      !!this.newStudent.asesorExterno.correo &&\n      // Check asesorExterno.correo field\n      !!this.newStudent.asesorExterno.telefono // Check asesorExterno.telefono field\n      ;\n    }\n  },\n  methods: {\n    async fetchData() {\n      try {\n        const response = await axios.get(\"http://localhost:3000/students\");\n        this.students = response.data;\n        this.studentsTable = response.data.map(student => ({\n          _id: student._id,\n          nombre: student.nombre,\n          apellido: student.apellido,\n          apellidoM: student.apellidoM,\n          carrera: student.carrera,\n          project: student.project\n        }));\n      } catch (error) {\n        console.error(\"Error fetching students:\", error);\n      }\n    },\n    async fetchProjects() {\n      try {\n        const response = await axios.get(\"http://localhost:3000/projects\");\n        // Extract IDs and names from the projects data\n        this.projects = response.data.map(project => ({\n          id: project._id,\n          name: project.name\n        }));\n      } catch (error) {\n        console.error(\"Error fetching projects:\", error);\n      }\n    },\n    async navigate(index) {\n      switch (index) {\n        case 0:\n          this.$router.push(\"/admin\");\n          break;\n        case 1:\n          this.$router.push(\"/admin/students\");\n          break;\n        case 2:\n          this.$router.push(\"/admin/Teachers\");\n          break;\n        default:\n          break;\n      }\n    },\n    logout() {\n      // Logic to logout the user\n      // For example, you can clear any user data or tokens stored in localStorage\n      localStorage.removeItem(\"token\");\n\n      // Redirect the user to the login page\n      this.$router.push(\"/login\");\n    },\n    editUser(student, event) {\n      event.stopPropagation(); // Stop event propagation\n      // Find the student with the matching _id\n      const foundStudent = this.students.find(s => s._id === student._id);\n      if (foundStudent) {\n        // If the student is found, copy its data to editedStudent\n        this.editedStudent = {\n          ...foundStudent\n        };\n        this.editDialog = true;\n      } else {\n        console.error(`Student with ID ${student._id} not found.`);\n      }\n    },\n    async saveEditedStudent() {\n      try {\n        const response = await axios.put(`http://localhost:3000/users/${this.editedStudent._id}`, this.editedStudent);\n        console.log(\"User updated successfully:\", response.data);\n        this.fetchData();\n      } catch (error) {\n        console.error(\"Error updating user:\", error);\n      }\n      this.editDialog = false;\n    },\n    cancelEdit() {\n      this.editDialog = false;\n    },\n    openCreateDialog() {\n      this.createDialog = true;\n      // Fetch projects data when opening create dialog\n      this.fetchProjects();\n    },\n    async saveNewStudent() {\n      try {\n        // Validate the form\n        if (!this.isCreateFormValid) {\n          return; // Exit if the form is not valid\n        }\n        // Find the selected project object based on its name\n        const selectedProject = this.projects.find(project => project.name === this.newStudent.project);\n        if (selectedProject) {\n          // Save the project ID to the new student data\n          this.newStudent.project = selectedProject.id;\n        }\n        const response = await axios.post(\"http://localhost:3000/register\", this.newStudent);\n        if (response.status === 201) {\n          console.log(\"Student created successfully:\", response.data);\n          this.fetchData();\n        } else {\n          console.error(\"Failed to create student:\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error creating student:\", error);\n      }\n      this.createDialog = false;\n    },\n    cancelCreate() {\n      this.createDialog = false;\n    },\n    async deleteUser(userId, event) {\n      event.stopPropagation(); // Stop event propagation\n      try {\n        const response = await axios.delete(`http://localhost:3000/users/${userId}`);\n        console.log(\"User deleted successfully:\", response.data);\n        this.fetchData(); // Call a method to update the UI or fetch updated data\n      } catch (error) {\n        console.error(\"Error deleting user:\", error);\n      }\n    },\n    selectProject(project) {\n      this.newStudent.project = project.name; // Set the selected project name\n      this.projectMenu = false; // Close the dropdown menu\n    },\n    handleRowClick(item) {\n      // Handle row click event here\n      console.log(\"Row clicked:\", item);\n      // Navigate to a new page and pass the user's ID as route parameters\n      this.$router.push({\n        name: \"UserDetails\",\n        params: {\n          userId: item._id\n        }\n      });\n    },\n    getProjectName(projectId) {\n      const project = this.projects.find(project => project.id === projectId);\n      return project ? project.name : \"\";\n    }\n  },\n  mounted() {\n    this.fetchData();\n    this.fetchProjects();\n  }\n};","map":{"version":3,"names":["axios","data","studentsTable","students","projects","projectMenu","sidebarItems","title","icon","userName","drawer","editDialog","editedStudent","_id","nombre","apellido","apellidoM","correo","project","carrera","numeroTelefonico","empresa","periodo","asesorExterno","telefono","createDialog","newStudent","rol","contrase単a","computed","isCreateFormValid","$refs","createDialogForm","validate","methods","fetchData","response","get","map","student","error","console","fetchProjects","id","name","navigate","index","$router","push","logout","localStorage","removeItem","editUser","event","stopPropagation","foundStudent","find","s","saveEditedStudent","put","log","cancelEdit","openCreateDialog","saveNewStudent","selectedProject","post","status","cancelCreate","deleteUser","userId","delete","selectProject","handleRowClick","item","params","getProjectName","projectId","mounted"],"sources":["/Users/angel/school-project/my-app/src/components/StudentsPage.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-container fluid>\n      <!-- Top Bar -->\n      <v-app-bar app color=\"blue darken-2\" dark>\n        <!-- Burger menu icon -->\n        <v-btn icon @click=\"drawer = !drawer\">\n          <v-icon>mdi-menu</v-icon>\n        </v-btn>\n        <!-- Title -->\n        <v-toolbar-title>{{ userName }}</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <!-- Logout button -->\n        <v-btn icon @click=\"logout\">\n          <v-icon>mdi-logout</v-icon>\n        </v-btn>\n      </v-app-bar>\n\n      <!-- Sidebar -->\n      <v-navigation-drawer app v-model=\"drawer\" color=\"blue darken-2\" dark>\n        <v-list dense>\n          <v-list-item\n            v-for=\"(item, index) in sidebarItems\"\n            :key=\"index\"\n            @click=\"navigate(index)\"\n          >\n            <v-list-item-action>\n              <v-icon>{{ item.icon }}</v-icon>\n            </v-list-item-action>\n            <v-list-item-content>\n              <v-list-item-title>{{ item.title }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n        </v-list>\n      </v-navigation-drawer>\n\n      <v-main>\n        <!-- Main content -->\n        <v-col cols=\"12\" style=\"max-width: 1500px; margin: 0px auto\">\n          <v-card class=\"text-center\" style=\"width: 100%; margin: 0px auto\">\n            <!-- Students Data -->\n            <v-data-table\n              v-if=\"studentsTable.length > 0\"\n              :items=\"studentsTable\"\n              align=\"center\"\n            >\n              <template v-slot:top>\n                <v-toolbar flat color=\"blue darken-2\">\n                  <v-toolbar-title>Students</v-toolbar-title>\n                  <v-divider class=\"mx-4\" inset vertical></v-divider>\n                  <v-spacer></v-spacer>\n                  <v-btn icon color=\"blue darken-2\" @click=\"openCreateDialog\">\n                    <v-icon>mdi-plus</v-icon>\n                  </v-btn>\n                </v-toolbar>\n              </template>\n              <template v-slot:item=\"{ item }\">\n                <tr @click=\"handleRowClick(item)\" class=\"clickable-row\">\n                  <td v-for=\"(value, key) in item\" :key=\"key\">\n                    <!-- Render project name instead of ID -->\n                    <template v-if=\"key === 'project'\">\n                      {{ getProjectName(item[key]) }}\n                    </template>\n                    <template v-else>\n                      {{ value }}\n                    </template>\n                  </td>\n                  <td>\n                    <v-btn\n                      icon\n                      small\n                      color=\"blue darken-2\"\n                      @click=\"editUser(item, $event)\"\n                      style=\"width: 30px; height: 30px; margin-right: 5px\"\n                    >\n                      <v-icon style=\"font-size: 18px\">mdi-pencil</v-icon>\n                    </v-btn>\n\n                    <v-btn\n                      icon\n                      small\n                      color=\"red darken-2\"\n                      @click=\"deleteUser(item._id, $event)\"\n                      style=\"width: 30px; height: 30px; margin-right: 5px\"\n                    >\n                      <v-icon style=\"font-size: 18px\">mdi-delete</v-icon>\n                    </v-btn>\n                  </td>\n                </tr>\n              </template>\n            </v-data-table>\n          </v-card>\n        </v-col>\n      </v-main>\n\n      <!-- Edit Dialog -->\n      <v-dialog v-model=\"editDialog\" max-width=\"500\">\n        <v-card>\n          <v-card-title>Edit Student</v-card-title>\n          <v-card-text>\n            <v-text-field\n              v-model=\"editedStudent.nombre\"\n              label=\"Name\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"editedStudent.apellido\"\n              label=\"Last Name\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"editedStudent.apellidoM\"\n              label=\"Apellido Materno\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"editedStudent.correo\"\n              label=\"Email\"\n              required\n            ></v-text-field>\n            <v-select\n              v-model=\"editedStudent.project\"\n              :items=\"projects.map((project) => project.name)\"\n              label=\"Select Project\"\n              required\n            ></v-select>\n\n            <v-text-field\n              v-model=\"editedStudent.carrera\"\n              label=\"Carrera\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"editedStudent.numeroTelefonico\"\n              label=\"Phone Number\"\n              type=\"number\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"editedStudent.empresa\"\n              label=\"Empresa\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"editedStudent.periodo\"\n              label=\"Periodo\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"editedStudent.asesorExterno.nombre\"\n              label=\"Nombre Asesor externo\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"editedStudent.asesorExterno.correo\"\n              label=\"Correo Asesor externo\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"editedStudent.asesorExterno.telefono\"\n              label=\"External Advisor Number\"\n              type=\"number\"\n              required\n            ></v-text-field>\n            <!-- Add more fields as needed -->\n          </v-card-text>\n          <v-card-actions>\n            <v-btn color=\"blue darken-2\" @click=\"saveEditedStudent\">Save</v-btn>\n            <v-btn @click=\"cancelEdit\">Cancel</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n\n      <!-- Create Dialog -->\n      <v-dialog v-model=\"createDialog\" max-width=\"500\">\n        <v-card>\n          <v-card-title>Create New Student</v-card-title>\n          <v-card-text>\n            <!-- <v-text-field v-model=\"newStudent._id\" label=\"ID\"></v-text-field> Remove this line -->\n            <v-text-field\n              v-model=\"newStudent._id\"\n              label=\"ID\"\n              required\n              :rules=\"[\n                (v) => !!v || 'ID is required',\n                (v) => /^[0-9]+$/.test(v) || 'ID must contain only numbers',\n              ]\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"newStudent.nombre\"\n              label=\"Name\"\n              required\n              :rules=\"[(v) => !!v || 'Name is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"newStudent.apellido\"\n              label=\"Last Name\"\n              required\n              :rules=\"[(v) => !!v || 'Apellido Paterno is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"newStudent.apellidoM\"\n              label=\"Apellido Materno\"\n              required\n              :rules=\"[(v) => !!v || 'Apellido Materno is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"newStudent.correo\"\n              label=\"Email\"\n              required\n              :rules=\"[(v) => !!v || 'Email is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"newStudent.contrase単a\"\n              label=\"Password\"\n              type=\"password\"\n              required\n              :rules=\"[(v) => !!v || 'Password is required']\"\n            ></v-text-field>\n            <!-- Add dropdown menu for projects -->\n            <v-select\n              v-model=\"newStudent.project\"\n              :items=\"projects.map((project) => project.name)\"\n              label=\"Select Project\"\n              required\n              :rules=\"[(v) => !!v || 'Project is required']\"\n            ></v-select>\n            <v-text-field\n              v-model=\"newStudent.carrera\"\n              label=\"Carrera\"\n              required\n              :rules=\"[(v) => !!v || 'Carrera is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"newStudent.numeroTelefonico\"\n              label=\"Phone Number\"\n              type=\"number\"\n              required\n              :rules=\"[(v) => !!v || 'Phone Number is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"newStudent.empresa\"\n              label=\"Empresa\"\n              required\n              :rules=\"[(v) => !!v || 'Empresa is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"newStudent.periodo\"\n              label=\"Periodo\"\n              required\n              :rules=\"[(v) => !!v || 'Periodo is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"newStudent.asesorExterno.nombre\"\n              label=\"Nombre Asesor externo\"\n              required\n              :rules=\"[(v) => !!v || 'Nombre del Asesor is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"newStudent.asesorExterno.correo\"\n              label=\"Correo Asesor externo\"\n              required\n              :rules=\"[(v) => !!v || 'Correo del asesor is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"newStudent.asesorExterno.telefono\"\n              label=\"External Advisor Number\"\n              type=\"number\"\n              required\n              :rules=\"[(v) => !!v || 'Telefono del asesor is required']\"\n            ></v-text-field>\n\n            <!-- Add more fields as needed -->\n          </v-card-text>\n          <v-card-actions>\n            <v-btn\n              color=\"blue darken-2\"\n              :disabled=\"!isCreateFormValid\"\n              @click=\"saveNewStudent\"\n              >Save</v-btn\n            >\n            <v-btn @click=\"cancelCreate\">Cancel</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n    </v-container>\n  </v-app>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      studentsTable: [],\n      students: [],\n      projects: [],\n      projectMenu: false, // Control for project dropdown menu\n      sidebarItems: [\n        { title: \"Projects\", icon: \"mdi-folder-outline\" },\n        { title: \"Students\", icon: \"mdi-account-plus-outline\" },\n        { title: \"Teachers\", icon: \"mdi-account-tie\" },\n      ],\n      userName: \"John Doe\",\n      drawer: false,\n      editDialog: false,\n      editedStudent: {\n        _id: \"\",\n        nombre: \"\",\n        apellido: \"\",\n        apellidoM: \"\",\n        correo: \"\",\n        project: \"\",\n        carrera: \"\",\n        numeroTelefonico: \"\",\n        empresa: \"\",\n        periodo: \"\",\n        asesorExterno: {\n          nombre: \"\",\n          telefono: \"\",\n          correo: \"\",\n        },\n        // Add more fields as needed\n      },\n      createDialog: false,\n      newStudent: {\n        rol: \"student\",\n        nombre: \"\",\n        apellido: \"\",\n        apellidoM: \"\",\n        correo: \"\",\n        project: \"\",\n        contrase単a: \"\",\n        carrera: \"\",\n        numeroTelefonico: \"\",\n        empresa: \"\",\n        periodo: \"\",\n        asesorExterno: {\n          nombre: \"\",\n          apellido: \"\",\n          correo: \"\",\n        },\n        // Add more fields as needed\n      },\n    };\n  },\n  computed: {\n    isCreateFormValid() {\n      // Check if the form reference exists\n      if (!this.$refs.createDialogForm) {\n        return false;\n      }\n\n      // Check the validity of each field in the form\n      return (\n        this.$refs.createDialogForm.validate() && // Check overall form validation\n        !!this.newStudent._id && // Check _id field\n        !!this.newStudent.nombre && // Check nombre field\n        !!this.newStudent.apellido && // Check apellido field\n        !!this.newStudent.apellidoM && // Check apellidoM field\n        !!this.newStudent.correo && // Check correo field\n        !!this.newStudent.contrase単a && // Check contrase単a field\n        !!this.newStudent.project && // Check project field\n        !!this.newStudent.carrera && // Check carrera field\n        !!this.newStudent.numeroTelefonico && // Check numeroTelefonico field\n        !!this.newStudent.empresa && // Check empresa field\n        !!this.newStudent.periodo && // Check periodo field\n        !!this.newStudent.asesorExterno.nombre && // Check asesorExterno.nombre field\n        !!this.newStudent.asesorExterno.correo && // Check asesorExterno.correo field\n        !!this.newStudent.asesorExterno.telefono // Check asesorExterno.telefono field\n      );\n    },\n  },\n\n  methods: {\n    async fetchData() {\n      try {\n        const response = await axios.get(\"http://localhost:3000/students\");\n        this.students = response.data;\n        this.studentsTable = response.data.map((student) => ({\n          _id: student._id,\n          nombre: student.nombre,\n          apellido: student.apellido,\n          apellidoM: student.apellidoM,\n          carrera: student.carrera,\n          project: student.project,\n        }));\n      } catch (error) {\n        console.error(\"Error fetching students:\", error);\n      }\n    },\n    async fetchProjects() {\n      try {\n        const response = await axios.get(\"http://localhost:3000/projects\");\n        // Extract IDs and names from the projects data\n        this.projects = response.data.map((project) => ({\n          id: project._id,\n          name: project.name,\n        }));\n      } catch (error) {\n        console.error(\"Error fetching projects:\", error);\n      }\n    },\n\n    async navigate(index) {\n      switch (index) {\n        case 0:\n          this.$router.push(\"/admin\");\n          break;\n        case 1:\n          this.$router.push(\"/admin/students\");\n          break;\n        case 2:\n          this.$router.push(\"/admin/Teachers\");\n          break;\n        default:\n          break;\n      }\n    },\n    logout() {\n      // Logic to logout the user\n      // For example, you can clear any user data or tokens stored in localStorage\n      localStorage.removeItem(\"token\");\n\n      // Redirect the user to the login page\n      this.$router.push(\"/login\");\n    },\n    editUser(student, event) {\n      event.stopPropagation(); // Stop event propagation\n      // Find the student with the matching _id\n      const foundStudent = this.students.find((s) => s._id === student._id);\n      if (foundStudent) {\n        // If the student is found, copy its data to editedStudent\n        this.editedStudent = { ...foundStudent };\n        this.editDialog = true;\n      } else {\n        console.error(`Student with ID ${student._id} not found.`);\n      }\n    },\n\n    async saveEditedStudent() {\n      try {\n        const response = await axios.put(\n          `http://localhost:3000/users/${this.editedStudent._id}`,\n          this.editedStudent\n        );\n        console.log(\"User updated successfully:\", response.data);\n        this.fetchData();\n      } catch (error) {\n        console.error(\"Error updating user:\", error);\n      }\n      this.editDialog = false;\n    },\n    cancelEdit() {\n      this.editDialog = false;\n    },\n    openCreateDialog() {\n      this.createDialog = true;\n      // Fetch projects data when opening create dialog\n      this.fetchProjects();\n    },\n    async saveNewStudent() {\n      try {\n        // Validate the form\n        if (!this.isCreateFormValid) {\n          return; // Exit if the form is not valid\n        }\n        // Find the selected project object based on its name\n        const selectedProject = this.projects.find(\n          (project) => project.name === this.newStudent.project\n        );\n        if (selectedProject) {\n          // Save the project ID to the new student data\n          this.newStudent.project = selectedProject.id;\n        }\n\n        const response = await axios.post(\n          \"http://localhost:3000/register\",\n          this.newStudent\n        );\n        if (response.status === 201) {\n          console.log(\"Student created successfully:\", response.data);\n          this.fetchData();\n        } else {\n          console.error(\"Failed to create student:\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error creating student:\", error);\n      }\n      this.createDialog = false;\n    },\n\n    cancelCreate() {\n      this.createDialog = false;\n    },\n    async deleteUser(userId, event) {\n      event.stopPropagation(); // Stop event propagation\n      try {\n        const response = await axios.delete(\n          `http://localhost:3000/users/${userId}`\n        );\n        console.log(\"User deleted successfully:\", response.data);\n        this.fetchData(); // Call a method to update the UI or fetch updated data\n      } catch (error) {\n        console.error(\"Error deleting user:\", error);\n      }\n    },\n\n    selectProject(project) {\n      this.newStudent.project = project.name; // Set the selected project name\n      this.projectMenu = false; // Close the dropdown menu\n    },\n    handleRowClick(item) {\n      // Handle row click event here\n      console.log(\"Row clicked:\", item);\n      // Navigate to a new page and pass the user's ID as route parameters\n      this.$router.push({\n        name: \"UserDetails\",\n        params: { userId: item._id },\n      });\n    },\n    getProjectName(projectId) {\n      const project = this.projects.find((project) => project.id === projectId);\n      return project ? project.name : \"\";\n    },\n  },\n  mounted() {\n    this.fetchData();\n    this.fetchProjects();\n  },\n};\n</script>\n\n<style scoped>\n.v-btn i {\n  color: white;\n}\n\n.clickable-row:hover {\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}