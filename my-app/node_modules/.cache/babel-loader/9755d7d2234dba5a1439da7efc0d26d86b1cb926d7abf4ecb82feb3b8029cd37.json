{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport FilesDialog from './FilesDialog.vue';\nimport * as XLSX from 'xlsx'; // Import XLSX library\n\nexport default {\n  components: {\n    FilesDialog\n  },\n  data() {\n    return {\n      excelFileName: 'alumnos.xlsx',\n      selectedStudent: null,\n      showFilesDialog: false,\n      studentsTable: [],\n      students: [],\n      projects: [],\n      projectMenu: false,\n      // Control for project dropdown menu\n      sidebarItems: [{\n        title: 'Proyectos',\n        icon: 'mdi-folder-outline'\n      }, {\n        title: 'Alumnos',\n        icon: 'mdi-account-plus-outline'\n      }, {\n        title: 'Maestros',\n        icon: 'mdi-account-tie'\n      }],\n      userName: localStorage.getItem('userName'),\n      drawer: false,\n      editDialog: false,\n      student: {\n        _id: '',\n        nombre: '',\n        apellido: '',\n        apellidoM: '',\n        correo: '',\n        project: '',\n        carrera: '',\n        numeroTelefonico: '',\n        empresa: '',\n        periodo: '',\n        asesorExterno: {\n          nombre: '',\n          telefono: '',\n          correo: ''\n        }\n        // Add more fields as needed\n      },\n      createDialog: false,\n      search: ''\n    };\n  },\n  computed: {\n    isCreateFormValid() {\n      // Check if the form reference exists\n      if (!this.$refs.createDialogForm) {\n        return false;\n      }\n\n      // Manually validate each field\n      return this.student._id && this.student.nombre && this.student.apellido && this.student.apellidoM && this.student.correo && this.student.contraseña && this.student.proyecto && this.student.carrera && this.student.numeroTelefonico && this.student.empresa && this.student.periodo && this.student.asesorExterno.nombre && this.student.asesorExterno.correo && this.student.asesorExterno.telefono;\n    },\n    isEditFormValid() {\n      // Check if the form reference exists\n      if (!this.$refs.editDialogForm) {\n        return false;\n      }\n\n      // Manually validate each field\n      return this.student.nombre && this.student.apellido && this.student.apellidoM && this.student.proyecto && this.student.carrera && this.student.numeroTelefonico && this.student.empresa && this.student.periodo && this.student.asesorExterno.nombre && this.student.asesorExterno.correo && this.student.asesorExterno.telefono;\n    }\n  },\n  methods: {\n    downloadAsExcel() {\n      // Filter the students data based on the search term\n      const filteredStudents = this.studentsTable.filter(student => Object.values(student).some(value => String(value).toLowerCase().includes(this.search.toLowerCase())));\n      const excelData = filteredStudents.map(({\n        carrera,\n        promedio,\n        ...rest\n      }) => ({\n        ...rest,\n        calificacion1: rest.calificacion1 || '',\n        calificacion2: rest.calificacion2 || '',\n        calificacion3: rest.calificacion3 || '',\n        promedio\n      }));\n      const ws = XLSX.utils.json_to_sheet(excelData); // Convert data to worksheet\n      const wb = XLSX.utils.book_new(); // Create a new workbook\n      XLSX.utils.book_append_sheet(wb, ws, 'Alumnos'); // Add the worksheet to the workbook\n      XLSX.writeFile(wb, this.excelFileName); // Save the workbook as Excel file with the specified name\n    },\n    updateEmpresaField(selectedProjectName) {\n      const selectedProject = this.projects.find(project => project.nombre === selectedProjectName);\n      if (selectedProject) {\n        this.student.empresa = selectedProject.empresa || ''; // Assuming the project object has an 'empresa' field\n\n        const {\n          nombre = '',\n          correo,\n          telefono\n        } = selectedProject.asesorExterno;\n        this.student.asesorExterno = {\n          nombre,\n          correo,\n          telefono\n        };\n      }\n    },\n    resetStudent() {\n      this.student = {\n        _id: '',\n        nombre: '',\n        apellido: '',\n        apellidoM: '',\n        correo: '',\n        project: '',\n        carrera: '',\n        numeroTelefonico: '',\n        empresa: '',\n        periodo: '',\n        asesorExterno: {\n          nombre: '',\n          telefono: '',\n          correo: ''\n        }\n        // Add more fields as needed\n      };\n    },\n    openFilesDialog(student, event) {\n      event.stopPropagation();\n      this.selectedStudent = this.students.find(s => s._id === student._id);\n      this.showFilesDialog = true; // Open the dialog with the student's files\n    },\n    async fetchData() {\n      try {\n        const response = await axios.get('http://localhost:3000/students');\n        this.students = response.data;\n        this.studentsTable = response.data.map(student => ({\n          _id: student._id,\n          nombre: student.nombre,\n          apellidoP: student.apellido,\n          apellidoM: student.apellidoM,\n          carrera: student.carrera,\n          proyecto: student.proyecto,\n          promedio: student.promedio,\n          calificacion1: student.calificacion\n        })).reverse();\n      } catch (error) {\n        console.error('Error fetching students:', error);\n      }\n    },\n    async fetchProjects() {\n      try {\n        const response = await axios.get('http://localhost:3000/projects');\n        // Extract IDs and names from the projects data\n        this.projects = response.data.map(project => ({\n          id: project._id,\n          nombre: project.nombre,\n          empresa: project.empresa,\n          asesorExterno: project.asesorExterno\n        }));\n      } catch (error) {\n        console.error('Error fetching projects:', error);\n      }\n    },\n    async navigate(index) {\n      switch (index) {\n        case 0:\n          this.$router.push('/admin');\n          break;\n        case 1:\n          this.$router.push('/admin/students');\n          break;\n        case 2:\n          this.$router.push('/admin/Teachers');\n          break;\n        default:\n          break;\n      }\n    },\n    logout() {\n      // Logic to logout the user\n      // For example, you can clear any user data or tokens stored in localStorage\n      localStorage.removeItem('token');\n\n      // Redirect the user to the login page\n      this.$router.push('/login');\n    },\n    editUser(student, event) {\n      event.stopPropagation(); // Stop event propagation\n      // Find the student with the matching _id\n      const foundStudent = this.students.find(s => s._id === student._id);\n      if (foundStudent) {\n        // If the student is found, copy its data to editedStudent\n        this.student = {\n          ...foundStudent\n        };\n        this.editDialog = true;\n      } else {\n        console.error(`Student with ID ${student._id} not found.`);\n      }\n    },\n    async saveEditedStudent() {\n      try {\n        const selectedProject = this.projects.find(project => project.nombre === this.student.proyecto);\n        if (selectedProject) {\n          // Save the project ID to the new student data\n          this.student.proyecto = selectedProject.id;\n        }\n        const response = await axios.put(`http://localhost:3000/users/${this.student._id}`, this.student);\n        console.log('User updated successfully:', response.data);\n        this.fetchData();\n      } catch (error) {\n        console.error('Error updating user:', error);\n      }\n      this.editDialog = false;\n    },\n    cancelEdit() {\n      this.editDialog = false;\n    },\n    openCreateDialog() {\n      this.resetStudent();\n      this.createDialog = true;\n      // Fetch projects data when opening create dialog\n      this.fetchProjects();\n    },\n    async saveNewStudent() {\n      try {\n        // Validate the form\n        if (!this.isCreateFormValid) {\n          return; // Exit if the form is not valid\n        }\n        // Find the selected project object based on its name\n        const selectedProject = this.projects.find(project => project.nombre === this.student.proyecto);\n        if (selectedProject) {\n          // Save the project ID to the new student data\n          this.student.proyecto = selectedProject.id;\n        }\n        const response = await axios.post('http://localhost:3000/register', this.student);\n        if (response.status === 201) {\n          console.log('Student created successfully:', response.data);\n          this.fetchData();\n        } else {\n          console.error('Failed to create student:', response.data);\n        }\n      } catch (error) {\n        if (error.response) {\n          // Display an error message to the user if the email already exists\n          alert(error.response.data.error);\n        }\n      }\n      this.createDialog = false;\n    },\n    cancelCreate() {\n      this.createDialog = false;\n    },\n    async deleteUser(userId, event) {\n      event.stopPropagation(); // Stop event propagation\n      if (confirm('¿Estás seguro que deseas borrar este alumno?')) {\n        try {\n          const response = await axios.delete(`http://localhost:3000/users/${userId}`);\n          console.log('User deleted successfully:', response.data);\n          this.fetchData(); // Call a method to update the UI or fetch updated data\n        } catch (error) {\n          console.error('Error deleting user:', error);\n        }\n      }\n    },\n    selectProject(project) {\n      this.student.proyecto = project.nombre; // Set the selected project name\n      this.projectMenu = false; // Close the dropdown menu\n    },\n    handleRowClick(item) {\n      // Handle row click event here\n      console.log('Row clicked:', item);\n      // Navigate to a new page and pass the user's ID as route parameters\n      this.$router.push({\n        name: 'UserDetails',\n        params: {\n          userId: item._id\n        }\n      });\n    },\n    getProjectName(projectId) {\n      const project = this.projects.find(project => project.id === projectId);\n      return project ? project.nombre : '';\n    }\n  },\n  mounted() {\n    this.fetchData();\n    this.fetchProjects();\n  }\n};","map":{"version":3,"names":["axios","FilesDialog","XLSX","components","data","excelFileName","selectedStudent","showFilesDialog","studentsTable","students","projects","projectMenu","sidebarItems","title","icon","userName","localStorage","getItem","drawer","editDialog","student","_id","nombre","apellido","apellidoM","correo","project","carrera","numeroTelefonico","empresa","periodo","asesorExterno","telefono","createDialog","search","computed","isCreateFormValid","$refs","createDialogForm","contraseña","proyecto","isEditFormValid","editDialogForm","methods","downloadAsExcel","filteredStudents","filter","Object","values","some","value","String","toLowerCase","includes","excelData","map","promedio","rest","calificacion1","calificacion2","calificacion3","ws","utils","json_to_sheet","wb","book_new","book_append_sheet","writeFile","updateEmpresaField","selectedProjectName","selectedProject","find","resetStudent","openFilesDialog","event","stopPropagation","s","fetchData","response","get","apellidoP","calificacion","reverse","error","console","fetchProjects","id","navigate","index","$router","push","logout","removeItem","editUser","foundStudent","saveEditedStudent","put","log","cancelEdit","openCreateDialog","saveNewStudent","post","status","alert","cancelCreate","deleteUser","userId","confirm","delete","selectProject","handleRowClick","item","name","params","getProjectName","projectId","mounted"],"sources":["/Users/angel/school-project/my-app/src/components/StudentsPage.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-container fluid>\n      <!-- Top Bar -->\n      <v-app-bar app color=\"blue darken-2\" dark>\n        <!-- Burger menu icon -->\n        <v-btn icon @click=\"drawer = !drawer\">\n          <v-icon>mdi-menu</v-icon>\n        </v-btn>\n        <!-- Title -->\n        <v-toolbar-title>{{ userName }}</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <!-- Logout button -->\n        <v-btn icon @click=\"logout\">\n          <v-icon>mdi-logout</v-icon>\n        </v-btn>\n      </v-app-bar>\n\n      <!-- Sidebar -->\n      <v-navigation-drawer app v-model=\"drawer\" color=\"blue darken-2\" dark>\n        <v-list dense>\n          <v-list-item\n            v-for=\"(item, index) in sidebarItems\"\n            :key=\"index\"\n            @click=\"navigate(index)\"\n          >\n            <v-list-item-action>\n              <v-icon>{{ item.icon }}</v-icon>\n            </v-list-item-action>\n            <v-list-item-content>\n              <v-list-item-title>{{ item.title }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n        </v-list>\n      </v-navigation-drawer>\n\n      <v-main>\n        <!-- Main content -->\n        <v-col cols=\"12\" style=\"max-width: 1500px; margin: 0px auto\">\n          <v-card class=\"text-center\" style=\"width: 100%; margin: 0px auto\">\n            <template v-slot:text>\n              <v-text-field\n                v-model=\"search\"\n                label=\"Buscar\"\n                prepend-inner-icon=\"mdi-magnify\"\n                variant=\"outlined\"\n                hide-details\n                single-line\n              ></v-text-field>\n            </template>\n            <!-- Students Data -->\n            <v-data-table\n              :items=\"studentsTable\"\n              align=\"center\"\n              :search=\"search\"\n              items-per-page-text=\"Elementos por página\"\n              pageText=\"\"\n            >\n              <template v-slot:top>\n                <v-toolbar flat color=\"blue darken-2\">\n                  <v-toolbar-title>Alumnos</v-toolbar-title>\n                  <v-divider class=\"mx-4\" inset vertical></v-divider>\n                  <v-spacer></v-spacer>\n                  <!-- Button to download data as Excel -->\n                  <v-btn @click=\"downloadAsExcel\">Download as Excel</v-btn>\n                  <v-btn icon color=\"blue darken-2\" @click=\"openCreateDialog\">\n                    <v-icon>mdi-plus</v-icon>\n                  </v-btn>\n                </v-toolbar>\n              </template>\n              <template v-slot:headers>\n                <tr>\n                  <th>{{ \"ID\" }}</th>\n                  <th>{{ \"Nombre\" }}</th>\n                  <th>{{ \"Apellido Paterno\" }}</th>\n                  <th>{{ \"Apellido Materno\" }}</th>\n                  <th>{{ \"Carrera\" }}</th>\n                  <th>{{ \"Proyecto\" }}</th>\n                  <th>{{ \"Calificación Final\" }}</th>\n                  <!-- Exclude numeroTelefonico from the headers -->\n                </tr>\n              </template>\n              <template v-slot:item=\"{ item }\">\n                <tr @click=\"handleRowClick(item)\" class=\"clickable-row\">\n                  <td v-for=\"(value, key) in item\" :key=\"key\">\n                    <!-- Render project name instead of ID -->\n                    <template v-if=\"key === 'project'\">\n                      {{ getProjectName(item[key]) }}\n                    </template>\n                    <template v-else>\n                      {{ value }}\n                    </template>\n                  </td>\n                  <td>\n                    <v-btn\n                      small\n                      color=\"blue darken-2\"\n                      @click=\"openFilesDialog(item, $event)\"\n                    >\n                      Documentos\n                    </v-btn>\n                  </td>\n                  <td>\n                    <v-btn\n                      icon\n                      small\n                      color=\"blue darken-2\"\n                      @click=\"editUser(item, $event)\"\n                      style=\"width: 30px; height: 30px; margin-right: 5px\"\n                    >\n                      <v-icon style=\"font-size: 18px\">mdi-pencil</v-icon>\n                    </v-btn>\n\n                    <v-btn\n                      icon\n                      small\n                      color=\"red darken-2\"\n                      @click=\"deleteUser(item._id, $event)\"\n                      style=\"width: 30px; height: 30px; margin-right: 5px\"\n                    >\n                      <v-icon style=\"font-size: 18px\">mdi-delete</v-icon>\n                    </v-btn>\n                  </td>\n                </tr>\n              </template>\n            </v-data-table>\n          </v-card>\n        </v-col>\n      </v-main>\n\n      <!-- Edit Dialog -->\n      <v-dialog v-model=\"editDialog\" max-width=\"500\" ref=\"editDialogForm\">\n        <v-card>\n          <v-card-title>Editar Alumno</v-card-title>\n          <v-card-text>\n            <v-text-field\n              v-model=\"student.nombre\"\n              label=\"Nombre\"\n              required\n              :rules=\"[(v) => !!v || 'Nombre requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.apellido\"\n              label=\"Apellido Paterno\"\n              required\n              :rules=\"[(v) => !!v || 'Apellido Paterno requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.apellidoM\"\n              label=\"Apellido Materno\"\n              required\n              :rules=\"[(v) => !!v || 'Apellido Materno requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.correo\"\n              label=\"Correo electrónico\"\n              required\n              :rules=\"[\n                (v) => !!v || 'Correo requerido',\n                (v) => /.+@.+\\..+/.test(v) || 'Correo debe ser válido',\n              ]\"\n            ></v-text-field>\n            <v-select\n              v-model=\"student.proyecto\"\n              :items=\"projects.map((project) => project.nombre)\"\n              label=\"Selecciona Proyecto\"\n              required\n              :rules=\"[(v) => !!v || 'Proyecto requerido']\"\n              @change=\"updateEmpresaField($event)\"\n            ></v-select>\n            <v-text-field\n              v-model=\"student.carrera\"\n              label=\"Carrera\"\n              required\n              :rules=\"[(v) => !!v || 'Carrera requerida']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.numeroTelefonico\"\n              label=\"Número telefónico \"\n              type=\"number\"\n              required\n              :rules=\"[(v) => !!v || 'Número telefónico requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.empresa\"\n              label=\"Empresa\"\n              readonly\n              required\n              :rules=\"[(v) => !!v || 'Empresa requerida']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.periodo\"\n              label=\"Periodo\"\n              required\n              :rules=\"[(v) => !!v || 'Periodo requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.asesorExterno.nombre\"\n              label=\"Nombre Asesor externo\"\n              required\n              readonly\n              :rules=\"[(v) => !!v || 'Nombre del Asesor requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.asesorExterno.correo\"\n              label=\"Correo Asesor externo\"\n              required\n              readonly\n              :rules=\"[\n                (v) => !!v || 'Correo del asesor requerido',\n                (v) => /.+@.+\\..+/.test(v) || 'Correo debe ser válido',\n              ]\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.asesorExterno.telefono\"\n              label=\"Número telefónico asesor externo\"\n              type=\"number\"\n              required\n              readonly\n              :rules=\"[(v) => !!v || 'Número telefónico del asesor requerido']\"\n            ></v-text-field>\n            <!-- Add more fields as needed -->\n          </v-card-text>\n          <v-card-actions>\n            <v-btn\n              color=\"blue darken-2\"\n              @click=\"saveEditedStudent\"\n              :disabled=\"!isEditFormValid\"\n              >Guardar</v-btn\n            >\n            <v-btn @click=\"cancelEdit\">Cancelar</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n\n      <!-- Create Dialog -->\n      <v-dialog v-model=\"createDialog\" max-width=\"500\" ref=\"createDialogForm\">\n        <v-card>\n          <v-card-title>Crear Nuevo Alumno</v-card-title>\n          <v-card-text>\n            <!-- <v-text-field v-model=\"newStudent._id\" label=\"ID\"></v-text-field> Remove this line -->\n            <v-text-field\n              v-model=\"student._id\"\n              label=\"ID\"\n              type=\"number\"\n              required\n              :rules=\"[\n                (v) => {\n                  console.log('ID value:', v);\n                  return !!v || 'ID requerido';\n                },\n                (v) => {\n                  const isValid = /^[0-9]+$/.test(v);\n                  console.log('Is ID valid?', isValid);\n                  return isValid || 'ID debe contener solo números';\n                },\n              ]\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.nombre\"\n              label=\"Nombre\"\n              required\n              :rules=\"[(v) => !!v || 'Nombre requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.apellido\"\n              label=\"Apellido Paterno\"\n              required\n              :rules=\"[(v) => !!v || 'Apellido Paterno requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.apellidoM\"\n              label=\"Apellido Materno\"\n              required\n              :rules=\"[(v) => !!v || 'Apellido Materno requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.correo\"\n              label=\"Correo Electrónico\"\n              required\n              :rules=\"[\n                (v) => !!v || 'Correo requerido',\n                (v) => /.+@.+\\..+/.test(v) || 'Correo debe ser válido',\n              ]\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.contraseña\"\n              label=\"Contraseña\"\n              type=\"password\"\n              required\n              :rules=\"[(v) => !!v || 'Contraseña requerida']\"\n            ></v-text-field>\n            <!-- Add dropdown menu for projects -->\n            <v-select\n              v-model=\"student.proyecto\"\n              :items=\"projects.map((project) => project.nombre)\"\n              label=\"Selecciona proyecto\"\n              required\n              :rules=\"[(v) => !!v || 'Proyecto requerido']\"\n              @update:modelValue=\"updateEmpresaField\"\n            ></v-select>\n            <v-text-field\n              v-model=\"student.carrera\"\n              label=\"Carrera\"\n              required\n              :rules=\"[(v) => !!v || 'Carrera requerida']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.numeroTelefonico\"\n              label=\"Número telefónico\"\n              type=\"number\"\n              required\n              :rules=\"[(v) => !!v || 'Número telefónico requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.empresa\"\n              label=\"Empresa\"\n              required\n              :rules=\"[(v) => !!v || 'Empresa requerida']\"\n              readonly\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.periodo\"\n              label=\"Periodo\"\n              required\n              :rules=\"[(v) => !!v || 'Periodo requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.asesorExterno.nombre\"\n              label=\"Nombre Asesor externo\"\n              required\n              readonly\n              :rules=\"[(v) => !!v || 'Nombre del Asesor requerido']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.asesorExterno.correo\"\n              label=\"Correo Asesor externo\"\n              required\n              readonly\n              :rules=\"[\n                (v) => !!v || 'Correo del asesor requerido',\n                (v) => /.+@.+\\..+/.test(v) || 'Correo debe ser válido',\n              ]\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.asesorExterno.telefono\"\n              label=\"Número telefónico de asesor externo\"\n              type=\"number\"\n              required\n              readonly\n              :rules=\"[(v) => !!v || 'Número telefónico de asesor requerido']\"\n            ></v-text-field>\n\n            <!-- Add more fields as needed -->\n          </v-card-text>\n          <v-card-actions>\n            <v-btn\n              color=\"blue darken-2\"\n              :disabled=\"!isCreateFormValid\"\n              @click=\"saveNewStudent\"\n              >Guardar</v-btn\n            >\n            <v-btn @click=\"cancelCreate\">Cancelar</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n      <FilesDialog\n        :isOpen=\"showFilesDialog\"\n        :student=\"selectedStudent\"\n        @update:isOpen=\"showFilesDialog = $event\"\n      />\n    </v-container>\n  </v-app>\n</template>\n\n<script>\nimport axios from 'axios'\nimport FilesDialog from './FilesDialog.vue'\nimport * as XLSX from 'xlsx' // Import XLSX library\n\nexport default {\n  components: {\n    FilesDialog\n  },\n  data () {\n    return {\n      excelFileName: 'alumnos.xlsx',\n      selectedStudent: null,\n      showFilesDialog: false,\n      studentsTable: [],\n      students: [],\n      projects: [],\n      projectMenu: false, // Control for project dropdown menu\n      sidebarItems: [\n        { title: 'Proyectos', icon: 'mdi-folder-outline' },\n        { title: 'Alumnos', icon: 'mdi-account-plus-outline' },\n        { title: 'Maestros', icon: 'mdi-account-tie' }\n      ],\n      userName: localStorage.getItem('userName'),\n      drawer: false,\n      editDialog: false,\n      student: {\n        _id: '',\n        nombre: '',\n        apellido: '',\n        apellidoM: '',\n        correo: '',\n        project: '',\n        carrera: '',\n        numeroTelefonico: '',\n        empresa: '',\n        periodo: '',\n        asesorExterno: {\n          nombre: '',\n          telefono: '',\n          correo: ''\n        }\n        // Add more fields as needed\n      },\n      createDialog: false,\n      search: ''\n    }\n  },\n  computed: {\n    isCreateFormValid () {\n      // Check if the form reference exists\n      if (!this.$refs.createDialogForm) {\n        return false\n      }\n\n      // Manually validate each field\n      return (\n        this.student._id &&\n        this.student.nombre &&\n        this.student.apellido &&\n        this.student.apellidoM &&\n        this.student.correo &&\n        this.student.contraseña &&\n        this.student.proyecto &&\n        this.student.carrera &&\n        this.student.numeroTelefonico &&\n        this.student.empresa &&\n        this.student.periodo &&\n        this.student.asesorExterno.nombre &&\n        this.student.asesorExterno.correo &&\n        this.student.asesorExterno.telefono\n      )\n    },\n    isEditFormValid () {\n      // Check if the form reference exists\n      if (!this.$refs.editDialogForm) {\n        return false\n      }\n\n      // Manually validate each field\n      return (\n        this.student.nombre &&\n        this.student.apellido &&\n        this.student.apellidoM &&\n        this.student.proyecto &&\n        this.student.carrera &&\n        this.student.numeroTelefonico &&\n        this.student.empresa &&\n        this.student.periodo &&\n        this.student.asesorExterno.nombre &&\n        this.student.asesorExterno.correo &&\n        this.student.asesorExterno.telefono\n      )\n    }\n  },\n\n  methods: {\n    downloadAsExcel () {\n      // Filter the students data based on the search term\n      const filteredStudents = this.studentsTable.filter((student) =>\n        Object.values(student).some((value) =>\n          String(value).toLowerCase().includes(this.search.toLowerCase())\n        )\n      )\n      const excelData = filteredStudents.map(\n        ({ carrera, promedio, ...rest }) => ({\n          ...rest,\n          calificacion1: rest.calificacion1 || '',\n          calificacion2: rest.calificacion2 || '',\n          calificacion3: rest.calificacion3 || '',\n          promedio\n        })\n      )\n\n      const ws = XLSX.utils.json_to_sheet(excelData) // Convert data to worksheet\n      const wb = XLSX.utils.book_new() // Create a new workbook\n      XLSX.utils.book_append_sheet(wb, ws, 'Alumnos') // Add the worksheet to the workbook\n      XLSX.writeFile(wb, this.excelFileName) // Save the workbook as Excel file with the specified name\n    },\n    updateEmpresaField (selectedProjectName) {\n      const selectedProject = this.projects.find(\n        (project) => project.nombre === selectedProjectName\n      )\n      if (selectedProject) {\n        this.student.empresa = selectedProject.empresa || '' // Assuming the project object has an 'empresa' field\n\n        const { nombre = '', correo, telefono } = selectedProject.asesorExterno\n        this.student.asesorExterno = { nombre, correo, telefono }\n      }\n    },\n    resetStudent () {\n      this.student = {\n        _id: '',\n        nombre: '',\n        apellido: '',\n        apellidoM: '',\n        correo: '',\n        project: '',\n        carrera: '',\n        numeroTelefonico: '',\n        empresa: '',\n        periodo: '',\n        asesorExterno: {\n          nombre: '',\n          telefono: '',\n          correo: ''\n        }\n        // Add more fields as needed\n      }\n    },\n    openFilesDialog (student, event) {\n      event.stopPropagation()\n      this.selectedStudent = this.students.find((s) => s._id === student._id)\n      this.showFilesDialog = true // Open the dialog with the student's files\n    },\n    async fetchData () {\n      try {\n        const response = await axios.get('http://localhost:3000/students')\n        this.students = response.data\n        this.studentsTable = response.data\n          .map((student) => ({\n            _id: student._id,\n            nombre: student.nombre,\n            apellidoP: student.apellido,\n            apellidoM: student.apellidoM,\n            carrera: student.carrera,\n            proyecto: student.proyecto,\n            promedio: student.promedio,\n            calificacion1: student.calificacion\n          }))\n          .reverse()\n      } catch (error) {\n        console.error('Error fetching students:', error)\n      }\n    },\n    async fetchProjects () {\n      try {\n        const response = await axios.get('http://localhost:3000/projects')\n        // Extract IDs and names from the projects data\n        this.projects = response.data.map((project) => ({\n          id: project._id,\n          nombre: project.nombre,\n          empresa: project.empresa,\n          asesorExterno: project.asesorExterno\n        }))\n      } catch (error) {\n        console.error('Error fetching projects:', error)\n      }\n    },\n\n    async navigate (index) {\n      switch (index) {\n        case 0:\n          this.$router.push('/admin')\n          break\n        case 1:\n          this.$router.push('/admin/students')\n          break\n        case 2:\n          this.$router.push('/admin/Teachers')\n          break\n        default:\n          break\n      }\n    },\n    logout () {\n      // Logic to logout the user\n      // For example, you can clear any user data or tokens stored in localStorage\n      localStorage.removeItem('token')\n\n      // Redirect the user to the login page\n      this.$router.push('/login')\n    },\n    editUser (student, event) {\n      event.stopPropagation() // Stop event propagation\n      // Find the student with the matching _id\n      const foundStudent = this.students.find((s) => s._id === student._id)\n      if (foundStudent) {\n        // If the student is found, copy its data to editedStudent\n        this.student = { ...foundStudent }\n        this.editDialog = true\n      } else {\n        console.error(`Student with ID ${student._id} not found.`)\n      }\n    },\n\n    async saveEditedStudent () {\n      try {\n        const selectedProject = this.projects.find(\n          (project) => project.nombre === this.student.proyecto\n        )\n        if (selectedProject) {\n          // Save the project ID to the new student data\n          this.student.proyecto = selectedProject.id\n        }\n        const response = await axios.put(\n          `http://localhost:3000/users/${this.student._id}`,\n          this.student\n        )\n        console.log('User updated successfully:', response.data)\n        this.fetchData()\n      } catch (error) {\n        console.error('Error updating user:', error)\n      }\n      this.editDialog = false\n    },\n    cancelEdit () {\n      this.editDialog = false\n    },\n    openCreateDialog () {\n      this.resetStudent()\n      this.createDialog = true\n      // Fetch projects data when opening create dialog\n      this.fetchProjects()\n    },\n    async saveNewStudent () {\n      try {\n        // Validate the form\n        if (!this.isCreateFormValid) {\n          return // Exit if the form is not valid\n        }\n        // Find the selected project object based on its name\n        const selectedProject = this.projects.find(\n          (project) => project.nombre === this.student.proyecto\n        )\n        if (selectedProject) {\n          // Save the project ID to the new student data\n          this.student.proyecto = selectedProject.id\n        }\n\n        const response = await axios.post(\n          'http://localhost:3000/register',\n          this.student\n        )\n        if (response.status === 201) {\n          console.log('Student created successfully:', response.data)\n          this.fetchData()\n        } else {\n          console.error('Failed to create student:', response.data)\n        }\n      } catch (error) {\n        if (error.response) {\n          // Display an error message to the user if the email already exists\n          alert(error.response.data.error)\n        }\n      }\n      this.createDialog = false\n    },\n\n    cancelCreate () {\n      this.createDialog = false\n    },\n    async deleteUser (userId, event) {\n      event.stopPropagation() // Stop event propagation\n      if (confirm('¿Estás seguro que deseas borrar este alumno?')) {\n        try {\n          const response = await axios.delete(\n            `http://localhost:3000/users/${userId}`\n          )\n          console.log('User deleted successfully:', response.data)\n          this.fetchData() // Call a method to update the UI or fetch updated data\n        } catch (error) {\n          console.error('Error deleting user:', error)\n        }\n      }\n    },\n\n    selectProject (project) {\n      this.student.proyecto = project.nombre // Set the selected project name\n      this.projectMenu = false // Close the dropdown menu\n    },\n    handleRowClick (item) {\n      // Handle row click event here\n      console.log('Row clicked:', item)\n      // Navigate to a new page and pass the user's ID as route parameters\n      this.$router.push({\n        name: 'UserDetails',\n        params: { userId: item._id }\n      })\n    },\n    getProjectName (projectId) {\n      const project = this.projects.find((project) => project.id === projectId)\n      return project ? project.nombre : ''\n    }\n  },\n  mounted () {\n    this.fetchData()\n    this.fetchProjects()\n  }\n}\n</script>\n\n<style scoped>\n.v-btn i {\n  color: white;\n}\n\n.clickable-row:hover {\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}