{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      selectedFile: null,\n      pdfFiles: [],\n      drawer: false,\n      sidebarItems: [{\n        title: 'Proyecto',\n        icon: 'mdi-folder-outline'\n      }, {\n        title: 'Asesorias',\n        icon: 'mdi-account-plus-outline'\n      }],\n      userId: localStorage.getItem('id'),\n      // Retrieve the user's name from localStorage\n      project: {\n        name: '',\n        company: ''\n      },\n      file1: null,\n      file2: null,\n      file3: null,\n      file1Uploaded: false,\n      file2Uploaded: false,\n      file3Uploaded: false\n    };\n  },\n  mounted() {\n    this.fetchProject();\n    this.fetchPDFFiles();\n  },\n  methods: {\n    navigate(index) {\n      switch (index) {\n        case 0:\n          this.$router.push('/student');\n          break;\n        case 1:\n          this.$router.push('/student/asesorias');\n          break;\n        default:\n          break;\n      }\n    },\n    logout() {\n      // Logic to logout the user\n      // For example, you can clear any user data or tokens stored in localStorage\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      // Redirect the user to the login page\n      this.$router.push('/login');\n    },\n    fetchProject() {\n      // Get the user ID from localStorage or another context\n\n      if (!this.userId) {\n        console.error('No user ID found.');\n        return;\n      }\n\n      // Fetch the user data\n      axios.get(`http://localhost:3000/users/${this.userId}`).then(response => {\n        const user = response.data;\n        const projectId = user.project;\n        if (!projectId) {\n          console.error('No project ID found for the user.');\n          return;\n        }\n\n        // Fetch the project data using the projectId\n        return axios.get(`http://localhost:3000/projects/${projectId}`);\n      }).then(response => {\n        if (response) {\n          this.project = response.data; // Save the project in this.project\n        }\n      }).catch(error => {\n        console.error('Error fetching project data:', error);\n      });\n    },\n    onFileChange(fileNumber, event) {\n      switch (fileNumber) {\n        case 1:\n          this.file1 = event.target.files[0];\n          break;\n        case 2:\n          this.file2 = event.target.files[0];\n          break;\n        case 3:\n          this.file3 = event.target.files[0];\n          break;\n        default:\n          break;\n      }\n    },\n    async uploadFiles() {\n      if (this.file1 && !this.file1Uploaded) {\n        await this.uploadFile(1, this.file1);\n      }\n      if (this.file2 && !this.file2Uploaded) {\n        await this.uploadFile(2, this.file2);\n      }\n      if (this.file3 && !this.file3Uploaded) {\n        await this.uploadFile(3, this.file3);\n      }\n    },\n    async uploadFile(fileNumber, file) {\n      if (!file) {\n        alert(`Please select a PDF file ${fileNumber} first!`);\n        return;\n      }\n      const formData = new FormData();\n      formData.append('file', file);\n      try {\n        const response = await axios.post('http://localhost:3000/upload', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        if (response.status === 201) {\n          alert(`File ${fileNumber} uploaded successfully!`);\n          this[`file${fileNumber}Uploaded`] = true;\n          this.fetchPDFFiles(); // After successful upload, fetch PDF files again\n        } else {\n          alert(`Failed to upload file ${fileNumber}.`);\n        }\n      } catch (error) {\n        console.error(`Error uploading file ${fileNumber}:`, error);\n        alert(`Error uploading file ${fileNumber}.`);\n      }\n    },\n    async fetchPDFFiles() {\n      try {\n        const response = await axios.get('http://localhost:3000/files');\n        this.pdfFiles = response.data;\n        // Check which files have already been uploaded\n        this.pdfFiles.forEach(file => {\n          if (file.filename === 'file1.pdf') {\n            this.file1Uploaded = true;\n          } else if (file.filename === 'file2.pdf') {\n            this.file2Uploaded = true;\n          } else if (file.filename === 'file3.pdf') {\n            this.file3Uploaded = true;\n          }\n        });\n      } catch (error) {\n        console.error('Error fetching PDF files:', error);\n        alert('Error fetching PDF files.');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","selectedFile","pdfFiles","drawer","sidebarItems","title","icon","userId","localStorage","getItem","project","name","company","file1","file2","file3","file1Uploaded","file2Uploaded","file3Uploaded","mounted","fetchProject","fetchPDFFiles","methods","navigate","index","$router","push","logout","removeItem","console","error","get","then","response","user","projectId","catch","onFileChange","fileNumber","event","target","files","uploadFiles","uploadFile","file","alert","formData","FormData","append","post","headers","status","forEach","filename"],"sources":["/Users/angel/school-project/my-app/src/components/StudentPage.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-container>\n      <!-- Top Bar -->\n      <v-app-bar app color=\"blue darken-2\" dark>\n        <!-- Burger menu icon -->\n        <v-btn icon @click=\"drawer = !drawer\">\n          <v-icon>mdi-menu</v-icon>\n        </v-btn>\n        <!-- Title -->\n        <v-toolbar-title>{{ userName }}</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <!-- Logout button -->\n        <v-btn icon @click=\"logout\">\n          <v-icon>mdi-logout</v-icon>\n        </v-btn>\n      </v-app-bar>\n\n      <!-- Sidebar -->\n      <v-navigation-drawer app v-model=\"drawer\" color=\"blue darken-2\" dark>\n        <v-list dense>\n          <v-list-item\n            v-for=\"(item, index) in sidebarItems\"\n            :key=\"index\"\n            @click=\"navigate(index)\"\n          >\n            <v-list-item-action>\n              <v-icon>{{ item.icon }}</v-icon>\n            </v-list-item-action>\n            <v-list-item-content>\n              <v-list-item-title>{{ item.title }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n        </v-list>\n      </v-navigation-drawer>\n\n      <v-main>\n        <v-col cols=\"12\" style=\"max-width: 800px; margin: 0 auto\">\n          <v-card class=\"mx-auto\" max-width=\"600\">\n            <v-card-title class=\"blue darken-2 white--text\"\n              >Project Information</v-card-title\n            >\n            <v-card-text>\n              <v-row>\n                <v-col cols=\"12\">\n                  <v-text-field\n                    v-model=\"project.name\"\n                    label=\"Project Name\"\n                    readonly\n                  ></v-text-field>\n                </v-col>\n                <v-col cols=\"12\">\n                  <v-text-field\n                    v-model=\"project.company\"\n                    label=\"Company\"\n                    readonly\n                  ></v-text-field>\n                </v-col>\n              </v-row>\n              <v-divider class=\"my-4\"></v-divider>\n              <v-row>\n                <v-col cols=\"12\" md=\"4\">\n                  <v-file-input\n                    v-model=\"file1\"\n                    label=\"Upload File 1\"\n                    prepend-icon=\"mdi-upload\"\n                    type=\"file\"\n                    :disabled=\"file1Uploaded\"\n                    @change=\"onFileChange(1, $event)\"\n                    accept=\"application/pdf\"\n                  ></v-file-input>\n                </v-col>\n                <v-col cols=\"12\" md=\"4\">\n                  <v-file-input\n                    v-model=\"file2\"\n                    label=\"Upload File 2\"\n                    prepend-icon=\"mdi-upload\"\n                    type=\"file\"\n                    :disabled=\"!file1Uploaded || file2Uploaded\"\n                    @change=\"onFileChange(2, $event)\"\n                    accept=\"application/pdf\"\n                  ></v-file-input>\n                </v-col>\n                <v-col cols=\"12\" md=\"4\">\n                  <v-file-input\n                    v-model=\"file3\"\n                    label=\"Upload File 3\"\n                    prepend-icon=\"mdi-upload\"\n                    type=\"file\"\n                    :disabled=\"!file2Uploaded\"\n                    @change=\"onFileChange(3, $event)\"\n                    accept=\"application/pdf\"\n                  ></v-file-input>\n                </v-col>\n              </v-row>\n            </v-card-text>\n            <div>\n              <div v-if=\"pdfFiles.length > 0\">\n                <h2>Uploaded PDF Files</h2>\n                <ul>\n                  <li v-for=\"(file, index) in pdfFiles\" :key=\"index\">\n                    <!-- Download PDF -->\n                    <a\n                      :href=\"'data:application/octet-stream;base64,' + file.data\"\n                      :download=\"file.filename\"\n                      >{{ file.filename }}</a\n                    >\n                  </li>\n                </ul>\n              </div>\n            </div>\n            <v-card-actions>\n              <v-btn color=\"blue darken-2\" @click=\"uploadFiles\">Submit Files</v-btn>\n            </v-card-actions>\n          </v-card>\n        </v-col>\n      </v-main>\n    </v-container>\n  </v-app>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  data () {\n    return {\n      selectedFile: null,\n      pdfFiles: [],\n      drawer: false,\n      sidebarItems: [\n        { title: 'Proyecto', icon: 'mdi-folder-outline' },\n        { title: 'Asesorias', icon: 'mdi-account-plus-outline' }\n      ],\n      userId: localStorage.getItem('id'), // Retrieve the user's name from localStorage\n      project: {\n        name: '',\n        company: ''\n      },\n      file1: null,\n      file2: null,\n      file3: null,\n      file1Uploaded: false,\n      file2Uploaded: false,\n      file3Uploaded: false\n    }\n  },\n  mounted () {\n    this.fetchProject()\n    this.fetchPDFFiles()\n  },\n  methods: {\n    navigate (index) {\n      switch (index) {\n        case 0:\n          this.$router.push('/student')\n          break\n        case 1:\n          this.$router.push('/student/asesorias')\n          break\n        default:\n          break\n      }\n    },\n    logout () {\n      // Logic to logout the user\n      // For example, you can clear any user data or tokens stored in localStorage\n      localStorage.removeItem('token')\n      localStorage.removeItem('user')\n      // Redirect the user to the login page\n      this.$router.push('/login')\n    },\n    fetchProject () {\n      // Get the user ID from localStorage or another context\n\n      if (!this.userId) {\n        console.error('No user ID found.')\n        return\n      }\n\n      // Fetch the user data\n      axios\n        .get(`http://localhost:3000/users/${this.userId}`)\n        .then((response) => {\n          const user = response.data\n          const projectId = user.project\n\n          if (!projectId) {\n            console.error('No project ID found for the user.')\n            return\n          }\n\n          // Fetch the project data using the projectId\n          return axios.get(`http://localhost:3000/projects/${projectId}`)\n        })\n        .then((response) => {\n          if (response) {\n            this.project = response.data // Save the project in this.project\n          }\n        })\n        .catch((error) => {\n          console.error('Error fetching project data:', error)\n        })\n    },\n    onFileChange (fileNumber, event) {\n      switch (fileNumber) {\n        case 1:\n          this.file1 = event.target.files[0]\n          break\n        case 2:\n          this.file2 = event.target.files[0]\n          break\n        case 3:\n          this.file3 = event.target.files[0]\n          break\n        default:\n          break\n      }\n    },\n    async uploadFiles () {\n      if (this.file1 && !this.file1Uploaded) {\n        await this.uploadFile(1, this.file1)\n      }\n      if (this.file2 && !this.file2Uploaded) {\n        await this.uploadFile(2, this.file2)\n      }\n      if (this.file3 && !this.file3Uploaded) {\n        await this.uploadFile(3, this.file3)\n      }\n    },\n    async uploadFile (fileNumber, file) {\n      if (!file) {\n        alert(`Please select a PDF file ${fileNumber} first!`)\n        return\n      }\n\n      const formData = new FormData()\n      formData.append('file', file)\n\n      try {\n        const response = await axios.post(\n          'http://localhost:3000/upload',\n          formData,\n          {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          }\n        )\n\n        if (response.status === 201) {\n          alert(`File ${fileNumber} uploaded successfully!`)\n          this[`file${fileNumber}Uploaded`] = true\n          this.fetchPDFFiles() // After successful upload, fetch PDF files again\n        } else {\n          alert(`Failed to upload file ${fileNumber}.`)\n        }\n      } catch (error) {\n        console.error(`Error uploading file ${fileNumber}:`, error)\n        alert(`Error uploading file ${fileNumber}.`)\n      }\n    },\n    async fetchPDFFiles () {\n      try {\n        const response = await axios.get('http://localhost:3000/files')\n        this.pdfFiles = response.data\n        // Check which files have already been uploaded\n        this.pdfFiles.forEach(file => {\n          if (file.filename === 'file1.pdf') {\n            this.file1Uploaded = true\n          } else if (file.filename === 'file2.pdf') {\n            this.file2Uploaded = true\n          } else if (file.filename === 'file3.pdf') {\n            this.file3Uploaded = true\n          }\n        })\n      } catch (error) {\n        console.error('Error fetching PDF files:', error)\n        alert('Error fetching PDF files.')\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.v-btn i {\n  color: white;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}