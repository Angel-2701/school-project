{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport ProjectCard from \"@/components/ProjectCard.vue\";\nexport default {\n  components: {\n    ProjectCard\n  },\n  data() {\n    return {\n      projects: [],\n      tableHeaders: [],\n      sidebarItems: [{\n        title: \"Projects\",\n        icon: \"mdi-folder-outline\"\n      }],\n      userName: \"John Doe\",\n      drawer: false,\n      editDialog: false,\n      editedProjectName: \"\",\n      editedProjectId: \"\",\n      createDialog: false,\n      newProject: {\n        name: \"\",\n        company: \"\",\n        _id: \"\"\n      }\n    };\n  },\n  methods: {\n    navigate(index) {\n      switch (index) {\n        case 0:\n          this.$router.push(\"/admin\");\n          break;\n        case 1:\n          this.$router.push(\"/Students\");\n          break;\n        case 2:\n          this.$router.push(\"/Teachers\");\n          break;\n        default:\n          break;\n      }\n    },\n    logout() {\n      // Logic to logout the user\n      // For example, you can clear any user data or tokens stored in localStorage\n      localStorage.removeItem(\"token\");\n\n      // Redirect the user to the login page\n      this.$router.push(\"/login\");\n    },\n    editProject(project) {\n      this.editedProjectName = project.name;\n      this.editedProjectId = project._id;\n      this.editDialog = true;\n    },\n    saveEditedProject() {\n      // Create an object with the updated project data\n      const updatedProject = {\n        name: this.editedProjectName // Assuming the only editable field is the project name\n      };\n\n      // Make an HTTP PUT request to update the project\n      axios.put(`http://localhost:3000/projects/${this.editedProjectId}`, updatedProject).then(response => {\n        // Check if the project was successfully updated\n        if (response.status === 200) {\n          console.log(\"Project updated successfully:\", response.data);\n\n          // Optionally, you can fetch the updated projects from the server again\n          this.fetchData();\n        } else {\n          console.error(\"Failed to update project:\", response.data);\n        }\n      }).catch(error => {\n        console.error(\"Error updating project:\", error);\n      });\n\n      // Close the edit dialog\n      this.editDialog = false;\n    },\n    deleteProject(project) {\n      // Prompt the user for confirmation before deleting the project\n      if (confirm(\"Are you sure you want to delete this project?\")) {\n        // Make an HTTP DELETE request to delete the project\n        axios.delete(`http://localhost:3000/projects/${project._id}`).then(response => {\n          // Check if the project was successfully deleted\n          if (response.status === 200) {\n            console.log(\"Project deleted successfully:\", response.data);\n\n            // Optionally, you can fetch the updated projects from the server again\n            this.fetchData();\n          } else {\n            console.error(\"Failed to delete project:\", response.data);\n          }\n        }).catch(error => {\n          console.error(\"Error deleting project:\", error);\n        });\n      }\n    },\n    openCreateDialog() {\n      this.createDialog = true;\n    },\n    saveNewProject() {\n      axios.post(\"http://localhost:3000/projects\", this.newProject).then(response => {\n        if (response.status === 201) {\n          console.log(\"Project created successfully:\", response.data);\n          this.fetchData();\n        } else {\n          console.error(\"Failed to create project:\", response.data);\n        }\n      }).catch(error => {\n        console.error(\"Error creating project:\", error);\n      });\n      this.createDialog = false;\n    },\n    cancelCreate() {\n      this.createDialog = false;\n    },\n    cancelEdit() {\n      this.editDialog = false;\n    }\n  },\n  mounted() {\n    this.fetchData();\n  }\n};","map":{"version":3,"names":["axios","ProjectCard","components","data","projects","tableHeaders","sidebarItems","title","icon","userName","drawer","editDialog","editedProjectName","editedProjectId","createDialog","newProject","name","company","_id","methods","navigate","index","$router","push","logout","localStorage","removeItem","editProject","project","saveEditedProject","updatedProject","put","then","response","status","console","log","fetchData","error","catch","deleteProject","confirm","delete","openCreateDialog","saveNewProject","post","cancelCreate","cancelEdit","mounted"],"sources":["/Users/angel/school-project/my-app/src/components/TeacherPage.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-container>\n      <!-- Top Bar -->\n      <v-app-bar app color=\"blue darken-2\" dark>\n        <!-- Burger menu icon -->\n        <v-btn icon @click=\"drawer = !drawer\">\n          <v-icon>mdi-menu</v-icon>\n        </v-btn>\n        <!-- Title -->\n        <v-toolbar-title>{{ userName }}</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <!-- Logout button -->\n        <v-btn icon @click=\"logout\">\n          <v-icon>mdi-logout</v-icon>\n        </v-btn>\n      </v-app-bar>\n\n      <!-- Sidebar -->\n      <v-navigation-drawer app v-model=\"drawer\" color=\"blue darken-2\" dark>\n        <v-list dense>\n          <v-list-item\n            v-for=\"(item, index) in sidebarItems\"\n            :key=\"index\"\n            @click=\"navigate(index)\"\n          >\n            <v-list-item-action>\n              <v-icon>{{ item.icon }}</v-icon>\n            </v-list-item-action>\n            <v-list-item-content>\n              <v-list-item-title>{{ item.title }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n        </v-list>\n      </v-navigation-drawer>\n\n      <v-main>\n        <!-- Main content -->\n        <ProjectCard />\n      </v-main>\n    </v-container>\n  </v-app>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport ProjectCard from \"@/components/ProjectCard.vue\";\n\nexport default {\n  components: {\n    ProjectCard,\n  },\n  data() {\n    return {\n      projects: [],\n      tableHeaders: [],\n      sidebarItems: [{ title: \"Projects\", icon: \"mdi-folder-outline\" }],\n      userName: \"John Doe\",\n      drawer: false,\n      editDialog: false,\n      editedProjectName: \"\",\n      editedProjectId: \"\",\n      createDialog: false,\n      newProject: {\n        name: \"\",\n        company: \"\",\n        _id: \"\",\n      },\n    };\n  },\n  methods: {\n    navigate(index) {\n      switch (index) {\n        case 0:\n          this.$router.push(\"/admin\");\n          break;\n        case 1:\n          this.$router.push(\"/Students\");\n          break;\n        case 2:\n          this.$router.push(\"/Teachers\");\n          break;\n        default:\n          break;\n      }\n    },\n    logout() {\n      // Logic to logout the user\n      // For example, you can clear any user data or tokens stored in localStorage\n      localStorage.removeItem(\"token\");\n\n      // Redirect the user to the login page\n      this.$router.push(\"/login\");\n    },\n    editProject(project) {\n      this.editedProjectName = project.name;\n      this.editedProjectId = project._id;\n      this.editDialog = true;\n    },\n    saveEditedProject() {\n      // Create an object with the updated project data\n      const updatedProject = {\n        name: this.editedProjectName, // Assuming the only editable field is the project name\n      };\n\n      // Make an HTTP PUT request to update the project\n      axios\n        .put(\n          `http://localhost:3000/projects/${this.editedProjectId}`,\n          updatedProject\n        )\n        .then((response) => {\n          // Check if the project was successfully updated\n          if (response.status === 200) {\n            console.log(\"Project updated successfully:\", response.data);\n\n            // Optionally, you can fetch the updated projects from the server again\n            this.fetchData();\n          } else {\n            console.error(\"Failed to update project:\", response.data);\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error updating project:\", error);\n        });\n\n      // Close the edit dialog\n      this.editDialog = false;\n    },\n\n    deleteProject(project) {\n      // Prompt the user for confirmation before deleting the project\n      if (confirm(\"Are you sure you want to delete this project?\")) {\n        // Make an HTTP DELETE request to delete the project\n        axios\n          .delete(`http://localhost:3000/projects/${project._id}`)\n          .then((response) => {\n            // Check if the project was successfully deleted\n            if (response.status === 200) {\n              console.log(\"Project deleted successfully:\", response.data);\n\n              // Optionally, you can fetch the updated projects from the server again\n              this.fetchData();\n            } else {\n              console.error(\"Failed to delete project:\", response.data);\n            }\n          })\n          .catch((error) => {\n            console.error(\"Error deleting project:\", error);\n          });\n      }\n    },\n    openCreateDialog() {\n      this.createDialog = true;\n    },\n    saveNewProject() {\n      axios\n        .post(\"http://localhost:3000/projects\", this.newProject)\n        .then((response) => {\n          if (response.status === 201) {\n            console.log(\"Project created successfully:\", response.data);\n            this.fetchData();\n          } else {\n            console.error(\"Failed to create project:\", response.data);\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error creating project:\", error);\n        });\n      this.createDialog = false;\n    },\n    cancelCreate() {\n      this.createDialog = false;\n    },\n\n    cancelEdit() {\n      this.editDialog = false;\n    },\n  },\n  mounted() {\n    this.fetchData();\n  },\n};\n</script>\n\n<style scoped>\n/* Adjustments for burger menu icon color */\n.v-btn i {\n  color: white;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}