{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      projects: [],\n      tableHeaders: [],\n      sidebarItems: [{\n        title: 'Projects',\n        icon: 'mdi-folder-outline'\n      }, {\n        title: 'Students',\n        icon: 'mdi-account-plus-outline'\n      }, {\n        title: 'Teachers',\n        icon: 'mdi-account-tie'\n      }],\n      userName: 'John Doe',\n      drawer: false,\n      editDialog: false,\n      editedProjectName: '',\n      editedProjectId: '',\n      createDialog: false,\n      newProject: {\n        name: '',\n        company: '',\n        _id: ''\n      }\n    };\n  },\n  methods: {\n    async fetchData() {\n      try {\n        const response = await axios.get('http://localhost:3000/projects');\n        this.projects = response.data;\n\n        // Generate table headers based on the keys of the first project\n        if (this.projects.length > 0) {\n          // Access the first project from the reactive proxy object\n          const firstProject = this.projects[0];\n\n          // Extract keys from the first project and capitalize them\n          const keys = Object.keys(firstProject).map(key => ({\n            text: key.charAt(0).toUpperCase() + key.slice(1),\n            // Capitalize first letter\n            value: key\n          }));\n\n          // Set the tableHeaders property with the generated headers\n          this.tableHeaders = keys;\n        }\n      } catch (error) {\n        console.error('Error fetching projects:', error);\n      }\n    },\n    navigate(index) {\n      switch (index) {\n        case 0:\n          this.$router.push('/admin');\n          break;\n        case 1:\n          this.$router.push('/Students');\n          break;\n        case 2:\n          this.$router.push('/Teachers');\n          break;\n        default:\n          break;\n      }\n    },\n    logout() {\n      // Logic to logout the user\n    },\n    editProject(project) {\n      this.editedProjectName = project.name;\n      this.editedProjectId = project._id;\n      this.editDialog = true;\n    },\n    saveEditedProject() {\n      // Create an object with the updated project data\n      const updatedProject = {\n        name: this.editedProjectName // Assuming the only editable field is the project name\n      };\n\n      // Make an HTTP PUT request to update the project\n      axios.put(`http://localhost:3000/projects/${this.editedProjectId}`, updatedProject).then(response => {\n        // Check if the project was successfully updated\n        if (response.status === 200) {\n          console.log('Project updated successfully:', response.data);\n\n          // Optionally, you can fetch the updated projects from the server again\n          this.fetchData();\n        } else {\n          console.error('Failed to update project:', response.data);\n        }\n      }).catch(error => {\n        console.error('Error updating project:', error);\n      });\n\n      // Close the edit dialog\n      this.editDialog = false;\n    },\n    deleteProject(project) {\n      // Prompt the user for confirmation before deleting the project\n      if (confirm('Are you sure you want to delete this project?')) {\n        // Make an HTTP DELETE request to delete the project\n        axios.delete(`http://localhost:3000/projects/${project._id}`).then(response => {\n          // Check if the project was successfully deleted\n          if (response.status === 200) {\n            console.log('Project deleted successfully:', response.data);\n\n            // Optionally, you can fetch the updated projects from the server again\n            this.fetchData();\n          } else {\n            console.error('Failed to delete project:', response.data);\n          }\n        }).catch(error => {\n          console.error('Error deleting project:', error);\n        });\n      }\n    },\n    openCreateDialog() {\n      this.createDialog = true;\n    },\n    saveNewProject() {\n      axios.post('http://localhost:3000/projects', this.newProject).then(response => {\n        if (response.status === 201) {\n          console.log('Project created successfully:', response.data);\n          this.fetchData();\n        } else {\n          console.error('Failed to create project:', response.data);\n        }\n      }).catch(error => {\n        console.error('Error creating project:', error);\n      });\n      this.createDialog = false;\n    },\n    cancelCreate() {\n      this.createDialog = false;\n    },\n    cancelEdit() {\n      this.editDialog = false;\n    }\n  },\n  mounted() {\n    this.fetchData();\n  }\n};","map":{"version":3,"names":["axios","data","projects","tableHeaders","sidebarItems","title","icon","userName","drawer","editDialog","editedProjectName","editedProjectId","createDialog","newProject","name","company","_id","methods","fetchData","response","get","length","firstProject","keys","Object","map","key","text","charAt","toUpperCase","slice","value","error","console","navigate","index","$router","push","logout","editProject","project","saveEditedProject","updatedProject","put","then","status","log","catch","deleteProject","confirm","delete","openCreateDialog","saveNewProject","post","cancelCreate","cancelEdit","mounted"],"sources":["/Users/angel/project-system/my-app/src/components/AdminPage.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-container fluid>\n      <!-- Top Bar -->\n      <v-app-bar app color=\"blue darken-2\" dark>\n        <!-- Burger menu icon -->\n        <v-btn icon @click=\"drawer = !drawer\">\n          <v-icon>mdi-menu</v-icon>\n        </v-btn>\n        <!-- Title -->\n        <v-toolbar-title>{{ userName }}</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <!-- Logout button -->\n        <v-btn icon @click=\"logout\">\n          <v-icon>mdi-logout</v-icon>\n        </v-btn>\n      </v-app-bar>\n\n      <!-- Sidebar -->\n      <v-navigation-drawer app v-model=\"drawer\" color=\"blue darken-2\" dark>\n        <v-list dense>\n          <v-list-item\n            v-for=\"(item, index) in sidebarItems\"\n            :key=\"index\"\n            @click=\"navigate(index)\"\n          >\n            <v-list-item-action>\n              <v-icon>{{ item.icon }}</v-icon>\n            </v-list-item-action>\n            <v-list-item-content>\n              <v-list-item-title>{{ item.title }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n        </v-list>\n      </v-navigation-drawer>\n\n      <v-main style=\"width: 100%\">\n        <!-- Main content -->\n        <v-col cols=\"12\" style=\"max-width: 1184px; margin: 0px auto\">\n          <v-card style=\"width: 100%; margin: 0px auto\">\n            <!-- Projects Data -->\n            <v-data-table\n              v-if=\"projects.length > 0\"\n              :items=\"projects\"\n              align=\"center\"\n              style=\"max-width: 100%; margin: 0px auto\"\n            >\n              <template v-slot:top>\n                <v-toolbar flat color=\"blue darken-2\">\n                  <v-toolbar-title>Projects</v-toolbar-title>\n                  <v-divider class=\"mx-4\" inset vertical></v-divider>\n                  <v-spacer></v-spacer>\n                  <v-btn icon color=\"blue darken-2\" @click=\"openCreateDialog\">\n                    <v-icon>mdi-plus</v-icon>\n                  </v-btn>\n                </v-toolbar>\n              </template>\n              <template v-slot:item=\"{ item }\">\n                <tr>\n                  <td v-for=\"(value, key) in item\" :key=\"key\">\n                    {{ value }}\n                  </td>\n                  <td>\n                    <!-- Use small prop to make the buttons smaller -->\n                    <v-btn\n                      icon\n                      small\n                      color=\"blue darken-2\"\n                      @click=\"editProject(item)\"\n                      style=\"width: 30px; height: 30px; margin-right: 5px\"\n                    >\n                      <v-icon style=\"font-size: 18px\">mdi-pencil</v-icon>\n                    </v-btn>\n                    <v-btn\n                      icon\n                      small\n                      color=\"red darken-2\"\n                      @click=\"deleteProject(item)\"\n                      style=\"width: 30px; height: 30px; margin-right: 5px\"\n                    >\n                      <v-icon style=\"font-size: 18px\">mdi-delete</v-icon>\n                    </v-btn>\n                  </td>\n                </tr>\n              </template>\n            </v-data-table>\n          </v-card>\n        </v-col>\n      </v-main>\n\n      <!-- Edit Dialog -->\n      <v-dialog v-model=\"editDialog\" max-width=\"500\">\n        <v-card>\n          <v-card-title>Edit Project Name</v-card-title>\n          <v-card-text>\n            <v-text-field\n              v-model=\"editedProjectName\"\n              label=\"Project Name\"\n            ></v-text-field>\n          </v-card-text>\n          <v-card-actions>\n            <v-btn color=\"blue darken-2\" @click=\"saveEditedProject\">Save</v-btn>\n            <v-btn @click=\"cancelEdit\">Cancel</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n\n      <!-- Create Dialog -->\n      <v-dialog v-model=\"createDialog\" max-width=\"500\">\n        <v-card>\n          <v-card-title>Create New Project</v-card-title>\n          <v-card-text>\n            <v-text-field v-model=\"newProject._id\" label=\"ID\"></v-text-field>\n            <v-text-field\n              v-model=\"newProject.name\"\n              label=\"Project Name\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"newProject.company\"\n              label=\"Company\"\n            ></v-text-field>\n          </v-card-text>\n          <v-card-actions>\n            <v-btn color=\"blue darken-2\" @click=\"saveNewProject\">Save</v-btn>\n            <v-btn @click=\"cancelCreate\">Cancel</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n    </v-container>\n  </v-app>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  data () {\n    return {\n      projects: [],\n      tableHeaders: [],\n      sidebarItems: [\n        { title: 'Projects', icon: 'mdi-folder-outline' },\n        { title: 'Students', icon: 'mdi-account-plus-outline' },\n        { title: 'Teachers', icon: 'mdi-account-tie' }\n      ],\n      userName: 'John Doe',\n      drawer: false,\n      editDialog: false,\n      editedProjectName: '',\n      editedProjectId: '',\n      createDialog: false,\n      newProject: {\n        name: '',\n        company: '',\n        _id: ''\n      }\n    }\n  },\n  methods: {\n    async fetchData () {\n      try {\n        const response = await axios.get('http://localhost:3000/projects')\n        this.projects = response.data\n\n        // Generate table headers based on the keys of the first project\n        if (this.projects.length > 0) {\n          // Access the first project from the reactive proxy object\n          const firstProject = this.projects[0]\n\n          // Extract keys from the first project and capitalize them\n          const keys = Object.keys(firstProject).map((key) => ({\n            text: key.charAt(0).toUpperCase() + key.slice(1), // Capitalize first letter\n            value: key\n          }))\n\n          // Set the tableHeaders property with the generated headers\n          this.tableHeaders = keys\n        }\n      } catch (error) {\n        console.error('Error fetching projects:', error)\n      }\n    },\n\n    navigate (index) {\n      switch (index) {\n        case 0:\n          this.$router.push('/admin')\n          break\n        case 1:\n          this.$router.push('/Students')\n          break\n        case 2:\n          this.$router.push('/Teachers')\n          break\n        default:\n          break\n      }\n    },\n    logout () {\n      // Logic to logout the user\n    },\n    editProject (project) {\n      this.editedProjectName = project.name\n      this.editedProjectId = project._id\n      this.editDialog = true\n    },\n    saveEditedProject () {\n      // Create an object with the updated project data\n      const updatedProject = {\n        name: this.editedProjectName // Assuming the only editable field is the project name\n      }\n\n      // Make an HTTP PUT request to update the project\n      axios\n        .put(\n          `http://localhost:3000/projects/${this.editedProjectId}`,\n          updatedProject\n        )\n        .then((response) => {\n          // Check if the project was successfully updated\n          if (response.status === 200) {\n            console.log('Project updated successfully:', response.data)\n\n            // Optionally, you can fetch the updated projects from the server again\n            this.fetchData()\n          } else {\n            console.error('Failed to update project:', response.data)\n          }\n        })\n        .catch((error) => {\n          console.error('Error updating project:', error)\n        })\n\n      // Close the edit dialog\n      this.editDialog = false\n    },\n\n    deleteProject (project) {\n      // Prompt the user for confirmation before deleting the project\n      if (confirm('Are you sure you want to delete this project?')) {\n        // Make an HTTP DELETE request to delete the project\n        axios\n          .delete(`http://localhost:3000/projects/${project._id}`)\n          .then((response) => {\n            // Check if the project was successfully deleted\n            if (response.status === 200) {\n              console.log('Project deleted successfully:', response.data)\n\n              // Optionally, you can fetch the updated projects from the server again\n              this.fetchData()\n            } else {\n              console.error('Failed to delete project:', response.data)\n            }\n          })\n          .catch((error) => {\n            console.error('Error deleting project:', error)\n          })\n      }\n    },\n    openCreateDialog () {\n      this.createDialog = true\n    },\n    saveNewProject () {\n      axios\n        .post('http://localhost:3000/projects', this.newProject)\n        .then((response) => {\n          if (response.status === 201) {\n            console.log('Project created successfully:', response.data)\n            this.fetchData()\n          } else {\n            console.error('Failed to create project:', response.data)\n          }\n        })\n        .catch((error) => {\n          console.error('Error creating project:', error)\n        })\n      this.createDialog = false\n    },\n    cancelCreate () {\n      this.createDialog = false\n    },\n\n    cancelEdit () {\n      this.editDialog = false\n    }\n  },\n  mounted () {\n    this.fetchData()\n  }\n}\n</script>\n\n<style scoped>\n/* Adjustments for burger menu icon color */\n.v-btn i {\n  color: white;\n}\n</style>\n"],"mappings":";AAqIA,OAAOA,KAAI,MAAO,OAAM;AAExB,eAAe;EACbC,IAAGA,CAAA,EAAK;IACN,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,YAAY,EAAE,EAAE;MAChBC,YAAY,EAAE,CACZ;QAAEC,KAAK,EAAE,UAAU;QAAEC,IAAI,EAAE;MAAqB,CAAC,EACjD;QAAED,KAAK,EAAE,UAAU;QAAEC,IAAI,EAAE;MAA2B,CAAC,EACvD;QAAED,KAAK,EAAE,UAAU;QAAEC,IAAI,EAAE;MAAkB,EAC9C;MACDC,QAAQ,EAAE,UAAU;MACpBC,MAAM,EAAE,KAAK;MACbC,UAAU,EAAE,KAAK;MACjBC,iBAAiB,EAAE,EAAE;MACrBC,eAAe,EAAE,EAAE;MACnBC,YAAY,EAAE,KAAK;MACnBC,UAAU,EAAE;QACVC,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE,EAAE;QACXC,GAAG,EAAE;MACP;IACF;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,SAAQA,CAAA,EAAK;MACjB,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMnB,KAAK,CAACoB,GAAG,CAAC,gCAAgC;QACjE,IAAI,CAAClB,QAAO,GAAIiB,QAAQ,CAAClB,IAAG;;QAE5B;QACA,IAAI,IAAI,CAACC,QAAQ,CAACmB,MAAK,GAAI,CAAC,EAAE;UAC5B;UACA,MAAMC,YAAW,GAAI,IAAI,CAACpB,QAAQ,CAAC,CAAC;;UAEpC;UACA,MAAMqB,IAAG,GAAIC,MAAM,CAACD,IAAI,CAACD,YAAY,CAAC,CAACG,GAAG,CAAEC,GAAG,KAAM;YACnDC,IAAI,EAAED,GAAG,CAACE,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,IAAIH,GAAG,CAACI,KAAK,CAAC,CAAC,CAAC;YAAE;YAClDC,KAAK,EAAEL;UACT,CAAC,CAAC;;UAEF;UACA,IAAI,CAACvB,YAAW,GAAIoB,IAAG;QACzB;MACF,EAAE,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK;MACjD;IACF,CAAC;IAEDE,QAAOA,CAAGC,KAAK,EAAE;MACf,QAAQA,KAAK;QACX,KAAK,CAAC;UACJ,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ;UAC1B;QACF,KAAK,CAAC;UACJ,IAAI,CAACD,OAAO,CAACC,IAAI,CAAC,WAAW;UAC7B;QACF,KAAK,CAAC;UACJ,IAAI,CAACD,OAAO,CAACC,IAAI,CAAC,WAAW;UAC7B;QACF;UACE;MACJ;IACF,CAAC;IACDC,MAAKA,CAAA,EAAK;MACR;IAAA,CACD;IACDC,WAAUA,CAAGC,OAAO,EAAE;MACpB,IAAI,CAAC9B,iBAAgB,GAAI8B,OAAO,CAAC1B,IAAG;MACpC,IAAI,CAACH,eAAc,GAAI6B,OAAO,CAACxB,GAAE;MACjC,IAAI,CAACP,UAAS,GAAI,IAAG;IACvB,CAAC;IACDgC,iBAAgBA,CAAA,EAAK;MACnB;MACA,MAAMC,cAAa,GAAI;QACrB5B,IAAI,EAAE,IAAI,CAACJ,iBAAgB,CAAE;MAC/B;;MAEA;MACAV,KAAI,CACD2C,GAAG,CACD,kCAAiC,IAAI,CAAChC,eAAgB,EAAC,EACxD+B,cACF,EACCE,IAAI,CAAEzB,QAAQ,IAAK;QAClB;QACA,IAAIA,QAAQ,CAAC0B,MAAK,KAAM,GAAG,EAAE;UAC3BZ,OAAO,CAACa,GAAG,CAAC,+BAA+B,EAAE3B,QAAQ,CAAClB,IAAI;;UAE1D;UACA,IAAI,CAACiB,SAAS,CAAC;QACjB,OAAO;UACLe,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEb,QAAQ,CAAClB,IAAI;QAC1D;MACF,CAAC,EACA8C,KAAK,CAAEf,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK;MAChD,CAAC;;MAEH;MACA,IAAI,CAACvB,UAAS,GAAI,KAAI;IACxB,CAAC;IAEDuC,aAAYA,CAAGR,OAAO,EAAE;MACtB;MACA,IAAIS,OAAO,CAAC,+CAA+C,CAAC,EAAE;QAC5D;QACAjD,KAAI,CACDkD,MAAM,CAAE,kCAAiCV,OAAO,CAACxB,GAAI,EAAC,EACtD4B,IAAI,CAAEzB,QAAQ,IAAK;UAClB;UACA,IAAIA,QAAQ,CAAC0B,MAAK,KAAM,GAAG,EAAE;YAC3BZ,OAAO,CAACa,GAAG,CAAC,+BAA+B,EAAE3B,QAAQ,CAAClB,IAAI;;YAE1D;YACA,IAAI,CAACiB,SAAS,CAAC;UACjB,OAAO;YACLe,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEb,QAAQ,CAAClB,IAAI;UAC1D;QACF,CAAC,EACA8C,KAAK,CAAEf,KAAK,IAAK;UAChBC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK;QAChD,CAAC;MACL;IACF,CAAC;IACDmB,gBAAeA,CAAA,EAAK;MAClB,IAAI,CAACvC,YAAW,GAAI,IAAG;IACzB,CAAC;IACDwC,cAAaA,CAAA,EAAK;MAChBpD,KAAI,CACDqD,IAAI,CAAC,gCAAgC,EAAE,IAAI,CAACxC,UAAU,EACtD+B,IAAI,CAAEzB,QAAQ,IAAK;QAClB,IAAIA,QAAQ,CAAC0B,MAAK,KAAM,GAAG,EAAE;UAC3BZ,OAAO,CAACa,GAAG,CAAC,+BAA+B,EAAE3B,QAAQ,CAAClB,IAAI;UAC1D,IAAI,CAACiB,SAAS,CAAC;QACjB,OAAO;UACLe,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEb,QAAQ,CAAClB,IAAI;QAC1D;MACF,CAAC,EACA8C,KAAK,CAAEf,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK;MAChD,CAAC;MACH,IAAI,CAACpB,YAAW,GAAI,KAAI;IAC1B,CAAC;IACD0C,YAAWA,CAAA,EAAK;MACd,IAAI,CAAC1C,YAAW,GAAI,KAAI;IAC1B,CAAC;IAED2C,UAASA,CAAA,EAAK;MACZ,IAAI,CAAC9C,UAAS,GAAI,KAAI;IACxB;EACF,CAAC;EACD+C,OAAMA,CAAA,EAAK;IACT,IAAI,CAACtC,SAAS,CAAC;EACjB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}