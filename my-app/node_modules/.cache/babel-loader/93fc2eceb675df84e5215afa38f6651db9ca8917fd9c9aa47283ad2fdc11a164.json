{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nexport default {\n  data() {\n    return {\n      studentsTable: [],\n      students: [],\n      projects: [],\n      projectMenu: false,\n      // Control for project dropdown menu\n      sidebarItems: [{\n        title: \"Projects\",\n        icon: \"mdi-folder-outline\"\n      }, {\n        title: \"Students\",\n        icon: \"mdi-account-plus-outline\"\n      }, {\n        title: \"Teachers\",\n        icon: \"mdi-account-tie\"\n      }],\n      userName: \"John Doe\",\n      drawer: false,\n      editDialog: false,\n      student: {\n        _id: \"\",\n        nombre: \"\",\n        apellido: \"\",\n        apellidoM: \"\",\n        correo: \"\",\n        project: \"\",\n        carrera: \"\",\n        numeroTelefonico: \"\",\n        empresa: \"\",\n        periodo: \"\",\n        asesorExterno: {\n          nombre: \"\",\n          telefono: \"\",\n          correo: \"\"\n        }\n        // Add more fields as needed\n      },\n      createDialog: false\n    };\n  },\n  computed: {\n    isCreateFormValid() {\n      // Check if the form reference exists\n      if (!this.$refs.createDialogForm) {\n        return false;\n      }\n\n      // Manually validate each field\n      return this.student._id && this.student.nombre && this.student.apellido && this.student.apellidoM && this.student.correo && this.student.contraseña && this.newStudent.project && this.newStudent.carrera && this.newStudent.numeroTelefonico && this.newStudent.empresa && this.newStudent.periodo && this.newStudent.asesorExterno.nombre && this.newStudent.asesorExterno.correo && this.newStudent.asesorExterno.telefono;\n    }\n  },\n  methods: {\n    async fetchData() {\n      try {\n        const response = await axios.get(\"http://localhost:3000/students\");\n        this.students = response.data;\n        this.studentsTable = response.data.map(student => ({\n          _id: student._id,\n          nombre: student.nombre,\n          apellido: student.apellido,\n          apellidoM: student.apellidoM,\n          carrera: student.carrera,\n          project: student.project\n        }));\n      } catch (error) {\n        console.error(\"Error fetching students:\", error);\n      }\n    },\n    async fetchProjects() {\n      try {\n        const response = await axios.get(\"http://localhost:3000/projects\");\n        // Extract IDs and names from the projects data\n        this.projects = response.data.map(project => ({\n          id: project._id,\n          name: project.name\n        }));\n      } catch (error) {\n        console.error(\"Error fetching projects:\", error);\n      }\n    },\n    async navigate(index) {\n      switch (index) {\n        case 0:\n          this.$router.push(\"/admin\");\n          break;\n        case 1:\n          this.$router.push(\"/admin/students\");\n          break;\n        case 2:\n          this.$router.push(\"/admin/Teachers\");\n          break;\n        default:\n          break;\n      }\n    },\n    logout() {\n      // Logic to logout the user\n      // For example, you can clear any user data or tokens stored in localStorage\n      localStorage.removeItem(\"token\");\n\n      // Redirect the user to the login page\n      this.$router.push(\"/login\");\n    },\n    editUser(student, event) {\n      event.stopPropagation(); // Stop event propagation\n      // Find the student with the matching _id\n      const foundStudent = this.students.find(s => s._id === student._id);\n      if (foundStudent) {\n        // If the student is found, copy its data to editedStudent\n        this.editedStudent = {\n          ...foundStudent\n        };\n        this.editDialog = true;\n      } else {\n        console.error(`Student with ID ${student._id} not found.`);\n      }\n    },\n    async saveEditedStudent() {\n      try {\n        const response = await axios.put(`http://localhost:3000/users/${this.editedStudent._id}`, this.editedStudent);\n        console.log(\"User updated successfully:\", response.data);\n        this.fetchData();\n      } catch (error) {\n        console.error(\"Error updating user:\", error);\n      }\n      this.editDialog = false;\n    },\n    cancelEdit() {\n      this.editDialog = false;\n    },\n    openCreateDialog() {\n      this.createDialog = true;\n      // Fetch projects data when opening create dialog\n      this.fetchProjects();\n    },\n    async saveNewStudent() {\n      try {\n        // Validate the form\n        if (!this.isCreateFormValid) {\n          return; // Exit if the form is not valid\n        }\n        // Find the selected project object based on its name\n        const selectedProject = this.projects.find(project => project.name === this.student.project);\n        if (selectedProject) {\n          // Save the project ID to the new student data\n          this.student.project = selectedProject.id;\n        }\n        const response = await axios.post(\"http://localhost:3000/register\", this.student);\n        if (response.status === 201) {\n          console.log(\"Student created successfully:\", response.data);\n          this.fetchData();\n        } else {\n          console.error(\"Failed to create student:\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error creating student:\", error);\n      }\n      this.createDialog = false;\n    },\n    cancelCreate() {\n      this.createDialog = false;\n    },\n    async deleteUser(userId, event) {\n      event.stopPropagation(); // Stop event propagation\n      try {\n        const response = await axios.delete(`http://localhost:3000/users/${userId}`);\n        console.log(\"User deleted successfully:\", response.data);\n        this.fetchData(); // Call a method to update the UI or fetch updated data\n      } catch (error) {\n        console.error(\"Error deleting user:\", error);\n      }\n    },\n    selectProject(project) {\n      this.student.project = project.name; // Set the selected project name\n      this.projectMenu = false; // Close the dropdown menu\n    },\n    handleRowClick(item) {\n      // Handle row click event here\n      console.log(\"Row clicked:\", item);\n      // Navigate to a new page and pass the user's ID as route parameters\n      this.$router.push({\n        name: \"UserDetails\",\n        params: {\n          userId: item._id\n        }\n      });\n    },\n    getProjectName(projectId) {\n      const project = this.projects.find(project => project.id === projectId);\n      return project ? project.name : \"\";\n    }\n  },\n  mounted() {\n    this.fetchData();\n    this.fetchProjects();\n  }\n};","map":{"version":3,"names":["axios","data","studentsTable","students","projects","projectMenu","sidebarItems","title","icon","userName","drawer","editDialog","student","_id","nombre","apellido","apellidoM","correo","project","carrera","numeroTelefonico","empresa","periodo","asesorExterno","telefono","createDialog","computed","isCreateFormValid","$refs","createDialogForm","contraseña","newStudent","methods","fetchData","response","get","map","error","console","fetchProjects","id","name","navigate","index","$router","push","logout","localStorage","removeItem","editUser","event","stopPropagation","foundStudent","find","s","editedStudent","saveEditedStudent","put","log","cancelEdit","openCreateDialog","saveNewStudent","selectedProject","post","status","cancelCreate","deleteUser","userId","delete","selectProject","handleRowClick","item","params","getProjectName","projectId","mounted"],"sources":["/Users/angel/school-project/my-app/src/components/StudentsPage.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-container fluid>\n      <!-- Top Bar -->\n      <v-app-bar app color=\"blue darken-2\" dark>\n        <!-- Burger menu icon -->\n        <v-btn icon @click=\"drawer = !drawer\">\n          <v-icon>mdi-menu</v-icon>\n        </v-btn>\n        <!-- Title -->\n        <v-toolbar-title>{{ userName }}</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <!-- Logout button -->\n        <v-btn icon @click=\"logout\">\n          <v-icon>mdi-logout</v-icon>\n        </v-btn>\n      </v-app-bar>\n\n      <!-- Sidebar -->\n      <v-navigation-drawer app v-model=\"drawer\" color=\"blue darken-2\" dark>\n        <v-list dense>\n          <v-list-item\n            v-for=\"(item, index) in sidebarItems\"\n            :key=\"index\"\n            @click=\"navigate(index)\"\n          >\n            <v-list-item-action>\n              <v-icon>{{ item.icon }}</v-icon>\n            </v-list-item-action>\n            <v-list-item-content>\n              <v-list-item-title>{{ item.title }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n        </v-list>\n      </v-navigation-drawer>\n\n      <v-main>\n        <!-- Main content -->\n        <v-col cols=\"12\" style=\"max-width: 1500px; margin: 0px auto\">\n          <v-card class=\"text-center\" style=\"width: 100%; margin: 0px auto\">\n            <!-- Students Data -->\n            <v-data-table\n              v-if=\"studentsTable.length > 0\"\n              :items=\"studentsTable\"\n              align=\"center\"\n            >\n              <template v-slot:top>\n                <v-toolbar flat color=\"blue darken-2\">\n                  <v-toolbar-title>Students</v-toolbar-title>\n                  <v-divider class=\"mx-4\" inset vertical></v-divider>\n                  <v-spacer></v-spacer>\n                  <v-btn icon color=\"blue darken-2\" @click=\"openCreateDialog\">\n                    <v-icon>mdi-plus</v-icon>\n                  </v-btn>\n                </v-toolbar>\n              </template>\n              <template v-slot:item=\"{ item }\">\n                <tr @click=\"handleRowClick(item)\" class=\"clickable-row\">\n                  <td v-for=\"(value, key) in item\" :key=\"key\">\n                    <!-- Render project name instead of ID -->\n                    <template v-if=\"key === 'project'\">\n                      {{ getProjectName(item[key]) }}\n                    </template>\n                    <template v-else>\n                      {{ value }}\n                    </template>\n                  </td>\n                  <td>\n                    <v-btn\n                      icon\n                      small\n                      color=\"blue darken-2\"\n                      @click=\"editUser(item, $event)\"\n                      style=\"width: 30px; height: 30px; margin-right: 5px\"\n                    >\n                      <v-icon style=\"font-size: 18px\">mdi-pencil</v-icon>\n                    </v-btn>\n\n                    <v-btn\n                      icon\n                      small\n                      color=\"red darken-2\"\n                      @click=\"deleteUser(item._id, $event)\"\n                      style=\"width: 30px; height: 30px; margin-right: 5px\"\n                    >\n                      <v-icon style=\"font-size: 18px\">mdi-delete</v-icon>\n                    </v-btn>\n                  </td>\n                </tr>\n              </template>\n            </v-data-table>\n          </v-card>\n        </v-col>\n      </v-main>\n\n      <!-- Edit Dialog -->\n      <v-dialog v-model=\"editDialog\" max-width=\"500\">\n        <v-card>\n          <v-card-title>Edit Student</v-card-title>\n          <v-card-text>\n            <v-text-field\n              v-model=\"student.nombre\"\n              label=\"Name\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.apellido\"\n              label=\"Last Name\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.apellidoM\"\n              label=\"Apellido Materno\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.correo\"\n              label=\"Email\"\n              required\n            ></v-text-field>\n            <v-select\n              v-model=\"student.project\"\n              :items=\"projects.map((project) => project.name)\"\n              label=\"Select Project\"\n              required\n            ></v-select>\n            <v-text-field\n              v-model=\"student.carrera\"\n              label=\"Carrera\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.numeroTelefonico\"\n              label=\"Phone Number\"\n              type=\"number\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.empresa\"\n              label=\"Empresa\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.periodo\"\n              label=\"Periodo\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.asesorExterno.nombre\"\n              label=\"Nombre Asesor externo\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.asesorExterno.correo\"\n              label=\"Correo Asesor externo\"\n              required\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.asesorExterno.telefono\"\n              label=\"External Advisor Number\"\n              type=\"number\"\n              required\n            ></v-text-field>\n            <!-- Add more fields as needed -->\n          </v-card-text>\n          <v-card-actions>\n            <v-btn color=\"blue darken-2\" @click=\"saveEditedStudent\">Save</v-btn>\n            <v-btn @click=\"cancelEdit\">Cancel</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n\n      <!-- Create Dialog -->\n      <v-dialog v-model=\"createDialog\" max-width=\"500\" ref=\"createDialogForm\">\n        <v-card>\n          <v-card-title>Create New Student</v-card-title>\n          <v-card-text>\n            <!-- <v-text-field v-model=\"newStudent._id\" label=\"ID\"></v-text-field> Remove this line -->\n            <v-text-field\n              v-model=\"student._id\"\n              label=\"ID\"\n              type=\"number\"\n              required\n              :rules=\"[\n                (v) => {\n                  console.log('ID value:', v);\n                  return !!v || 'ID is required';\n                },\n                (v) => {\n                  const isValid = /^[0-9]+$/.test(v);\n                  console.log('Is ID valid?', isValid);\n                  return isValid || 'ID must contain only numbers';\n                },\n              ]\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.nombre\"\n              label=\"Name\"\n              required\n              :rules=\"[(v) => !!v || 'Name is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.apellido\"\n              label=\"Last Name\"\n              required\n              :rules=\"[(v) => !!v || 'Apellido Paterno is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.apellidoM\"\n              label=\"Apellido Materno\"\n              required\n              :rules=\"[(v) => !!v || 'Apellido Materno is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.correo\"\n              label=\"Email\"\n              required\n              :rules=\"[(v) => !!v || 'Email is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.contraseña\"\n              label=\"Password\"\n              type=\"password\"\n              required\n              :rules=\"[(v) => !!v || 'Password is required']\"\n            ></v-text-field>\n            <!-- Add dropdown menu for projects -->\n            <v-select\n              v-model=\"student.project\"\n              :items=\"projects.map((project) => project.name)\"\n              label=\"Select Project\"\n              required\n              :rules=\"[(v) => !!v || 'Project is required']\"\n            ></v-select>\n            <v-text-field\n              v-model=\"student.carrera\"\n              label=\"Carrera\"\n              required\n              :rules=\"[(v) => !!v || 'Carrera is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.numeroTelefonico\"\n              label=\"Phone Number\"\n              type=\"number\"\n              required\n              :rules=\"[(v) => !!v || 'Phone Number is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.empresa\"\n              label=\"Empresa\"\n              required\n              :rules=\"[(v) => !!v || 'Empresa is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.periodo\"\n              label=\"Periodo\"\n              required\n              :rules=\"[(v) => !!v || 'Periodo is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.asesorExterno.nombre\"\n              label=\"Nombre Asesor externo\"\n              required\n              :rules=\"[(v) => !!v || 'Nombre del Asesor is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.asesorExterno.correo\"\n              label=\"Correo Asesor externo\"\n              required\n              :rules=\"[(v) => !!v || 'Correo del asesor is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"student.asesorExterno.telefono\"\n              label=\"External Advisor Number\"\n              type=\"number\"\n              required\n              :rules=\"[(v) => !!v || 'Telefono del asesor is required']\"\n            ></v-text-field>\n\n            <!-- Add more fields as needed -->\n          </v-card-text>\n          <v-card-actions>\n            <v-btn\n              color=\"blue darken-2\"\n              :disabled=\"!isCreateFormValid\"\n              @click=\"saveNewStudent\"\n              >Save</v-btn\n            >\n            <v-btn @click=\"cancelCreate\">Cancel</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n    </v-container>\n  </v-app>\n</template>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      studentsTable: [],\n      students: [],\n      projects: [],\n      projectMenu: false, // Control for project dropdown menu\n      sidebarItems: [\n        { title: \"Projects\", icon: \"mdi-folder-outline\" },\n        { title: \"Students\", icon: \"mdi-account-plus-outline\" },\n        { title: \"Teachers\", icon: \"mdi-account-tie\" },\n      ],\n      userName: \"John Doe\",\n      drawer: false,\n      editDialog: false,\n      student: {\n        _id: \"\",\n        nombre: \"\",\n        apellido: \"\",\n        apellidoM: \"\",\n        correo: \"\",\n        project: \"\",\n        carrera: \"\",\n        numeroTelefonico: \"\",\n        empresa: \"\",\n        periodo: \"\",\n        asesorExterno: {\n          nombre: \"\",\n          telefono: \"\",\n          correo: \"\",\n        },\n        // Add more fields as needed\n      },\n      createDialog: false,\n    };\n  },\n  computed: {\n    isCreateFormValid() {\n      // Check if the form reference exists\n      if (!this.$refs.createDialogForm) {\n        return false;\n      }\n\n      // Manually validate each field\n      return (\n        this.student._id &&\n        this.student.nombre &&\n        this.student.apellido &&\n        this.student.apellidoM &&\n        this.student.correo &&\n        this.student.contraseña &&\n        this.newStudent.project &&\n        this.newStudent.carrera &&\n        this.newStudent.numeroTelefonico &&\n        this.newStudent.empresa &&\n        this.newStudent.periodo &&\n        this.newStudent.asesorExterno.nombre &&\n        this.newStudent.asesorExterno.correo &&\n        this.newStudent.asesorExterno.telefono\n      );\n    },\n  },\n\n  methods: {\n    async fetchData() {\n      try {\n        const response = await axios.get(\"http://localhost:3000/students\");\n        this.students = response.data;\n        this.studentsTable = response.data.map((student) => ({\n          _id: student._id,\n          nombre: student.nombre,\n          apellido: student.apellido,\n          apellidoM: student.apellidoM,\n          carrera: student.carrera,\n          project: student.project,\n        }));\n      } catch (error) {\n        console.error(\"Error fetching students:\", error);\n      }\n    },\n    async fetchProjects() {\n      try {\n        const response = await axios.get(\"http://localhost:3000/projects\");\n        // Extract IDs and names from the projects data\n        this.projects = response.data.map((project) => ({\n          id: project._id,\n          name: project.name,\n        }));\n      } catch (error) {\n        console.error(\"Error fetching projects:\", error);\n      }\n    },\n\n    async navigate(index) {\n      switch (index) {\n        case 0:\n          this.$router.push(\"/admin\");\n          break;\n        case 1:\n          this.$router.push(\"/admin/students\");\n          break;\n        case 2:\n          this.$router.push(\"/admin/Teachers\");\n          break;\n        default:\n          break;\n      }\n    },\n    logout() {\n      // Logic to logout the user\n      // For example, you can clear any user data or tokens stored in localStorage\n      localStorage.removeItem(\"token\");\n\n      // Redirect the user to the login page\n      this.$router.push(\"/login\");\n    },\n    editUser(student, event) {\n      event.stopPropagation(); // Stop event propagation\n      // Find the student with the matching _id\n      const foundStudent = this.students.find((s) => s._id === student._id);\n      if (foundStudent) {\n        // If the student is found, copy its data to editedStudent\n        this.editedStudent = { ...foundStudent };\n        this.editDialog = true;\n      } else {\n        console.error(`Student with ID ${student._id} not found.`);\n      }\n    },\n\n    async saveEditedStudent() {\n      try {\n        const response = await axios.put(\n          `http://localhost:3000/users/${this.editedStudent._id}`,\n          this.editedStudent\n        );\n        console.log(\"User updated successfully:\", response.data);\n        this.fetchData();\n      } catch (error) {\n        console.error(\"Error updating user:\", error);\n      }\n      this.editDialog = false;\n    },\n    cancelEdit() {\n      this.editDialog = false;\n    },\n    openCreateDialog() {\n      this.createDialog = true;\n      // Fetch projects data when opening create dialog\n      this.fetchProjects();\n    },\n    async saveNewStudent() {\n      try {\n        // Validate the form\n        if (!this.isCreateFormValid) {\n          return; // Exit if the form is not valid\n        }\n        // Find the selected project object based on its name\n        const selectedProject = this.projects.find(\n          (project) => project.name === this.student.project\n        );\n        if (selectedProject) {\n          // Save the project ID to the new student data\n          this.student.project = selectedProject.id;\n        }\n\n        const response = await axios.post(\n          \"http://localhost:3000/register\",\n          this.student\n        );\n        if (response.status === 201) {\n          console.log(\"Student created successfully:\", response.data);\n          this.fetchData();\n        } else {\n          console.error(\"Failed to create student:\", response.data);\n        }\n      } catch (error) {\n        console.error(\"Error creating student:\", error);\n      }\n      this.createDialog = false;\n    },\n\n    cancelCreate() {\n      this.createDialog = false;\n    },\n    async deleteUser(userId, event) {\n      event.stopPropagation(); // Stop event propagation\n      try {\n        const response = await axios.delete(\n          `http://localhost:3000/users/${userId}`\n        );\n        console.log(\"User deleted successfully:\", response.data);\n        this.fetchData(); // Call a method to update the UI or fetch updated data\n      } catch (error) {\n        console.error(\"Error deleting user:\", error);\n      }\n    },\n\n    selectProject(project) {\n      this.student.project = project.name; // Set the selected project name\n      this.projectMenu = false; // Close the dropdown menu\n    },\n    handleRowClick(item) {\n      // Handle row click event here\n      console.log(\"Row clicked:\", item);\n      // Navigate to a new page and pass the user's ID as route parameters\n      this.$router.push({\n        name: \"UserDetails\",\n        params: { userId: item._id },\n      });\n    },\n    getProjectName(projectId) {\n      const project = this.projects.find((project) => project.id === projectId);\n      return project ? project.name : \"\";\n    },\n  },\n  mounted() {\n    this.fetchData();\n    this.fetchProjects();\n  },\n};\n</script>\n\n<style scoped>\n.v-btn i {\n  color: white;\n}\n\n.clickable-row:hover {\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}