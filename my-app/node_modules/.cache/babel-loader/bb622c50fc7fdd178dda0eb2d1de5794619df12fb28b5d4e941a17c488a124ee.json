{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      userName: localStorage.getItem('userName'),\n      pdfFiles: {\n        'Solicitud de residencias profesionales': {\n          _id: '',\n          file: null,\n          submitted: false\n        },\n        'Carta de presentación': {\n          _id: '',\n          file: null,\n          submitted: false\n        }\n      },\n      submittedFiles: {},\n      drawer: false,\n      sidebarItems: [{\n        title: 'Proyecto',\n        icon: 'mdi-folder-outline'\n      }, {\n        title: 'Asesorias',\n        icon: 'mdi-account-plus-outline'\n      }, {\n        title: 'Archivos',\n        icon: 'mdi-file-document-outline'\n      }],\n      userId: localStorage.getItem('id')\n    };\n  },\n  mounted() {\n    this.fetchFileData();\n  },\n  methods: {\n    async fetchFileData() {\n      try {\n        const response = await axios.get('http://localhost:3000/archivos');\n        this.submittedFiles = response.data.reduce((acc, file) => {\n          acc[file.filename] = {\n            _id: file._id,\n            submitted: true\n          };\n          return acc;\n        }, {});\n        for (const key in this.pdfFiles) {\n          if (this.submittedFiles[key]) {\n            this.pdfFiles[key]._id = this.submittedFiles[key]._id;\n            this.pdfFiles[key].submitted = true;\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching files:', error);\n      }\n    },\n    navigate(index) {\n      switch (index) {\n        case 0:\n          this.$router.push('/student');\n          break;\n        case 1:\n          this.$router.push('/student/asesorias');\n          break;\n        case 2:\n          this.$router.push('/student/archivos');\n          break;\n        default:\n          break;\n      }\n    },\n    logout() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      this.$router.push('/login');\n    },\n    async submitForm() {\n      try {\n        const formData = new FormData();\n\n        // Iterate over each file in pdfFiles\n        for (const key in this.pdfFiles) {\n          const fileInfo = this.pdfFiles[key];\n\n          // Check if file exists and has not been submitted\n          if (fileInfo.file && !fileInfo.submitted) {\n            // Append the file to formData with the field name \"files\"\n            formData.append('files', fileInfo.file);\n          }\n        }\n\n        // Send the formData to the server\n        const response = await axios.post('http://localhost:3000/upload-archivo', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n\n        // Check if the response is successful\n        if (response.status === 201) {\n          // Display a success alert message\n          window.alert('Data saved successfully!');\n          this.fet;\n          // Handle any additional logic here\n        } else {\n          console.error('Failed to save data.');\n        }\n      } catch (error) {\n        console.error('Error uploading files:', error);\n      }\n    },\n    downloadAllFiles() {\n      // Download all files logic\n    },\n    async downloadFile(fileId) {\n      try {\n        const response = await axios.get(`http://localhost:3000/archivos/${fileId}`, {\n          responseType: 'blob'\n        });\n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', 'file.pdf'); // Change the file name as needed\n        document.body.appendChild(link);\n        link.click();\n      } catch (error) {\n        console.error('Error downloading file:', error);\n      }\n    },\n    async deleteFile(fileId, fieldName) {\n      try {\n        await axios.delete(`http://localhost:3000/archivos/${fileId}`);\n        this.pdfFiles[fieldName]._id = '';\n        this.pdfFiles[fieldName].file = null;\n        this.pdfFiles[fieldName].submitted = false;\n      } catch (error) {\n        console.error('Error deleting file:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","userName","localStorage","getItem","pdfFiles","_id","file","submitted","submittedFiles","drawer","sidebarItems","title","icon","userId","mounted","fetchFileData","methods","response","get","reduce","acc","filename","key","error","console","navigate","index","$router","push","logout","removeItem","submitForm","formData","FormData","fileInfo","append","post","headers","status","window","alert","fet","downloadAllFiles","downloadFile","fileId","responseType","url","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","deleteFile","fieldName","delete"],"sources":["/Users/angel/school-project/my-app/src/components/ArchivosAlumno.vue"],"sourcesContent":["<template>\n    <v-app>\n      <v-container>\n        <!-- Top Bar -->\n        <v-app-bar app color=\"blue darken-2\" dark>\n          <!-- Burger menu icon -->\n          <v-btn icon @click=\"drawer = !drawer\">\n            <v-icon>mdi-menu</v-icon>\n          </v-btn>\n          <!-- Title -->\n          <v-toolbar-title>{{ userName }}</v-toolbar-title>\n          <v-spacer></v-spacer>\n          <!-- Logout button -->\n          <v-btn icon @click=\"logout\">\n            <v-icon>mdi-logout</v-icon>\n          </v-btn>\n        </v-app-bar>\n\n        <!-- Sidebar -->\n        <v-navigation-drawer app v-model=\"drawer\" color=\"blue darken-2\" dark>\n          <v-list dense>\n            <v-list-item\n              v-for=\"(item, index) in sidebarItems\"\n              :key=\"index\"\n              @click=\"navigate(index)\"\n            >\n              <v-list-item-action>\n                <v-icon>{{ item.icon }}</v-icon>\n              </v-list-item-action>\n              <v-list-item-content>\n                <v-list-item-title>{{ item.title }}</v-list-item-title>\n              </v-list-item-content>\n            </v-list-item>\n          </v-list>\n        </v-navigation-drawer>\n\n        <!-- Main Content -->\n        <v-main>\n          <v-col cols=\"12\" style=\"max-width: 1000px; margin: 0 auto\">\n            <v-card class=\"mx-auto\" max-width=\"800\">\n              <v-card-title class=\"blue darken-2 white--text\">\n                Upload PDF Files\n              </v-card-title>\n              <v-card-text>\n                <v-row>\n                  <v-col\n                    v-for=\"(fileInfo, fieldName) in pdfFiles\"\n                    :key=\"fieldName\"\n                    cols=\"12\"\n                    md=\"6\"\n                  >\n                    <v-card class=\"mb-3\">\n                      <v-card-title>{{ fieldName }}</v-card-title>\n                      <v-file-input\n                        v-model=\"pdfFiles[fieldName].file\"\n                        accept=\".pdf\"\n                        :label=\"'Select ' + fieldName\"\n                      ></v-file-input>\n                      <v-card-actions>\n                        <v-btn\n                          v-if=\"fileInfo.submitted\"\n                          color=\"green\"\n                          @click=\"downloadFile(fileInfo._id)\"\n                        >\n                          Download\n                        </v-btn>\n                        <v-btn\n                          v-if=\"fileInfo.submitted\"\n                          color=\"red\"\n                          @click=\"deleteFile(fileInfo._id, fieldName)\"\n                        >\n                          Delete\n                        </v-btn>\n                      </v-card-actions>\n                    </v-card>\n                  </v-col>\n                </v-row>\n              </v-card-text>\n              <v-divider class=\"my-4\"></v-divider>\n              <v-card-actions>\n                <v-btn color=\"blue darken-2\" @click=\"submitForm\">Submit</v-btn>\n                <v-btn color=\"primary\" @click=\"downloadAllFiles\"\n                  >Download All Files</v-btn\n                >\n              </v-card-actions>\n            </v-card>\n          </v-col>\n        </v-main>\n      </v-container>\n    </v-app>\n  </template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  data () {\n    return {\n      userName: localStorage.getItem('userName'),\n      pdfFiles: {\n        'Solicitud de residencias profesionales': {\n          _id: '',\n          file: null,\n          submitted: false\n        },\n        'Carta de presentación': {\n          _id: '',\n          file: null,\n          submitted: false\n        }\n      },\n      submittedFiles: {},\n      drawer: false,\n      sidebarItems: [\n        { title: 'Proyecto', icon: 'mdi-folder-outline' },\n        { title: 'Asesorias', icon: 'mdi-account-plus-outline' },\n        { title: 'Archivos', icon: 'mdi-file-document-outline' }\n      ],\n      userId: localStorage.getItem('id')\n    }\n  },\n  mounted () {\n    this.fetchFileData()\n  },\n  methods: {\n    async fetchFileData () {\n      try {\n        const response = await axios.get('http://localhost:3000/archivos')\n        this.submittedFiles = response.data.reduce((acc, file) => {\n          acc[file.filename] = {\n            _id: file._id,\n            submitted: true\n          }\n          return acc\n        }, {})\n        for (const key in this.pdfFiles) {\n          if (this.submittedFiles[key]) {\n            this.pdfFiles[key]._id = this.submittedFiles[key]._id\n            this.pdfFiles[key].submitted = true\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching files:', error)\n      }\n    },\n    navigate (index) {\n      switch (index) {\n        case 0:\n          this.$router.push('/student')\n          break\n        case 1:\n          this.$router.push('/student/asesorias')\n          break\n        case 2:\n          this.$router.push('/student/archivos')\n          break\n        default:\n          break\n      }\n    },\n    logout () {\n      localStorage.removeItem('token')\n      localStorage.removeItem('user')\n      this.$router.push('/login')\n    },\n    async submitForm () {\n  try {\n    const formData = new FormData();\n\n    // Iterate over each file in pdfFiles\n    for (const key in this.pdfFiles) {\n      const fileInfo = this.pdfFiles[key];\n      \n      // Check if file exists and has not been submitted\n      if (fileInfo.file && !fileInfo.submitted) {\n        // Append the file to formData with the field name \"files\"\n        formData.append('files', fileInfo.file);\n      }\n    }\n\n    // Send the formData to the server\n    const response = await axios.post('http://localhost:3000/upload-archivo', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n\n    // Check if the response is successful\n    if (response.status === 201) {\n      // Display a success alert message\n      window.alert('Data saved successfully!');\n      this.fet\n      // Handle any additional logic here\n\n    } else {\n      console.error('Failed to save data.');\n    }\n\n  } catch (error) {\n    console.error('Error uploading files:', error);\n  }\n},\n\n    downloadAllFiles () {\n      // Download all files logic\n    },\n    async downloadFile (fileId) {\n      try {\n        const response = await axios.get(`http://localhost:3000/archivos/${fileId}`, {\n          responseType: 'blob'\n        })\n        const url = window.URL.createObjectURL(new Blob([response.data]))\n        const link = document.createElement('a')\n        link.href = url\n        link.setAttribute('download', 'file.pdf') // Change the file name as needed\n        document.body.appendChild(link)\n        link.click()\n      } catch (error) {\n        console.error('Error downloading file:', error)\n      }\n    },\n    async deleteFile (fileId, fieldName) {\n      try {\n        await axios.delete(`http://localhost:3000/archivos/${fileId}`)\n        this.pdfFiles[fieldName]._id = ''\n        this.pdfFiles[fieldName].file = null\n        this.pdfFiles[fieldName].submitted = false\n      } catch (error) {\n        console.error('Error deleting file:', error)\n      }\n    }\n  }\n}\n</script>\n\n  <style scoped>\n  .v-btn i {\n    color: white;\n  }\n  </style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}