{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data: () => ({\n    verificationCode: '',\n    sentCode: '',\n    alert: false,\n    valid: true,\n    email: '',\n    emailRules: [v => !!v || 'Correo requerido', v => /.+@.+\\..+/.test(v) || 'Correo debe ser válido'],\n    password: '',\n    passwordRules: [v => !!v || 'Contraseña requerida'],\n    forgotPasswordDialog: false,\n    resetEmail: '',\n    resetNumber: '',\n    resetValid: true,\n    verifyCodeDialog: false,\n    resetPasswordDialog: false\n  }),\n  methods: {\n    async resetPassword() {\n      if (this.$refs.resetPasswordForm.validate()) {\n        if (this.newPassword === this.confirmNewPassword) {\n          try {\n            const user = await this.getUserByCorreo(this.resetEmail);\n            if (user) {\n              user.contraseña = this.newPassword; // Update the user's password\n\n              const response = await axios.put(`http://localhost:3000/users/${user._id}`, {\n                contraseña: this.newPassword\n              });\n              if (response.status === 200) {\n                console.log('Contraseña actualizada con éxito.');\n                this.resetPasswordDialog = false; // Close the reset password dialog\n                alert('Contraseña actualizada con éxito.');\n              } else {\n                console.error('Error al actualizar la contraseña:', response.status);\n                alert('Error al actualizar la contraseña.');\n              }\n            } else {\n              alert('El usuario no existe.');\n            }\n          } catch (error) {\n            console.error('Error updating password:', error);\n            alert('Error al actualizar la contraseña.');\n          }\n        } else {\n          alert('Las contraseñas no coinciden.');\n        }\n      }\n    },\n    async getUserByCorreo(correo) {\n      try {\n        const response = await axios.get(`http://localhost:3000/users/email/${correo}`);\n        if (response.status === 200) {\n          return response.data;\n        } else {\n          console.error('Error fetching user data:', response.status);\n          return null;\n        }\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n        return null;\n      }\n    },\n    async sendResetEmail() {\n      if (this.$refs.resetForm.validate()) {\n        try {\n          const user = await this.getUserByCorreo(this.resetEmail); // Assuming resetEmail contains the email address\n\n          if (user && user.numeroTelefonico === Number(this.resetNumber)) {\n            // Add '+52' prefix to the phone number\n            const prefixedPhoneNumber = `+52${this.resetNumber}`;\n\n            // Send SMS if phone numbers match\n            const response = await axios.post('http://localhost:3000/send-sms', {\n              phone: prefixedPhoneNumber\n            });\n            if (response.status === 200) {\n              console.log('Se ha enviado un mensaje de texto para restablecer tu contraseña.');\n              this.forgotPasswordDialog = false;\n              this.verifyCodeDialog = true; // Show the verification code dialog\n              this.sentCode = response.data.code;\n            } else {\n              console.log('Error al enviar el mensaje de texto.');\n            }\n          } else {\n            this.resetAlert = true;\n            this.resetAlertMessage = 'El usuario no existe o el número de teléfono es incorrecto.';\n          }\n        } catch (error) {\n          console.error('Error sending reset email:', error);\n          this.resetAlert = true;\n          this.resetAlertMessage = 'Error al enviar el mensaje de texto.';\n        }\n      }\n    },\n    async verifyCode() {\n      try {\n        const response = await axios.post('http://localhost:3000/verify-code', {\n          code: this.verificationCode,\n          sentCode: this.sentCode // Sending the stored verification code to the server for comparison\n        });\n        if (response.data.success) {\n          // Code verification successful\n          console.log('Code verification successful');\n          this.verifyCodeDialog = false; // Close the verification code dialog\n          this.resetPasswordDialog = true; // Open the dialog to enter the new password\n        } else {\n          // Code verification failed, handle the error\n          console.error('Code verification failed:', response.data.message);\n        }\n      } catch (error) {\n        console.error('Error verifying code:', error);\n      }\n    },\n    forgotPassword() {\n      this.forgotPasswordDialog = true;\n    },\n    async submit() {\n      try {\n        const response = await axios.post('http://localhost:3000/login', {\n          correo: this.email,\n          contraseña: this.password\n        });\n        if (response.status === 200) {\n          const {\n            token,\n            rol,\n            nombre,\n            id\n          } = response.data;\n\n          // Store the token and the user's name in localStorage\n          localStorage.setItem('token', token);\n          localStorage.setItem('userName', nombre);\n          localStorage.setItem('id', id);\n          switch (rol) {\n            case 'admin':\n              this.$router.push('/Admin');\n              break;\n            case 'student':\n              this.$router.push('/Student');\n              break;\n            case 'teacher':\n              this.$router.push('/Teacher/projects');\n              break;\n            default:\n              // Redirect to a default route for unknown roles\n              this.$router.push('/default-route');\n              break;\n          }\n          console.log('Login successful:', response.data);\n        } else {\n          // Handle other status codes if needed\n        }\n      } catch (error) {\n        console.error('Login error:', error.response.data.error);\n        this.alert = true;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","verificationCode","sentCode","alert","valid","email","emailRules","v","test","password","passwordRules","forgotPasswordDialog","resetEmail","resetNumber","resetValid","verifyCodeDialog","resetPasswordDialog","methods","resetPassword","$refs","resetPasswordForm","validate","newPassword","confirmNewPassword","user","getUserByCorreo","contraseña","response","put","_id","status","console","log","error","correo","get","sendResetEmail","resetForm","numeroTelefonico","Number","prefixedPhoneNumber","post","phone","code","resetAlert","resetAlertMessage","verifyCode","success","message","forgotPassword","submit","token","rol","nombre","id","localStorage","setItem","$router","push"],"sources":["/Users/angel/school-project/my-app/src/components/LoginPage.vue"],"sourcesContent":["<template>\n  <v-container class=\"fill-height\" fluid>\n    <v-row align=\"center\" justify=\"center\">\n      <v-col cols=\"12\" sm=\"8\" md=\"4\">\n        <v-card class=\"elevation-12\">\n          <v-toolbar color=\"primary\" dark flat>\n            <v-toolbar-title>Ingresa Credenciales</v-toolbar-title>\n          </v-toolbar>\n          <v-card-text>\n            <v-alert\n              v-if=\"alert\"\n              type=\"error\"\n              dismissible\n              @click=\"alert = false\"\n            >\n              Las credenciales son incorrectas\n            </v-alert>\n            <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n              <v-text-field\n                label=\"Correo Electrónico\"\n                v-model=\"email\"\n                :rules=\"emailRules\"\n                required\n              ></v-text-field>\n              <v-text-field\n                label=\"Contraseña\"\n                v-model=\"password\"\n                :rules=\"passwordRules\"\n                type=\"password\"\n                required\n              ></v-text-field>\n              <v-btn text color=\"primary\" @click=\"forgotPassword\"\n                >¿Olvidaste tu contraseña?</v-btn\n              >\n            </v-form>\n          </v-card-text>\n          <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn color=\"primary\" @click=\"submit\">Entrar</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-col>\n    </v-row>\n\n    <v-dialog v-model=\"forgotPasswordDialog\" max-width=\"500\">\n      <v-card>\n        <v-card-title>\n          <span class=\"headline\">Recuperar Contraseña</span>\n        </v-card-title>\n        <v-card-text>\n          <v-form ref=\"resetForm\" v-model=\"resetValid\" lazy-validation>\n            <v-text-field\n              label=\"Correo Electrónico\"\n              v-model=\"resetEmail\"\n              :rules=\"emailRules\"\n              email\n              required\n            ></v-text-field>\n            <v-text-field\n              label=\"Teléfono\"\n              v-model=\"resetNumber\"\n              number\n              required\n            ></v-text-field>\n          </v-form>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"primary\" @click=\"sendResetEmail\">Enviar</v-btn>\n          <v-btn text @click=\"forgotPasswordDialog = false\">Cancelar</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <v-dialog v-model=\"verifyCodeDialog\" max-width=\"500\">\n      <v-card>\n        <v-card-title>\n          <span class=\"headline\">Verificar Código</span>\n        </v-card-title>\n        <v-card-text>\n          <v-form\n            ref=\"verifyCodeForm\"\n            v-model=\"verifyCodeValid\"\n            lazy-validation\n          >\n            <v-text-field\n              label=\"Código de Verificación\"\n              v-model=\"verificationCode\"\n              required\n            ></v-text-field>\n          </v-form>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"primary\" @click=\"verifyCode\">Verificar</v-btn>\n          <v-btn text @click=\"verifyCodeDialog = false\">Cancelar</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <v-dialog v-model=\"resetPasswordDialog\" max-width=\"500\">\n      <v-card>\n        <v-card-title>\n          <span class=\"headline\">Restablecer Contraseña</span>\n        </v-card-title>\n        <v-card-text>\n          <v-form\n            ref=\"resetPasswordForm\"\n            v-model=\"resetPasswordValid\"\n            lazy-validation\n          >\n            <v-text-field\n              label=\"Nueva Contraseña\"\n              v-model=\"newPassword\"\n              :rules=\"newPasswordRules\"\n              type=\"password\"\n              required\n            ></v-text-field>\n            <v-text-field\n              label=\"Confirmar Nueva Contraseña\"\n              v-model=\"confirmNewPassword\"\n              :rules=\"confirmNewPasswordRules\"\n              type=\"password\"\n              required\n            ></v-text-field>\n          </v-form>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color=\"primary\" @click=\"resetPassword\"\n            >Restablecer Contraseña</v-btn\n          >\n          <v-btn text @click=\"resetPasswordDialog = false\">Cancelar</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </v-container>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  data: () => ({\n    verificationCode: '',\n    sentCode: '',\n    alert: false,\n    valid: true,\n    email: '',\n    emailRules: [\n      (v) => !!v || 'Correo requerido',\n      (v) => /.+@.+\\..+/.test(v) || 'Correo debe ser válido'\n    ],\n    password: '',\n    passwordRules: [(v) => !!v || 'Contraseña requerida'],\n    forgotPasswordDialog: false,\n    resetEmail: '',\n    resetNumber: '',\n    resetValid: true,\n    verifyCodeDialog: false,\n    resetPasswordDialog: false,\n    \n  }),\n  methods: {\n    async resetPassword () {\n      if (this.$refs.resetPasswordForm.validate()) {\n        if (this.newPassword === this.confirmNewPassword) {\n          try {\n            const user = await this.getUserByCorreo(this.resetEmail)\n\n            if (user) {\n              user.contraseña = this.newPassword // Update the user's password\n\n              const response = await axios.put(`http://localhost:3000/users/${user._id}`, {\n                contraseña: this.newPassword\n              })\n\n              if (response.status === 200) {\n                console.log('Contraseña actualizada con éxito.')\n                this.resetPasswordDialog = false // Close the reset password dialog\n                alert('Contraseña actualizada con éxito.')\n              } else {\n                console.error('Error al actualizar la contraseña:', response.status)\n                alert('Error al actualizar la contraseña.')\n              }\n            } else {\n              alert('El usuario no existe.')\n            }\n          } catch (error) {\n            console.error('Error updating password:', error)\n            alert('Error al actualizar la contraseña.')\n          }\n        } else {\n          alert('Las contraseñas no coinciden.')\n        }\n      }\n    },\n    async getUserByCorreo (correo) {\n      try {\n        const response = await axios.get(\n          `http://localhost:3000/users/email/${correo}`\n        )\n        if (response.status === 200) {\n          return response.data\n        } else {\n          console.error('Error fetching user data:', response.status)\n          return null\n        }\n      } catch (error) {\n        console.error('Error fetching user data:', error)\n        return null\n      }\n    },\n    async sendResetEmail () {\n      if (this.$refs.resetForm.validate()) {\n        try {\n          const user = await this.getUserByCorreo(this.resetEmail) // Assuming resetEmail contains the email address\n\n          if (user && user.numeroTelefonico === Number(this.resetNumber)) {\n            // Add '+52' prefix to the phone number\n            const prefixedPhoneNumber = `+52${this.resetNumber}`\n\n            // Send SMS if phone numbers match\n            const response = await axios.post(\n              'http://localhost:3000/send-sms',\n              {\n                phone: prefixedPhoneNumber\n              }\n            )\n\n            if (response.status === 200) {\n              console.log(\n                'Se ha enviado un mensaje de texto para restablecer tu contraseña.'\n              )\n              this.forgotPasswordDialog = false\n              this.verifyCodeDialog = true // Show the verification code dialog\n              this.sentCode = response.data.code\n            } else {\n              console.log('Error al enviar el mensaje de texto.')\n            }\n          } else {\n            this.resetAlert = true\n            this.resetAlertMessage =\n              'El usuario no existe o el número de teléfono es incorrecto.'\n          }\n        } catch (error) {\n          console.error('Error sending reset email:', error)\n          this.resetAlert = true\n          this.resetAlertMessage = 'Error al enviar el mensaje de texto.'\n        }\n      }\n    },\n\n    async verifyCode () {\n      try {\n        const response = await axios.post('http://localhost:3000/verify-code', {\n          code: this.verificationCode,\n          sentCode: this.sentCode // Sending the stored verification code to the server for comparison\n        })\n\n        if (response.data.success) {\n          // Code verification successful\n          console.log('Code verification successful')\n          this.verifyCodeDialog = false // Close the verification code dialog\n          this.resetPasswordDialog = true // Open the dialog to enter the new password\n        } else {\n          // Code verification failed, handle the error\n          console.error('Code verification failed:', response.data.message)\n        }\n      } catch (error) {\n        console.error('Error verifying code:', error)\n      }\n    },\n\n    forgotPassword () {\n      this.forgotPasswordDialog = true\n    },\n    async submit () {\n      try {\n        const response = await axios.post('http://localhost:3000/login', {\n          correo: this.email,\n          contraseña: this.password\n        })\n\n        if (response.status === 200) {\n          const { token, rol, nombre, id } = response.data\n\n          // Store the token and the user's name in localStorage\n          localStorage.setItem('token', token)\n          localStorage.setItem('userName', nombre)\n          localStorage.setItem('id', id)\n\n          switch (rol) {\n            case 'admin':\n              this.$router.push('/Admin')\n              break\n            case 'student':\n              this.$router.push('/Student')\n              break\n            case 'teacher':\n              this.$router.push('/Teacher/projects')\n              break\n            default:\n              // Redirect to a default route for unknown roles\n              this.$router.push('/default-route')\n              break\n          }\n\n          console.log('Login successful:', response.data)\n        } else {\n          // Handle other status codes if needed\n        }\n      } catch (error) {\n        console.error('Login error:', error.response.data.error)\n        this.alert = true\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.v-card {\n  margin-top: 100px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}