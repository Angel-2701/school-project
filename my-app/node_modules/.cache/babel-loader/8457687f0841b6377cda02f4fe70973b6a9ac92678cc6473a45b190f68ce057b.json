{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      studentProjectNames: {},\n      students: [],\n      selectedOptions: [],\n      teachers: [],\n      sidebarItems: [{\n        title: 'Projects',\n        icon: 'mdi-folder-outline'\n      }, {\n        title: 'Students',\n        icon: 'mdi-account-plus-outline'\n      }, {\n        title: 'Teachers',\n        icon: 'mdi-account-tie'\n      }],\n      userName: 'John Doe',\n      drawer: false,\n      editDialog: false,\n      editedTeacher: {\n        _id: '',\n        nombre: '',\n        apellido: '',\n        correo: '',\n        contraseña: '',\n        alumnos: [],\n        apellidoM: ''\n        // Add more fields as needed\n      },\n      createDialog: false,\n      newTeacher: {\n        nombre: '',\n        apellido: '',\n        correo: '',\n        contraseña: '',\n        apellidoM: ''\n        // Add more fields as needed\n      },\n      showAssignedStudentsDialog: false,\n      assignedStudents: []\n    };\n  },\n  computed: {\n    isEditFormValid() {\n      // Check if the form reference exists\n      if (!this.$refs.editDialogForm) {\n        return false;\n      }\n\n      // Manually validate each field\n      return this.student.nombre && this.student.apellido && this.student.apellidoM && this.student.project && this.student.carrera && this.student.numeroTelefonico && this.student.empresa && this.student.periodo && this.student.asesorExterno.nombre && this.student.asesorExterno.correo && this.student.asesorExterno.telefono;\n    }\n  },\n  methods: {\n    limitSelection(isNewUser) {\n      if (isNewUser && this.teacher.alumnos.length > 5) {\n        alert('You can only select a maximum of 5 options.');\n        this.teacher.alumnos = this.teacher.alumnos.slice(0, 5);\n      } else if (!isNewUser && this.teacher.alumnos.length > 5) {\n        alert('You can only select a maximum of 5 options.');\n        this.teacher.alumnos = this.teacher.alumnos.slice(0, 5);\n      }\n    },\n    async fetchData() {\n      try {\n        const response = await axios.get('http://localhost:3000/teachers');\n        this.teachers = response.data;\n      } catch (error) {\n        console.error('Error fetching teachers:', error);\n      }\n    },\n    async fetchStudents() {\n      try {\n        const studentsResponse = await axios.get('http://localhost:3000/students');\n        const allStudents = studentsResponse.data;\n\n        // Filter out students who are not assigned to any teacher\n        const unassignedStudents = allStudents.filter(student => {\n          return !this.teachers.some(teacher => teacher.alumnos.includes(student._id));\n        });\n        const assignedStudents = allStudents.filter(student => {\n          return this.teachers.some(teacher => teacher.alumnos.includes(student._id));\n        });\n\n        // Include the teacher's ID in the assignedStudents array\n        const updatedAssignedStudents = assignedStudents.map(student => ({\n          ...student,\n          teacherId: student.teacherId // Ensure each student object has a teacherId property\n        }));\n\n        // Fetch project names for each student's project\n        const projectNamesPromises = updatedAssignedStudents.map(async student => {\n          const projectName = await this.getProjectName(student.project);\n          return {\n            ...student,\n            projectName\n          };\n        });\n\n        // Wait for all project names to be fetched\n        this.assignedStudents = await Promise.all(projectNamesPromises);\n\n        // Extract just the names from the unassigned students data\n        this.students = unassignedStudents.map(student => student._id);\n      } catch (error) {\n        console.error('Error fetching students:', error);\n      }\n    },\n    async showAssignedStudents(teacher, event) {\n      event.stopPropagation();\n      // Filter assignedStudents to include only those assigned to the current teacher\n      await this.fetchStudents();\n      this.assignedStudents = this.assignedStudents.filter(student => teacher.alumnos.includes(student._id));\n      this.showAssignedStudentsDialog = true;\n    },\n    async navigate(index) {\n      switch (index) {\n        case 0:\n          this.$router.push('/admin');\n          break;\n        case 1:\n          this.$router.push('/admin/students');\n          break;\n        case 2:\n          this.$router.push('/admin/teachers');\n          break;\n        default:\n          break;\n      }\n    },\n    logout() {\n      // Logic to logout the user\n      // For example, you can clear any user data or tokens stored in localStorage\n      localStorage.removeItem('token');\n\n      // Redirect the user to the login page\n      this.$router.push('/login');\n    },\n    async editUser(teacher, event) {\n      event.stopPropagation();\n      // Assign the teacher data to editedTeacher\n      await this.fetchStudents();\n      this.teacher = {\n        ...teacher\n      };\n\n      // If editedTeacher has alumnos property, add its students to the students array\n      if (this.teacher.alumnos && Array.isArray(this.teacher.alumnos)) {\n        this.students = [...this.students, ...this.teacher.alumnos];\n      }\n\n      // Open the edit dialog\n      this.editDialog = true;\n    },\n    async saveEditedTeacher() {\n      try {\n        // Send the updated teacher data to the server\n        const response = await axios.put(`http://localhost:3000/users/${this.teacher._id}`, this.editedTeacher);\n        console.log('Teacher updated successfully:', response.data);\n        this.fetchData();\n      } catch (error) {\n        console.error('Error updating teacher:', error);\n      }\n      this.editDialog = false;\n    },\n    cancelEdit() {\n      this.editDialog = false;\n    },\n    openCreateDialog() {\n      this.createDialog = true;\n      this.fetchStudents();\n    },\n    async saveNewTeacher() {\n      try {\n        // Add 'rol' field with value 'teacher'\n        this.teacher.rol = 'teacher';\n        const response = await axios.post('http://localhost:3000/register', this.teacher);\n        if (response.status === 201) {\n          console.log('Teacher created successfully:', response.data);\n          this.fetchData();\n        } else {\n          console.error('Failed to create teacher:', response.data);\n        }\n      } catch (error) {\n        console.error('Error creating teacher:', error);\n      }\n      this.createDialog = false;\n    },\n    cancelCreate() {\n      this.createDialog = false;\n    },\n    async deleteTeacher(teacherId, event) {\n      event.stopPropagation();\n      try {\n        const response = await axios.delete(`http://localhost:3000/users/${teacherId}`);\n        console.log('Teacher deleted successfully:', response.data);\n        this.fetchData(); // Call a method to update the UI or fetch updated data\n      } catch (error) {\n        console.error('Error deleting teacher:', error);\n      }\n    },\n    async getProjectName(projectId) {\n      try {\n        const response = await axios.get(`http://localhost:3000/projects/${projectId}`);\n        const data = response.data; // Assuming the project name is stored in the 'name' field\n        return data.name;\n      } catch (error) {\n        console.error('Error fetching project name:', error);\n        return 'Unknown'; // Return a default value if an error occurs\n      }\n    },\n    async renderProjectName(projectId) {\n      const projectName = await this.getProjectName(projectId);\n      this.studentProjectNames[projectId] = projectName; // Store the project name\n    },\n    handleRowClick(item) {\n      // Handle row click event here\n      console.log('Row clicked:', item);\n      // Navigate to a new page and pass the user's ID as route parameters\n      this.$router.push({\n        name: 'UserDetails',\n        params: {\n          userId: item._id\n        }\n      });\n    }\n  },\n  mounted() {\n    this.fetchData();\n    this.fetchStudents();\n  }\n};","map":{"version":3,"names":["axios","data","studentProjectNames","students","selectedOptions","teachers","sidebarItems","title","icon","userName","drawer","editDialog","editedTeacher","_id","nombre","apellido","correo","contraseña","alumnos","apellidoM","createDialog","newTeacher","showAssignedStudentsDialog","assignedStudents","computed","isEditFormValid","$refs","editDialogForm","student","project","carrera","numeroTelefonico","empresa","periodo","asesorExterno","telefono","methods","limitSelection","isNewUser","teacher","length","alert","slice","fetchData","response","get","error","console","fetchStudents","studentsResponse","allStudents","unassignedStudents","filter","some","includes","updatedAssignedStudents","map","teacherId","projectNamesPromises","projectName","getProjectName","Promise","all","showAssignedStudents","event","stopPropagation","navigate","index","$router","push","logout","localStorage","removeItem","editUser","Array","isArray","saveEditedTeacher","put","log","cancelEdit","openCreateDialog","saveNewTeacher","rol","post","status","cancelCreate","deleteTeacher","delete","projectId","name","renderProjectName","handleRowClick","item","params","userId","mounted"],"sources":["/Users/angel/school-project/my-app/src/components/TeachersPage.vue"],"sourcesContent":["<template>\n  <v-app>\n    <v-container fluid>\n      <!-- Top Bar -->\n      <v-app-bar app color=\"blue darken-2\" dark>\n        <!-- Burger menu icon -->\n        <v-btn icon @click=\"drawer = !drawer\">\n          <v-icon>mdi-menu</v-icon>\n        </v-btn>\n        <!-- Title -->\n        <v-toolbar-title>{{ userName }}</v-toolbar-title>\n        <v-spacer></v-spacer>\n        <!-- Logout button -->\n        <v-btn icon @click=\"logout\">\n          <v-icon>mdi-logout</v-icon>\n        </v-btn>\n      </v-app-bar>\n\n      <!-- Sidebar -->\n      <v-navigation-drawer app v-model=\"drawer\" color=\"blue darken-2\" dark>\n        <v-list dense>\n          <v-list-item\n            v-for=\"(item, index) in sidebarItems\"\n            :key=\"index\"\n            @click=\"navigate(index)\"\n          >\n            <v-list-item-action>\n              <v-icon>{{ item.icon }}</v-icon>\n            </v-list-item-action>\n            <v-list-item-content>\n              <v-list-item-title>{{ item.title }}</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n        </v-list>\n      </v-navigation-drawer>\n\n      <v-main>\n        <!-- Main content -->\n        <v-col cols=\"12\" style=\"max-width: 1500px; margin: 0px auto\">\n          <v-card class=\"text-center\" style=\"width: 100%; margin: 0px auto\">\n            <!-- Teachers Data -->\n            <v-data-table\n              v-if=\"teachers.length > 0\"\n              :items=\"teachers\"\n              align=\"center\"\n            >\n              <template v-slot:top>\n                <v-toolbar flat color=\"blue darken-2\">\n                  <v-toolbar-title>Teachers</v-toolbar-title>\n                  <v-divider class=\"mx-4\" inset vertical></v-divider>\n                  <v-spacer></v-spacer>\n                  <v-btn icon color=\"blue darken-2\" @click=\"openCreateDialog\">\n                    <v-icon>mdi-plus</v-icon>\n                  </v-btn>\n                </v-toolbar>\n              </template>\n              <template v-slot:headers>\n                <tr>\n                  <th>{{ \"ID\" }}</th>\n                  <th>{{ \"Correo\" }}</th>\n                  <th>{{ \"Nombre\" }}</th>\n                  <th>{{ \"Apellido\" }}</th>\n                  <th>{{ \"Apellido Materno\" }}</th>\n                  <th>{{ \"Alumnos\" }}</th>\n                  <!-- Exclude numeroTelefonico from the headers -->\n                </tr>\n              </template>\n              <template v-slot:item=\"{ item }\">\n                <tr @click=\"handleRowClick(item)\" class=\"clickable-row\">\n                  <td>{{ item._id }}</td>\n                  <td>{{ item.correo }}</td>\n                  <td>{{ item.nombre }}</td>\n                  <td>{{ item.apellido }}</td>\n                  <td>{{ item.apellidoM }}</td>\n                  <td>\n                    <v-btn\n                      small\n                      color=\"blue darken-2\"\n                      @click=\"showAssignedStudents(item, $event)\"\n                    >\n                      {{ item.alumnos.length }} Students\n                    </v-btn>\n                  </td>\n                  <td>\n                    <v-btn\n                      icon\n                      small\n                      color=\"blue darken-2\"\n                      @click=\"editUser(item, $event)\"\n                      style=\"width: 30px; height: 30px; margin-right: 5px\"\n                    >\n                      <v-icon style=\"font-size: 18px\">mdi-pencil</v-icon>\n                    </v-btn>\n                    <v-btn\n                      icon\n                      small\n                      color=\"red darken-2\"\n                      @click=\"deleteTeacher(item._id, $event)\"\n                      style=\"width: 30px; height: 30px; margin-right: 5px\"\n                    >\n                      <v-icon style=\"font-size: 18px\">mdi-delete</v-icon>\n                    </v-btn>\n                  </td>\n                </tr>\n              </template>\n            </v-data-table>\n          </v-card>\n        </v-col>\n      </v-main>\n      <!-- Show Assigned Students Dialog -->\n      <!-- Show Assigned Students Dialog -->\n      <v-dialog v-model=\"showAssignedStudentsDialog\" max-width=\"500\">\n        <v-card>\n          <v-card-title class=\"headline\">Assigned Students</v-card-title>\n          <v-card-text>\n            <v-list>\n              <v-list-item\n                v-for=\"student in assignedStudents\"\n                :key=\"student.id\"\n                class=\"mb-4\"\n              >\n                <v-list-item-icon>\n                  <v-icon>mdi-account</v-icon>\n                </v-list-item-icon>\n                <v-list-item-content>\n                  <v-list-item-title class=\"font-weight-bold\">\n                    <span>ID:</span> {{ student._id }}<br />\n                    <span>Name:</span> {{ student.nombre }}<br />\n                    <span>Project:</span> {{ student.projectName }}\n\n                    <!-- Modified to call getProjectName method -->\n                  </v-list-item-title>\n                </v-list-item-content>\n              </v-list-item>\n            </v-list>\n          </v-card-text>\n          <v-card-actions>\n            <v-btn\n              color=\"blue darken-2\"\n              dark\n              large\n              @click=\"showAssignedStudentsDialog = false\"\n              >Close</v-btn\n            >\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n\n      <!-- Edit Dialog -->\n      <v-dialog v-model=\"editDialog\" max-width=\"500\" ref=\"editDialogForm\">\n        <v-card>\n          <v-card-title>Edit Teacher</v-card-title>\n          <v-card-text>\n            <v-text-field\n              v-model=\"teacher.nombre\"\n              label=\"Name\"\n              required\n              :rules=\"[(v) => !!v || 'Name is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.apellido\"\n              label=\"Last Name\"\n              required\n              :rules=\"[(v) => !!v || 'Apellido Paterno is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.apellidoM\"\n              label=\"Apellido Materno\"\n              required\n              :rules=\"[(v) => !!v || 'Apellido Materno is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.correo\"\n              label=\"Email\"\n              required\n              :rules=\"[(v) => !!v || 'Email is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.numeroTelefonico\"\n              label=\"Telefono\"\n              type=\"number\"\n              required\n              :rules=\"[(v) => !!v || 'Phone Number is required']\"\n            ></v-text-field>\n            <!-- Add v-select to select students -->\n            <v-select\n              v-model=\"teacher.alumnos\"\n              :items=\"students\"\n              label=\"Assign students (max 5)\"\n              multiple\n              chips\n              required\n              :rules=\"[(v) => !!v || 'Alumnos is required']\"\n              @update:modelValue=\"limitSelection(false)\"\n            ></v-select>\n            <!-- Add more fields as needed -->\n          </v-card-text>\n          <v-card-actions>\n            <v-btn color=\"blue darken-2\" @click=\"saveEditedTeacher\" :disabled=\"!isEditFormValid\">Save</v-btn>\n            <v-btn @click=\"cancelEdit\">Cancel</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n\n      <!-- Create Dialog -->\n      <v-dialog v-model=\"createDialog\" max-width=\"500\" ref=\"createDialogForm\">\n        <v-card>\n          <v-card-title>Create New Teacher</v-card-title>\n          <v-card-text>\n            <v-text-field v-model=\"teacher._id\" label=\"ID\" required\n              :rules=\"[\n                (v) => {\n                  console.log('ID value:', v);\n                  return !!v || 'ID is required';\n                },\n                (v) => {\n                  const isValid = /^[0-9]+$/.test(v);\n                  console.log('Is ID valid?', isValid);\n                  return isValid || 'ID must contain only numbers';\n                },\n              ]\"></v-text-field>\n            <v-text-field\n              v-model=\"teacher.nombre\"\n              label=\"Name\"\n              required\n              :rules=\"[(v) => !!v || 'Name is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.apellido\"\n              label=\"Last Name\"\n              required\n              :rules=\"[(v) => !!v || 'Apellido Paterno is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.apellidoM\"\n              label=\"Apellido Materno\"\n              required\n              :rules=\"[(v) => !!v || 'Apellido Materno is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.numeroTelefonico\"\n              label=\"Telefono\"\n              type=\"number\"\n              required\n              :rules=\"[(v) => !!v || 'Phone Number is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.correo\"\n              label=\"Email\"\n              required\n              :rules=\"[(v) => !!v || 'Email is required']\"\n            ></v-text-field>\n            <v-text-field\n              v-model=\"teacher.contraseña\"\n              label=\"Password\"\n              type=\"password\"\n              required\n              :rules=\"[(v) => !!v || 'Password is required']\"\n            ></v-text-field>\n            <div>\n              <v-select\n                v-model=\"teacher.alumnos\"\n                :items=\"students\"\n                label=\"Assign students (max 5)\"\n                multiple\n                chips\n                required\n                :rules=\"[(v) => !!v || 'Alumnos is required']\"\n                @update:modelValue=\"limitSelection(true)\"\n              ></v-select>\n            </div>\n            <!-- Add more fields as needed -->\n          </v-card-text>\n          <v-card-actions>\n            <v-btn color=\"blue darken-2\" @click=\"saveNewTeacher\">Save</v-btn>\n            <v-btn @click=\"cancelCreate\">Cancel</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n    </v-container>\n  </v-app>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  data () {\n    return {\n      studentProjectNames: {},\n      students: [],\n      selectedOptions: [],\n      teachers: [],\n      sidebarItems: [\n        { title: 'Projects', icon: 'mdi-folder-outline' },\n        { title: 'Students', icon: 'mdi-account-plus-outline' },\n        { title: 'Teachers', icon: 'mdi-account-tie' }\n      ],\n      userName: 'John Doe',\n      drawer: false,\n      editDialog: false,\n      editedTeacher: {\n        _id: '',\n        nombre: '',\n        apellido: '',\n        correo: '',\n        contraseña: '',\n        alumnos: [],\n        apellidoM: ''\n        // Add more fields as needed\n      },\n      createDialog: false,\n      newTeacher: {\n        nombre: '',\n        apellido: '',\n        correo: '',\n        contraseña: '',\n        apellidoM: ''\n        // Add more fields as needed\n      },\n      showAssignedStudentsDialog: false,\n      assignedStudents: []\n    }\n  },\n  computed: {\n    isEditFormValid () {\n      // Check if the form reference exists\n      if (!this.$refs.editDialogForm) {\n        return false\n      }\n\n      // Manually validate each field\n      return (\n        this.student.nombre &&\n        this.student.apellido &&\n        this.student.apellidoM &&\n        this.student.project &&\n        this.student.carrera &&\n        this.student.numeroTelefonico &&\n        this.student.empresa &&\n        this.student.periodo &&\n        this.student.asesorExterno.nombre &&\n        this.student.asesorExterno.correo &&\n        this.student.asesorExterno.telefono\n      )\n    }\n  },\n  methods: {\n    limitSelection (isNewUser) {\n      if (isNewUser && this.teacher.alumnos.length > 5) {\n        alert('You can only select a maximum of 5 options.')\n        this.teacher.alumnos = this.teacher.alumnos.slice(0, 5)\n      } else if (!isNewUser && this.teacher.alumnos.length > 5) {\n        alert('You can only select a maximum of 5 options.')\n        this.teacher.alumnos = this.teacher.alumnos.slice(0, 5)\n      }\n    },\n    async fetchData () {\n      try {\n        const response = await axios.get('http://localhost:3000/teachers')\n        this.teachers = response.data\n      } catch (error) {\n        console.error('Error fetching teachers:', error)\n      }\n    },\n\n    async fetchStudents () {\n      try {\n        const studentsResponse = await axios.get(\n          'http://localhost:3000/students'\n        )\n        const allStudents = studentsResponse.data\n\n        // Filter out students who are not assigned to any teacher\n        const unassignedStudents = allStudents.filter((student) => {\n          return !this.teachers.some((teacher) =>\n            teacher.alumnos.includes(student._id)\n          )\n        })\n\n        const assignedStudents = allStudents.filter((student) => {\n          return this.teachers.some((teacher) =>\n            teacher.alumnos.includes(student._id)\n          )\n        })\n\n        // Include the teacher's ID in the assignedStudents array\n        const updatedAssignedStudents = assignedStudents.map((student) => ({\n          ...student,\n          teacherId: student.teacherId // Ensure each student object has a teacherId property\n        }))\n\n        // Fetch project names for each student's project\n        const projectNamesPromises = updatedAssignedStudents.map(\n          async (student) => {\n            const projectName = await this.getProjectName(student.project)\n            return { ...student, projectName }\n          }\n        )\n\n        // Wait for all project names to be fetched\n        this.assignedStudents = await Promise.all(projectNamesPromises)\n\n        // Extract just the names from the unassigned students data\n        this.students = unassignedStudents.map((student) => student._id)\n      } catch (error) {\n        console.error('Error fetching students:', error)\n      }\n    },\n\n    async showAssignedStudents (teacher, event) {\n      event.stopPropagation()\n      // Filter assignedStudents to include only those assigned to the current teacher\n      await this.fetchStudents()\n      this.assignedStudents = this.assignedStudents.filter((student) =>\n        teacher.alumnos.includes(student._id)\n      )\n      this.showAssignedStudentsDialog = true\n    },\n\n    async navigate (index) {\n      switch (index) {\n        case 0:\n          this.$router.push('/admin')\n          break\n        case 1:\n          this.$router.push('/admin/students')\n          break\n        case 2:\n          this.$router.push('/admin/teachers')\n          break\n        default:\n          break\n      }\n    },\n    logout () {\n      // Logic to logout the user\n      // For example, you can clear any user data or tokens stored in localStorage\n      localStorage.removeItem('token')\n\n      // Redirect the user to the login page\n      this.$router.push('/login')\n    },\n    async editUser (teacher, event) {\n      event.stopPropagation()\n      // Assign the teacher data to editedTeacher\n      await this.fetchStudents()\n      this.teacher = { ...teacher }\n\n      // If editedTeacher has alumnos property, add its students to the students array\n      if (\n        this.teacher.alumnos &&\n        Array.isArray(this.teacher.alumnos)\n      ) {\n        this.students = [...this.students, ...this.teacher.alumnos]\n      }\n\n      // Open the edit dialog\n      this.editDialog = true\n    },\n\n    async saveEditedTeacher () {\n      try {\n        // Send the updated teacher data to the server\n        const response = await axios.put(\n          `http://localhost:3000/users/${this.teacher._id}`,\n          this.editedTeacher\n        )\n\n        console.log('Teacher updated successfully:', response.data)\n        this.fetchData()\n      } catch (error) {\n        console.error('Error updating teacher:', error)\n      }\n      this.editDialog = false\n    },\n\n    cancelEdit () {\n      this.editDialog = false\n    },\n    openCreateDialog () {\n      this.createDialog = true\n      this.fetchStudents()\n    },\n    async saveNewTeacher () {\n      try {\n        // Add 'rol' field with value 'teacher'\n        this.teacher.rol = 'teacher'\n\n        const response = await axios.post(\n          'http://localhost:3000/register',\n          this.teacher\n        )\n        if (response.status === 201) {\n          console.log('Teacher created successfully:', response.data)\n          this.fetchData()\n        } else {\n          console.error('Failed to create teacher:', response.data)\n        }\n      } catch (error) {\n        console.error('Error creating teacher:', error)\n      }\n      this.createDialog = false\n    },\n\n    cancelCreate () {\n      this.createDialog = false\n    },\n    async deleteTeacher (teacherId, event) {\n      event.stopPropagation()\n      try {\n        const response = await axios.delete(\n          `http://localhost:3000/users/${teacherId}`\n        )\n        console.log('Teacher deleted successfully:', response.data)\n        this.fetchData() // Call a method to update the UI or fetch updated data\n      } catch (error) {\n        console.error('Error deleting teacher:', error)\n      }\n    },\n\n    async getProjectName (projectId) {\n      try {\n        const response = await axios.get(\n          `http://localhost:3000/projects/${projectId}`\n        )\n        const data = response.data // Assuming the project name is stored in the 'name' field\n        return data.name\n      } catch (error) {\n        console.error('Error fetching project name:', error)\n        return 'Unknown' // Return a default value if an error occurs\n      }\n    },\n    async renderProjectName (projectId) {\n      const projectName = await this.getProjectName(projectId)\n      this.studentProjectNames[projectId] = projectName // Store the project name\n    },\n\n    handleRowClick (item) {\n      // Handle row click event here\n      console.log('Row clicked:', item)\n      // Navigate to a new page and pass the user's ID as route parameters\n      this.$router.push({\n        name: 'UserDetails',\n        params: { userId: item._id }\n      })\n    }\n  },\n  mounted () {\n    this.fetchData()\n    this.fetchStudents()\n  }\n}\n</script>\n\n<style scoped>\n.v-btn i {\n  color: white;\n}\n\n.clickable-row:hover {\n  cursor: pointer;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}